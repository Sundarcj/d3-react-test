/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./js/ChartController/ChartController.js":
/*!***********************************************!*\
  !*** ./js/ChartController/ChartController.js ***!
  \***********************************************/
/***/ (function() {

"use strict";
eval("/*$Id$*/\n //No I18N\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n(function (ctx) {\n  var Chart = ctx.Chart;\n  var Framework = ctx.Framework;\n  var ChartConstants = ctx.ChartConstants;\n  var ChartDefaults = ctx.ChartDefaults;\n\n  var ChartController = function () {\n    var _ref;\n\n    var _chartMap = {};\n\n    function setKV(key, value) {\n      _chartMap[key] = value;\n    }\n\n    function createNewChart(id, type, framework) {\n      var newChart = {};\n      newChart[ChartConstants.CHART_META_OBJECT] = new Chart(type);\n      newChart[ChartConstants.FRAMEWORK_OBJECT] = new Framework(type, framework);\n      setKV(id, newChart);\n    }\n\n    function setChartType(chartMeta, type) {\n      chartMeta[ChartConstants.CHART] || (chartMeta[ChartConstants.CHART] = {});\n      chartMeta[ChartConstants.CHART][ChartConstants.TYPE] = type;\n    }\n\n    function createChart(id, chartMeta, dataMeta, framework, chartType) {\n      setChartType(chartMeta, chartType);\n      createNewChart(id, chartType, framework);\n      var chartMetaObj = _chartMap[id][ChartConstants.CHART_META_OBJECT];\n      chartMetaObj.populateMeta(chartMeta);\n      chartMetaObj.setChartRenderId(id);\n      dataMeta = chartMetaObj.preprocessData(dataMeta);\n      var chartMetaJSON = chartMetaObj.getChartMetaJSON();\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].createChart(chartMetaJSON, dataMeta);\n    }\n\n    return _ref = {\n      /* Setting the defaults for the chart. */\n      setDefaults: function setDefaults(defaults) {\n        ChartDefaults.set(defaults);\n      },\n      createColumnChart: function createColumnChart(id, chartMeta, dataMeta, framework) {\n        createChart(id, chartMeta, dataMeta, framework, ChartConstants.COL);\n      },\n      createStackedColumnChart: function createStackedColumnChart(id, chartMeta, dataMeta, framework) {\n        createChart(id, chartMeta, dataMeta, framework, ChartConstants.STACKED_COL);\n      },\n      createStackedPercentColumnChart: function createStackedPercentColumnChart(id, chartMeta, dataMeta, framework) {\n        createChart(id, chartMeta, dataMeta, framework, ChartConstants.STACKED_PERCENT_COL);\n      },\n      createGroupedColumnChart: function createGroupedColumnChart(id, chartMeta, dataMeta, framework) {\n        createChart(id, chartMeta, dataMeta, framework, ChartConstants.GROUPED_COL);\n      },\n      createComboChart: function createComboChart(id, chartMeta, dataMeta, framework) {\n        createChart(id, chartMeta, dataMeta, framework, ChartConstants.COMBO);\n      },\n      createLineChart: function createLineChart(id, chartMeta, dataMeta, framework) {\n        createChart(id, chartMeta, dataMeta, framework, ChartConstants.LINE);\n      },\n      createSplineChart: function createSplineChart(id, chartMeta, dataMeta, framework) {\n        createChart(id, chartMeta, dataMeta, framework, ChartConstants.SPLINE);\n      },\n      createStepLineChart: function createStepLineChart(id, chartMeta, dataMeta, framework) {\n        createChart(id, chartMeta, dataMeta, framework, ChartConstants.STEP_LINE);\n      },\n      createAreaChart: function createAreaChart(id, chartMeta, dataMeta, framework) {\n        createChart(id, chartMeta, dataMeta, framework, ChartConstants.AREA);\n      },\n      createAreaSplineChart: function createAreaSplineChart(id, chartMeta, dataMeta, framework) {\n        createChart(id, chartMeta, dataMeta, framework, ChartConstants.AREA_SPLINE);\n      },\n      createStackedAreaChart: function createStackedAreaChart(id, chartMeta, dataMeta, framework) {\n        createChart(id, chartMeta, dataMeta, framework, ChartConstants.STACKED_AREA);\n      },\n      createStackedPercentAreaChart: function createStackedPercentAreaChart(id, chartMeta, dataMeta, framework) {\n        createChart(id, chartMeta, dataMeta, framework, ChartConstants.STACKED_PERCENT_AREA);\n      },\n      createBarChart: function createBarChart(id, chartMeta, dataMeta, framework) {\n        createChart(id, chartMeta, dataMeta, framework, ChartConstants.BAR);\n      },\n      createStackedBarChart: function createStackedBarChart(id, chartMeta, dataMeta, framework) {\n        createChart(id, chartMeta, dataMeta, framework, ChartConstants.STACKED_BAR);\n      },\n      createStackedPercentBarChart: function createStackedPercentBarChart(id, chartMeta, dataMeta, framework) {\n        createChart(id, chartMeta, dataMeta, framework, ChartConstants.STACKED_PERCENT_BAR);\n      },\n      createGroupedBarChart: function createGroupedBarChart(id, chartMeta, dataMeta, framework) {\n        createChart(id, chartMeta, dataMeta, framework, ChartConstants.GROUPED_BAR);\n      },\n      createPieChart: function createPieChart(id, chartMeta, dataMeta, framework) {\n        createChart(id, chartMeta, dataMeta, framework, ChartConstants.PIE);\n      },\n      createSemiPieChart: function createSemiPieChart(id, chartMeta, dataMeta, framework) {\n        createChart(id, chartMeta, dataMeta, framework, ChartConstants.SEMI_PIE);\n      },\n      createDonutChart: function createDonutChart(id, chartMeta, dataMeta, framework) {\n        createChart(id, chartMeta, dataMeta, framework, ChartConstants.DONUT);\n      },\n      createSemiDonutChart: function createSemiDonutChart(id, chartMeta, dataMeta, framework) {\n        createChart(id, chartMeta, dataMeta, framework, ChartConstants.SEMI_DONUT);\n      },\n      createWordCloudChart: function createWordCloudChart(id, chartMeta, dataMeta, framework) {\n        createChart(id, chartMeta, dataMeta, framework, ChartConstants.WORDCLOUD);\n      },\n      createRaceBarChart: function createRaceBarChart(id, chartMeta, dataMeta, framework) {\n        createChart(id, chartMeta, dataMeta, framework, ChartConstants.RACEBAR);\n      },\n      createScatterChart: function createScatterChart(id, chartMeta, dataMeta, framework) {\n        createChart(id, chartMeta, dataMeta, framework, ChartConstants.SCATTER);\n      },\n      createScatterLineChart: function createScatterLineChart(id, chartMeta, dataMeta, framework) {\n        createChart(id, chartMeta, dataMeta, framework, ChartConstants.SCATTER_LINE);\n      },\n      createScatterLineMarkersChart: function createScatterLineMarkersChart(id, chartMeta, dataMeta, framework) {\n        createChart(id, chartMeta, dataMeta, framework, ChartConstants.SCATTER_LINE_MARKERS);\n      },\n      createBubbleChart: function createBubbleChart(id, chartMeta, dataMeta, framework) {\n        createChart(id, chartMeta, dataMeta, framework, ChartConstants.BUBBLE);\n      },\n      createFunnelChart: function createFunnelChart(id, chartMeta, dataMeta, framework) {\n        createChart(id, chartMeta, dataMeta, framework, ChartConstants.FUNNEL);\n      },\n      createWeightedFunnelChart: function createWeightedFunnelChart(id, chartMeta, dataMeta, framework) {\n        createChart(id, chartMeta, dataMeta, framework, ChartConstants.WEIGHTED_FUNNEL);\n      },\n      createBulletColumnChart: function createBulletColumnChart(id, chartMeta, dataMeta, framework) {\n        createChart(id, chartMeta, dataMeta, framework, ChartConstants.BULLET_COL);\n      },\n      createBulletBarChart: function createBulletBarChart(id, chartMeta, dataMeta, framework) {\n        createChart(id, chartMeta, dataMeta, framework, ChartConstants.BULLET_BAR);\n      },\n      createHistogramChart: function createHistogramChart(id, chartMeta, dataMeta, framework) {\n        createChart(id, chartMeta, dataMeta, framework, ChartConstants.HISTOGRAM);\n      },\n      createLineTimeSeriesChart: function createLineTimeSeriesChart(id, chartMeta, dataMeta, framework) {\n        createChart(id, chartMeta, dataMeta, framework, ChartConstants.LINE_TIME_SERIES);\n      },\n      createAreaTimeSeriesChart: function createAreaTimeSeriesChart(id, chartMeta, dataMeta, framework) {\n        createChart(id, chartMeta, dataMeta, framework, ChartConstants.AREA_TIME_SERIES);\n      },\n      changeChartType: function changeChartType(id, type, dataMeta) {\n        var chartMetaObj = _chartMap[id][ChartConstants.CHART_META_OBJECT];\n        var frameworkObj = _chartMap[id][ChartConstants.FRAMEWORK_OBJECT];\n        chartMetaObj.setChartType(type);\n        frameworkObj.updateChartType(type);\n        var chartMetaJSON = chartMetaObj.getChartMetaJSON();\n\n        _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].createChart(chartMetaJSON, dataMeta);\n      },\n      updateData: function updateData(id, dataMeta) {\n        var chartMetaObj = _chartMap[id][ChartConstants.CHART_META_OBJECT];\n        dataMeta = chartMetaObj.preprocessData(dataMeta);\n\n        _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateData(dataMeta, chartMetaObj.getChartMetaJSON());\n      },\n      updateEnableCumulationStatus: function updateEnableCumulationStatus(id, dataMeta, index, status) {\n        _chartMap[id][ChartConstants.CHART_META_OBJECT].setEnableCumulationStatus(index, status);\n\n        var chartMetaObj = _chartMap[id][ChartConstants.CHART_META_OBJECT];\n        dataMeta = chartMetaObj.preprocessData(dataMeta);\n\n        _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateData(dataMeta, chartMetaObj.getChartMetaJSON());\n      },\n      updateAnimationDuration: function updateAnimationDuration(id, duration) {\n        _chartMap[id][ChartConstants.CHART_META_OBJECT].setAnimationDuration(duration);\n\n        _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateAnimationDuration(duration);\n      },\n      updateInvertedStatus: function updateInvertedStatus(id, status) {\n        _chartMap[id][ChartConstants.CHART_META_OBJECT].setInvertedStatus(status);\n\n        _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateInvertedStatus(status);\n      },\n      updateChartFontFamily: function updateChartFontFamily(id, fontFamily) {\n        _chartMap[id][ChartConstants.CHART_META_OBJECT].setChartFontFamily(fontFamily);\n\n        _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateChartFontFamily(fontFamily);\n      },\n      updateCaptionStatus: function updateCaptionStatus(id, status) {\n        _chartMap[id][ChartConstants.CHART_META_OBJECT].setCaptionStatus(status);\n\n        _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateCaptionStatus(status);\n      },\n      updateCaptionFontColor: function updateCaptionFontColor(id, color) {\n        _chartMap[id][ChartConstants.CHART_META_OBJECT].setCaptionFontColor(color);\n\n        _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateCaptionFontColor(color);\n      },\n      updateCaptionFontSize: function updateCaptionFontSize(id, size) {\n        _chartMap[id][ChartConstants.CHART_META_OBJECT].setCaptionFontSize(size);\n\n        _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateCaptionFontSize(size);\n      },\n      updateCaptionFontWeight: function updateCaptionFontWeight(id, weight) {\n        _chartMap[id][ChartConstants.CHART_META_OBJECT].setCaptionFontWeight(weight);\n\n        _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateCaptionFontWeight(weight);\n      },\n      updateCaptionFontStyle: function updateCaptionFontStyle(id, style) {\n        _chartMap[id][ChartConstants.CHART_META_OBJECT].setCaptionFontStyle(style);\n\n        _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateCaptionFontStyle(style);\n      },\n      updateTitle: function updateTitle(id, title) {\n        _chartMap[id][ChartConstants.CHART_META_OBJECT].setTitleText(title);\n\n        _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateTitle(title);\n      },\n      updateTitleFontColor: function updateTitleFontColor(id, color) {\n        _chartMap[id][ChartConstants.CHART_META_OBJECT].setTitleFontColor(color);\n\n        _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateTitleFontColor(color);\n      },\n      updateTitleFontSize: function updateTitleFontSize(id, size) {\n        _chartMap[id][ChartConstants.CHART_META_OBJECT].setTitleFontSize(size);\n\n        _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateTitleFontSize(size);\n      },\n      updateTitleFontWeight: function updateTitleFontWeight(id, weight) {\n        _chartMap[id][ChartConstants.CHART_META_OBJECT].setTitleFontWeight(weight);\n\n        _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateTitleFontWeight(weight);\n      },\n      updateTitleFontStyle: function updateTitleFontStyle(id, style) {\n        _chartMap[id][ChartConstants.CHART_META_OBJECT].setTitleFontStyle(style);\n\n        _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateTitleFontStyle(style);\n      },\n      updateSubTitle: function updateSubTitle(id, subtitle) {\n        _chartMap[id][ChartConstants.CHART_META_OBJECT].setSubTitleText(subtitle);\n\n        _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateSubTitle(subtitle);\n      },\n      updateSubtitleFontColor: function updateSubtitleFontColor(id, color) {\n        _chartMap[id][ChartConstants.CHART_META_OBJECT].setSubtitleFontColor(color);\n\n        _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateSubtitleFontColor(color);\n      },\n      updateSubtitleFontSize: function updateSubtitleFontSize(id, size) {\n        _chartMap[id][ChartConstants.CHART_META_OBJECT].setSubtitleFontSize(size);\n\n        _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateSubtitleFontSize(size);\n      },\n      updateSubtitleFontWeight: function updateSubtitleFontWeight(id, weight) {\n        _chartMap[id][ChartConstants.CHART_META_OBJECT].setSubtitleFontWeight(weight);\n\n        _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateSubtitleFontWeight(weight);\n      },\n      updateSubtitleFontStyle: function updateSubtitleFontStyle(id, style) {\n        _chartMap[id][ChartConstants.CHART_META_OBJECT].setSubtitleFontStyle(style);\n\n        _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateSubtitleFontStyle(style);\n      },\n      //Legend\n      updateLegend: function updateLegend(id, legendOptions) {\n        _chartMap[id][ChartConstants.CHART_META_OBJECT].setLegend(legendOptions);\n\n        _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateLegend(legendOptions);\n      },\n      updateLegendStatus: function updateLegendStatus(id, isEnabled) {\n        _chartMap[id][ChartConstants.CHART_META_OBJECT].setLegendStatus(isEnabled);\n\n        _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateLegendStatus(isEnabled);\n      },\n      updateLegendFontColor: function updateLegendFontColor(id, color) {\n        _chartMap[id][ChartConstants.CHART_META_OBJECT].setLegendFontColor(color);\n\n        _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateLegendFontColor(color);\n      },\n      updateLegendFontSize: function updateLegendFontSize(id, size) {\n        _chartMap[id][ChartConstants.CHART_META_OBJECT].setLegendFontSize(size);\n\n        _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateLegendFontSize(size);\n      },\n      updateLegendFontWeight: function updateLegendFontWeight(id, weight) {\n        _chartMap[id][ChartConstants.CHART_META_OBJECT].setLegendFontWeight(weight);\n\n        _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateLegendFontWeight(weight);\n      },\n      updateLegendFontStyle: function updateLegendFontStyle(id, style) {\n        _chartMap[id][ChartConstants.CHART_META_OBJECT].setLegendFontStyle(style);\n\n        _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateLegendFontStyle(style);\n      },\n      updateDatalabelEnabled: function updateDatalabelEnabled(id, isEnabled) {\n        _chartMap[id][ChartConstants.CHART_META_OBJECT].setDatalabelEnabled(isEnabled);\n\n        _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateDatalabelEnabled(isEnabled);\n      }\n    }, _defineProperty(_ref, \"updateDatalabelEnabled\", function updateDatalabelEnabled(id, isEnabled, index) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setDatalabelEnabled(isEnabled, index);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateDatalabelEnabled(isEnabled, index);\n    }), _defineProperty(_ref, \"updateDatalabelFontSize\", function updateDatalabelFontSize(id, size, index) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setDatalabelFontSize(size, index);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateDatalabelFontSize(size, index);\n    }), _defineProperty(_ref, \"updateDatalabelFontColor\", function updateDatalabelFontColor(id, color, index) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setDatalabelFontColor(color, index);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateDatalabelFontColor(color, index);\n    }), _defineProperty(_ref, \"updateDatalabelFontWeight\", function updateDatalabelFontWeight(id, weight, index) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setDatalabelFontWeight(weight, index);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateDatalabelFontWeight(weight, index);\n    }), _defineProperty(_ref, \"updateDatalabelFontStyle\", function updateDatalabelFontStyle(id, style, index) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setDatalabelFontStyle(style, index);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateDatalabelFontStyle(style, index);\n    }), _defineProperty(_ref, \"updateDatalabelPosition\", function updateDatalabelPosition(id, position, index) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setDatalabelPosition(position, index);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateDatalabelPosition(position, index);\n    }), _defineProperty(_ref, \"updateDatalabelFormat\", function updateDatalabelFormat(id, format, index) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setDatalabelFormat(format, index);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateDatalabelFormat(format, index);\n    }), _defineProperty(_ref, \"updateHAxisLabelsEnbaled\", function updateHAxisLabelsEnbaled(id, isEnabled, index) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setHorizontalAxisLabelsEnabled(isEnabled, index);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateHAxisLabelsEnbaled(isEnabled, index);\n    }), _defineProperty(_ref, \"updateHLabelsFontColor\", function updateHLabelsFontColor(id, color, index) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setHLabelsFontColor(color, index);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateHLabelsFontColor(color, index);\n    }), _defineProperty(_ref, \"updateHLabelsFontSize\", function updateHLabelsFontSize(id, size, index) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setHLabelsFontSize(size, index);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateHLabelsFontSize(size, index);\n    }), _defineProperty(_ref, \"updateHLabelsFontWeight\", function updateHLabelsFontWeight(id, weight, index) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setHLabelsFontWeight(weight, index);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateHLabelsFontWeight(weight, index);\n    }), _defineProperty(_ref, \"updateHLabelsFontStyle\", function updateHLabelsFontStyle(id, style, index) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setHLabelsFontStyle(style, index);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateHLabelsFontStyle(style, index);\n    }), _defineProperty(_ref, \"updateHLabelsSLCount\", function updateHLabelsSLCount(id, count, index) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setHLabelsSLCount(count, index);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateHLabelsSLCount(count, index);\n    }), _defineProperty(_ref, \"updateHLabelsRotation\", function updateHLabelsRotation(id, angle, index) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setHLabelsRotation(angle, index);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateHLabelsRotation(angle, index);\n    }), _defineProperty(_ref, \"updateHAxisReversedValue\", function updateHAxisReversedValue(id, status, index) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setHAxisReversedValue(status, index);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateHAxisReversedValue(status, index);\n    }), _defineProperty(_ref, \"updateMinValue\", function updateMinValue(id, min, index) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setMinValue(min, index);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateMinValue(min, index);\n    }), _defineProperty(_ref, \"updateMaxValue\", function updateMaxValue(id, max, index) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setMaxValue(max, index);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateMaxValue(max, index);\n    }), _defineProperty(_ref, \"updateHAxisTitle\", function updateHAxisTitle(id, hTitle, index) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setHorizontalAxisTitleText(hTitle, index);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateHAxisTitle(hTitle, index);\n    }), _defineProperty(_ref, \"updateHtitleFontColor\", function updateHtitleFontColor(id, color, index) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setHtitleFontColor(color, index);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateHtitleFontColor(color, index);\n    }), _defineProperty(_ref, \"updateHtitleFontSize\", function updateHtitleFontSize(id, size, index) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setHtitleFontSize(size, index);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateHtitleFontSize(size, index);\n    }), _defineProperty(_ref, \"updateHtitleFontWeight\", function updateHtitleFontWeight(id, weight, index) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setHtitleFontWeight(weight, index);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateHtitleFontWeight(weight, index);\n    }), _defineProperty(_ref, \"updateHtitleFontStyle\", function updateHtitleFontStyle(id, style, index) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setHtitleFontStyle(style, index);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateHtitleFontStyle(style, index);\n    }), _defineProperty(_ref, \"updateVAxisTitle\", function updateVAxisTitle(id, vTitle, index) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setVerticalAxisTitleText(vTitle, index);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateVAxisTitle(vTitle, index);\n    }), _defineProperty(_ref, \"updateVtitleFontColor\", function updateVtitleFontColor(id, color, index) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setVtitleFontColor(color, index);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateVtitleFontColor(color, index);\n    }), _defineProperty(_ref, \"updateVtitleFontSize\", function updateVtitleFontSize(id, size, index) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setVtitleFontSize(size, index);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateVtitleFontSize(size, index);\n    }), _defineProperty(_ref, \"updateVtitleFontWeight\", function updateVtitleFontWeight(id, weight, index) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setVtitleFontWeight(weight, index);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateVtitleFontWeight(weight, index);\n    }), _defineProperty(_ref, \"updateVtitleFontStyle\", function updateVtitleFontStyle(id, style, index) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setVtitleFontStyle(style, index);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateVtitleFontStyle(style, index);\n    }), _defineProperty(_ref, \"updateVAxisLabelsEnbaled\", function updateVAxisLabelsEnbaled(id, isEnabled, index) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setVerticalAxisLabelsEnabled(isEnabled, index);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateVAxisLabelsEnbaled(isEnabled, index);\n    }), _defineProperty(_ref, \"updateVLabelsFontColor\", function updateVLabelsFontColor(id, color, index) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setVLabelsFontColor(color, index);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateVLabelsFontColor(color, index);\n    }), _defineProperty(_ref, \"updateVLabelsFontSize\", function updateVLabelsFontSize(id, size, index) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setVLabelsFontSize(size, index);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateVLabelsFontSize(size, index);\n    }), _defineProperty(_ref, \"updateVLabelsFontWeight\", function updateVLabelsFontWeight(id, weight, index) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setVLabelsFontWeight(weight, index);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateVLabelsFontWeight(weight, index);\n    }), _defineProperty(_ref, \"updateVLabelsFontStyle\", function updateVLabelsFontStyle(id, style, index) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setVLabelsFontStyle(style, index);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateVLabelsFontStyle(style, index);\n    }), _defineProperty(_ref, \"updateVStackLabelsEnbaled\", function updateVStackLabelsEnbaled(id, isEnabled, index) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setVStackLabelsEnabled(isEnabled, index);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateVStackLabelsEnbaled(isEnabled, index);\n    }), _defineProperty(_ref, \"updateVStackLabelsFontColor\", function updateVStackLabelsFontColor(id, color, index) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setVStackLabelsFontColor(color, index);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateVStackLabelsFontColor(color, index);\n    }), _defineProperty(_ref, \"updateVStackLabelsFontSize\", function updateVStackLabelsFontSize(id, size, index) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setVStackLabelsFontSize(size, index);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateVStackLabelsFontSize(size, index);\n    }), _defineProperty(_ref, \"updateVStackLabelsFontWeight\", function updateVStackLabelsFontWeight(id, weight, index) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setVStackLabelsFontWeight(weight, index);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateVStackLabelsFontWeight(weight, index);\n    }), _defineProperty(_ref, \"updateVStackLabelsFontStyle\", function updateVStackLabelsFontStyle(id, style, index) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setVStackLabelsFontStyle(style, index);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateVStackLabelsFontStyle(style, index);\n    }), _defineProperty(_ref, \"updateVAxisType\", function updateVAxisType(id, type, index) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setVAxisType(type, index);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateVAxisType(type, index);\n    }), _defineProperty(_ref, \"updateVAxisPrefix\", function updateVAxisPrefix(id, prefix, index) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setVAxisPrefix(prefix, index);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateVAxisPrefix(prefix, index);\n    }), _defineProperty(_ref, \"updateVAxisSuffix\", function updateVAxisSuffix(id, suffix, index) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setVAxisSuffix(suffix, index);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateVAxisSuffix(suffix, index);\n    }), _defineProperty(_ref, \"updateVAxisPLValue\", function updateVAxisPLValue(id, value, vIndex, plIndex) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setVAxisPLValue(value, vIndex, plIndex);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateVAxisPLValue(value, vIndex, plIndex);\n    }), _defineProperty(_ref, \"updateVAxisPLText\", function updateVAxisPLText(id, text, vIndex, plIndex) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setVAxisPLText(text, vIndex, plIndex);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateVAxisPLText(text, vIndex, plIndex);\n    }), _defineProperty(_ref, \"updateVAxisPLFontWeight\", function updateVAxisPLFontWeight(id, weight, vIndex, plIndex) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setVAxisPLFontWeight(weight, vIndex, plIndex);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateVAxisPLFontWeight(weight, vIndex, plIndex);\n    }), _defineProperty(_ref, \"updateVAxisPLFontStyle\", function updateVAxisPLFontStyle(id, style, vIndex, plIndex) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setVAxisPLFontStyle(style, vIndex, plIndex);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateVAxisPLFontStyle(style, vIndex, plIndex);\n    }), _defineProperty(_ref, \"updateVAxisPLFontSize\", function updateVAxisPLFontSize(id, size, vIndex, plIndex) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setVAxisPLFontSize(size, vIndex, plIndex);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateVAxisPLFontSize(size, vIndex, plIndex);\n    }), _defineProperty(_ref, \"updateVAxisPLFontColor\", function updateVAxisPLFontColor(id, color, vIndex, plIndex) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setVAxisPLFontColor(color, vIndex, plIndex);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateVAxisPLFontColor(color, vIndex, plIndex);\n    }), _defineProperty(_ref, \"updateVAxisPLColor\", function updateVAxisPLColor(id, color, vIndex, plIndex) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setVAxisPLColor(color, vIndex, plIndex);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateVAxisPLColor(color, vIndex, plIndex);\n    }), _defineProperty(_ref, \"updateVAxisPLType\", function updateVAxisPLType(id, type, vIndex, plIndex) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setVAxisPLType(type, vIndex, plIndex);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateVAxisPLType(type, vIndex, plIndex);\n    }), _defineProperty(_ref, \"updateVAxisMin\", function updateVAxisMin(id, min, index) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setVAxisMin(min, index);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateVAxisMin(min, index);\n    }), _defineProperty(_ref, \"updateVAxisMax\", function updateVAxisMax(id, max, index) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setVAxisMax(max, index);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateVAxisMax(max, index);\n    }), _defineProperty(_ref, \"updateVAxisInterval\", function updateVAxisInterval(id, interval, index) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setVAxisInterval(interval, index);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateVAxisInterval(interval, index);\n    }), _defineProperty(_ref, \"updateVAxisBaseValue\", function updateVAxisBaseValue(id, baseValue, index) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setVAxisBaseValue(baseValue, index);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateVAxisBaseValue(baseValue, index);\n    }), _defineProperty(_ref, \"addVAxisPlotLine\", function addVAxisPlotLine(id, index, plOptions) {\n      var properPlotLine = _chartMap[id][ChartConstants.CHART_META_OBJECT].addVAxisPlotLine(index, plOptions);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].addVAxisPlotLine(index, properPlotLine);\n    }), _defineProperty(_ref, \"removeVAxisPlotLine\", function removeVAxisPlotLine(id, vIndex, plIndex) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].removeVAxisPlotLine(vIndex, plIndex);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].removeVAxisPlotLine(vIndex, plIndex);\n    }), _defineProperty(_ref, \"updateMultipleYAxisStatus\", function updateMultipleYAxisStatus(id, status, customProperties) {\n      var yAxis = _chartMap[id][ChartConstants.CHART_META_OBJECT].setMultipleYAxisStatus(status, customProperties);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateMultipleYAxisStatus(status, yAxis);\n    }), _defineProperty(_ref, \"updateHAxisMajorGLStatus\", function updateHAxisMajorGLStatus(id, index, status) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setHAxisMajorGLStatus(index, status);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateHAxisMajorGLStatus(index, status);\n    }), _defineProperty(_ref, \"updateHAxisMajorGLCount\", function updateHAxisMajorGLCount(id, index, count) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setHAxisMajorGLCount(index, count);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateHAxisMajorGLCount(index, count);\n    }), _defineProperty(_ref, \"updateHAxisMajorGLType\", function updateHAxisMajorGLType(id, index, type) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setHAxisMajorGLType(index, type);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateHAxisMajorGLType(index, type);\n    }), _defineProperty(_ref, \"updateHAxisMajorGLColor\", function updateHAxisMajorGLColor(id, index, color) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setHAxisMajorGLColor(index, color);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateHAxisMajorGLColor(index, color);\n    }), _defineProperty(_ref, \"updateHAxisMinorGLStatus\", function updateHAxisMinorGLStatus(id, index, status) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setHAxisMinorGLStatus(index, status);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateHAxisMinorGLStatus(index, status);\n    }), _defineProperty(_ref, \"updateHAxisMinorGLType\", function updateHAxisMinorGLType(id, index, type) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setHAxisMinorGLType(index, type);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateHAxisMinorGLType(index, type);\n    }), _defineProperty(_ref, \"updateHAxisMinorGLColor\", function updateHAxisMinorGLColor(id, index, color) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setHAxisMinorGLColor(index, color);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateHAxisMinorGLColor(index, color);\n    }), _defineProperty(_ref, \"updateVAxisMajorGLStatus\", function updateVAxisMajorGLStatus(id, index, status) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setVAxisMajorGLStatus(index, status);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateVAxisMajorGLStatus(index, status);\n    }), _defineProperty(_ref, \"updateVAxisMajorGLCount\", function updateVAxisMajorGLCount(id, index, count) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setVAxisMajorGLCount(index, count);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateVAxisMajorGLCount(index, count);\n    }), _defineProperty(_ref, \"updateVAxisMajorGLType\", function updateVAxisMajorGLType(id, index, type) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setVAxisMajorGLType(index, type);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateVAxisMajorGLType(index, type);\n    }), _defineProperty(_ref, \"updateVAxisMajorGLColor\", function updateVAxisMajorGLColor(id, index, color) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setVAxisMajorGLColor(index, color);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateVAxisMajorGLColor(index, color);\n    }), _defineProperty(_ref, \"updateVAxisMinorGLStatus\", function updateVAxisMinorGLStatus(id, index, status) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setVAxisMinorGLStatus(index, status);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateVAxisMinorGLStatus(index, status);\n    }), _defineProperty(_ref, \"updateVAxisMinorGLType\", function updateVAxisMinorGLType(id, index, type) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setVAxisMinorGLType(index, type);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateVAxisMinorGLType(index, type);\n    }), _defineProperty(_ref, \"updateVAxisMinorGLColor\", function updateVAxisMinorGLColor(id, index, color) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setVAxisMinorGLColor(index, color);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateVAxisMinorGLColor(index, color);\n    }), _defineProperty(_ref, \"updateBackgroundColor\", function updateBackgroundColor(id, bg_color) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setBackGroundColor(bg_color);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateBackgroundColor(_chartMap[id][ChartConstants.CHART_META_OBJECT].getChartMetaJSON(), bg_color);\n    }), _defineProperty(_ref, \"updateBorderColor\", function updateBorderColor(id, border_color) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setBorderColor(border_color);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateBorderColor(border_color);\n    }), _defineProperty(_ref, \"updateColorTheme\", function updateColorTheme(id, theme) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setColorTheme(theme);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateColorTheme(_chartMap[id][ChartConstants.CHART_META_OBJECT].getChartMetaJSON(), theme);\n    }), _defineProperty(_ref, \"updateGradientStatus\", function updateGradientStatus(id, isEnabled) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setGradientStatus(isEnabled);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateGradientStatus(isEnabled);\n    }), _defineProperty(_ref, \"updateDecimalsValue\", function updateDecimalsValue(id, index, decimal, dataMeta) {\n      var chartMetaObj = _chartMap[id][ChartConstants.CHART_META_OBJECT];\n      dataMeta = chartMetaObj.preprocessData(dataMeta);\n      chartMetaObj.setDecimalsValue(index, decimal);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateDecimalsValue(index, decimal, dataMeta, chartMetaObj.getChartMetaJSON());\n    }), _defineProperty(_ref, \"updateSeriesColor\", function updateSeriesColor(id, index, color) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setSeriesColor(index, color);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateSeriesColor(index, color);\n    }), _defineProperty(_ref, \"updateDataColor\", function updateDataColor(id, color, seriesIndex, dataIndex) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setDataColor(color, seriesIndex, dataIndex);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateDataColor(color, seriesIndex, dataIndex);\n    }), _defineProperty(_ref, \"updateDataBorderColor\", function updateDataBorderColor(id, color, seriesIndex, dataIndex) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setDataBorderColor(color, seriesIndex, dataIndex);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateDataBorderColor(color, seriesIndex, dataIndex);\n    }), _defineProperty(_ref, \"updateTargetColor\", function updateTargetColor(id, index, color) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setTargetColor(index, color);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateTargetColor(index, color);\n    }), _defineProperty(_ref, \"updateBinningInterval\", function updateBinningInterval(id, index, interval, dataMeta) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setBinningInterval(index, interval);\n\n      ChartController.createHistogramChart(id, _chartMap[id][ChartConstants.CHART_META_OBJECT].getChartMetaJSON(), dataMeta);\n    }), _defineProperty(_ref, \"updateBorderColors\", function updateBorderColors(id, index, color) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setBorderColors(index, color);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateBorderColors(index, color);\n    }), _defineProperty(_ref, \"updateMarkerStatus\", function updateMarkerStatus(id, index, status) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setMarkerStatus(index, status);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateMarkerStatus(index, status);\n    }), _defineProperty(_ref, \"updateMarkerShape\", function updateMarkerShape(id, index, shape) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setMarkerShape(index, shape);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateMarkerShape(index, shape);\n    }), _defineProperty(_ref, \"updateMarkerSize\", function updateMarkerSize(id, index, size) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setMarkerSize(index, size);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateMarkerSize(index, size);\n    }), _defineProperty(_ref, \"updateMarkerColor\", function updateMarkerColor(id, index, color) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setMarkerColor(index, color);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateMarkerColor(index, color);\n    }), _defineProperty(_ref, \"upateMarkerBorderColor\", function upateMarkerBorderColor(id, index, borderColor) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setMarkerBorderColor(index, borderColor);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].upateMarkerBorderColor(index, borderColor);\n    }), _defineProperty(_ref, \"updateLineType\", function updateLineType(id, index, lineType) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setLineType(index, lineType);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateLineType(index, lineType);\n    }), _defineProperty(_ref, \"updateAreaOpacity\", function updateAreaOpacity(id, index, areaOpacity) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setAreaOpacity(index, areaOpacity);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateAreaOpacity(index, areaOpacity);\n    }), _defineProperty(_ref, \"updateThresholdValue\", function updateThresholdValue(id, index, value) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setThresholdValue(index, value);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateThresholdValue(index, value);\n    }), _defineProperty(_ref, \"updateNegativeColor\", function updateNegativeColor(id, index, color) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setNegativeColor(index, color);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateNegativeColor(index, color);\n    }), _defineProperty(_ref, \"updateStartAngle\", function updateStartAngle(id, angle) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setStartAngle(angle);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateStartAngle(angle);\n    }), _defineProperty(_ref, \"updateDonutTotalDatalabelEnabled\", function updateDonutTotalDatalabelEnabled(id, isEnabled) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setDonutTotalDatalabelEnabled(isEnabled);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateDonutTotalDatalabelEnabled(isEnabled);\n    }), _defineProperty(_ref, \"updateDonutTotalDatalabelFontSize\", function updateDonutTotalDatalabelFontSize(id, size) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setDonutTotalDatalabelFontSize(size);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateDonutTotalDatalabelFontSize(size);\n    }), _defineProperty(_ref, \"updateDonutTotalDatalabelFontColor\", function updateDonutTotalDatalabelFontColor(id, color) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setDonutTotalDatalabelFontColor(color);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateDonutTotalDatalabelFontColor(color);\n    }), _defineProperty(_ref, \"updateDonutTotalDatalabelFontWeight\", function updateDonutTotalDatalabelFontWeight(id, weight) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setDonutTotalDatalabelFontWeight(weight);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateDonutTotalDatalabelFontWeight(weight);\n    }), _defineProperty(_ref, \"updateDonutTotalDatalabelFontStyle\", function updateDonutTotalDatalabelFontStyle(id, style) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setDonutTotalDatalabelFontStyle(style);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateDonutTotalDatalabelFontStyle(style);\n    }), _defineProperty(_ref, \"updateSortingOrder\", function updateSortingOrder(id, index, order) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setSortingOrder(index, order);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateSortingOrder(index, order);\n    }), _defineProperty(_ref, \"updateTooltipStatus\", function updateTooltipStatus(id, isEnabled) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setTooltipStatus(isEnabled);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateTooltipStatus(isEnabled);\n    }), _defineProperty(_ref, \"updateTrendlineStatus\", function updateTrendlineStatus(id, isEnabled, index) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setTrendlineStatus(isEnabled, index);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateTrendlineStatus(isEnabled, index);\n    }), _defineProperty(_ref, \"updateTrendlineType\", function updateTrendlineType(id, type, index) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setTrendlineType(type, index);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateTrendlineType(type, index);\n    }), _defineProperty(_ref, \"updateTrendlineOrder\", function updateTrendlineOrder(id, order, index) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setTrendlineOrder(order, index);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateTrendlineOrder(order, index);\n    }), _defineProperty(_ref, \"updateChartSize\", function updateChartSize(id, width, height) {\n      _chartMap[id][ChartConstants.CHART_META_OBJECT].setChartSize(width, height);\n\n      _chartMap[id][ChartConstants.FRAMEWORK_OBJECT].updateChartSize(width, height);\n    }), _defineProperty(_ref, \"getChartMetaJSON\", function getChartMetaJSON(id) {\n      var metaJSON = _chartMap[id][ChartConstants.CHART_META_OBJECT].getChartMetaJSON();\n\n      return metaJSON;\n    }), _ref;\n  }();\n\n  ctx.ChartController = ChartController;\n})(window || this);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/ChartController/ChartController.js\n");

/***/ }),

/***/ "./js/DataHandler/ChartFrameworkChart.js":
/*!***********************************************!*\
  !*** ./js/DataHandler/ChartFrameworkChart.js ***!
  \***********************************************/
/***/ (function() {

"use strict";
eval("/*$Id$*/\n //No I18N\n\n(function (ctx) {\n  var ChartSkeletonConstructor = ctx.ChartSkeletonConstructor;\n  var ChartConstants = ctx.ChartConstants;\n  var C = ctx.ChartConstants;\n  var ChartJSONConvertor = ctx.ChartJSONConvertor;\n  var ArraySkeletonConstructor = ctx.ArraySkeletonConstructor;\n  var ChartKeyList = ctx.ChartKeyList;\n  var GeneralUtilities = ctx.GeneralUtilities;\n  var DataMetaParser = ctx.DataMetaParser;\n\n  var Chart = function () {\n    function Chart(type) {\n      this._chartMeta = constructSkeleton(type);\n      this.setChartType(type);\n      this._dataMeta = {};\n    }\n\n    Chart.prototype.setChartType = function (type) {\n      this._chartMeta[ChartConstants.CHART][ChartConstants.TYPE] = type;\n    };\n\n    Chart.prototype.getChartType = function () {\n      return this._chartMeta[ChartConstants.CHART][ChartConstants.TYPE];\n    };\n\n    Chart.prototype.setChartFontFamily = function (fontFamily) {\n      this._chartMeta[ChartConstants.CHART][ChartConstants.FONT_FAMILY] = fontFamily;\n    };\n\n    Chart.prototype.setAnimationDuration = function (duration) {\n      this._chartMeta[ChartConstants.CHART][ChartConstants.ANIMATION][ChartConstants.DURATION] = duration;\n    };\n\n    Chart.prototype.setInvertedStatus = function (status) {\n      this._chartMeta[ChartConstants.CHART][ChartConstants.INVERTED] = status;\n    };\n\n    Chart.prototype.setChartRenderId = function (id) {\n      this._chartMeta[ChartConstants.CHART][ChartConstants.RENDER_ID] = id;\n    };\n\n    Chart.prototype.getChartRenderId = function () {\n      return this._chartMeta[ChartConstants.CHART][ChartConstants.RENDER_ID];\n    };\n\n    Chart.prototype.setCaptionStatus = function (status) {\n      this._chartMeta[ChartConstants.CAPTION][ChartConstants.ENABLED] = status;\n    };\n\n    Chart.prototype.setCaptionFontSize = function (size) {\n      this._chartMeta[ChartConstants.CAPTION][ChartConstants.FONT_SIZE] = size;\n    };\n\n    Chart.prototype.getCaptionFontSize = function () {\n      return this._chartMeta[ChartConstants.CAPTION][ChartConstants.FONT_SIZE];\n    };\n\n    Chart.prototype.setCaptionFontColor = function (color) {\n      this._chartMeta[ChartConstants.CAPTION][ChartConstants.FONT_COLOR] = color;\n    };\n\n    Chart.prototype.getCaptionFontColor = function () {\n      return this._chartMeta[ChartConstants.CAPTION][ChartConstants.FONT_COLOR];\n    };\n\n    Chart.prototype.setCaptionFontStyle = function (fontStyle) {\n      this._chartMeta[ChartConstants.CAPTION][ChartConstants.FONT_STYLE] = fontStyle;\n    };\n\n    Chart.prototype.getCaptionFontStyle = function () {\n      return this._chartMeta[ChartConstants.CAPTION][ChartConstants.FONT_STYLE];\n    };\n\n    Chart.prototype.setCaptionFontWeight = function (fontWeight) {\n      this._chartMeta[ChartConstants.CAPTION][ChartConstants.FONT_WEIGHT] = fontWeight;\n    };\n\n    Chart.prototype.getCaptionFontWeight = function () {\n      return this._chartMeta[ChartConstants.CAPTION][ChartConstants.FONT_WEIGHT];\n    };\n\n    Chart.prototype.setTitleText = function (title) {\n      this._chartMeta[ChartConstants.TITLE][ChartConstants.TEXT] = title;\n    };\n\n    Chart.prototype.getTitleText = function () {\n      return this._chartMeta[ChartConstants.TITLE][ChartConstants.TEXT];\n    };\n\n    Chart.prototype.setTitleFontSize = function (size) {\n      this._chartMeta[ChartConstants.TITLE][ChartConstants.FONT_SIZE] = size;\n    };\n\n    Chart.prototype.getTitleFontSize = function () {\n      return this._chartMeta[ChartConstants.TITLE][ChartConstants.FONT_SIZE];\n    };\n\n    Chart.prototype.setTitleFontColor = function (color) {\n      this._chartMeta[ChartConstants.TITLE][ChartConstants.FONT_COLOR] = color;\n    };\n\n    Chart.prototype.getTitleFontColor = function () {\n      return this._chartMeta[ChartConstants.TITLE][ChartConstants.FONT_COLOR];\n    };\n\n    Chart.prototype.setTitleFontStyle = function (fontStyle) {\n      this._chartMeta[ChartConstants.TITLE][ChartConstants.FONT_STYLE] = fontStyle;\n    };\n\n    Chart.prototype.getTitleFontStyle = function () {\n      return this._chartMeta[ChartConstants.TITLE][ChartConstants.FONT_STYLE];\n    };\n\n    Chart.prototype.setTitleFontWeight = function (fontWeight) {\n      this._chartMeta[ChartConstants.TITLE][ChartConstants.FONT_WEIGHT] = fontWeight;\n    };\n\n    Chart.prototype.getTitleFontWeight = function (fontWeight) {\n      return this._chartMeta[ChartConstants.TITLE][ChartConstants.FONT_WEIGHT];\n    };\n\n    Chart.prototype.setSubTitleText = function (subtitle) {\n      this._chartMeta[ChartConstants.SUBTITLE][ChartConstants.TEXT] = subtitle;\n    };\n\n    Chart.prototype.getSubTitleText = function () {\n      return this._chartMeta[ChartConstants.SUBTITLE][ChartConstants.TEXT];\n    };\n\n    Chart.prototype.setSubtitleFontSize = function (size) {\n      this._chartMeta[ChartConstants.SUBTITLE][ChartConstants.FONT_SIZE] = size;\n    };\n\n    Chart.prototype.getSubtitleFontSize = function () {\n      return this._chartMeta[ChartConstants.SUBTITLE][ChartConstants.FONT_SIZE];\n    };\n\n    Chart.prototype.setSubtitleFontColor = function (color) {\n      this._chartMeta[ChartConstants.SUBTITLE][ChartConstants.FONT_COLOR] = color;\n    };\n\n    Chart.prototype.getSubtitleFontColor = function () {\n      return this._chartMeta[ChartConstants.SUBTITLE][ChartConstants.FONT_COLOR];\n    };\n\n    Chart.prototype.setSubtitleFontStyle = function (fontStyle) {\n      this._chartMeta[ChartConstants.SUBTITLE][ChartConstants.FONT_STYLE] = fontStyle;\n    };\n\n    Chart.prototype.getSubtitleFontStyle = function () {\n      return this._chartMeta[ChartConstants.SUBTITLE][ChartConstants.FONT_STYLE];\n    };\n\n    Chart.prototype.setSubtitleFontWeight = function (fontWeight) {\n      this._chartMeta[ChartConstants.SUBTITLE][ChartConstants.FONT_WEIGHT] = fontWeight;\n    };\n\n    Chart.prototype.getSubtitleFontWeight = function () {\n      return this._chartMeta[ChartConstants.SUBTITLE][ChartConstants.FONT_WEIGHT];\n    }; //Legend\n\n\n    Chart.prototype.setLegendHAlign = function (hAlign) {\n      this._chartMeta[ChartConstants.LEGEND][ChartConstants.LEGEND_HALIGN] = hAlign;\n    };\n\n    Chart.prototype.getLegendHAlign = function () {\n      return this._chartMeta[ChartConstants.LEGEND][ChartConstants.LEGEND_HALIGN];\n    };\n\n    Chart.prototype.setLegend = function (legendOptions) {\n      var legend = this._chartMeta[ChartConstants.LEGEND];\n      var keys = Object.keys(legendOptions);\n      var keysLen = keys.length || 0;\n\n      for (var i = 0; i < keysLen; i++) {\n        legend[keys[i]] = legendOptions[keys[i]];\n      }\n    };\n\n    Chart.prototype.getLegend = function () {\n      return this._chartMeta[ChartConstants.LEGEND];\n    };\n\n    Chart.prototype.setLegendVAlign = function (vAlign) {\n      this._chartMeta[ChartConstants.LEGEND][ChartConstants.LEGEND_VALIGN] = vAlign;\n    };\n\n    Chart.prototype.getLegendVAlign = function () {\n      return this._chartMeta[ChartConstants.LEGEND][ChartConstants.LEGEND_VALIGN];\n    };\n\n    Chart.prototype.setLegendStatus = function (isEnabled) {\n      this._chartMeta[ChartConstants.LEGEND][ChartConstants.ENABLED] = isEnabled;\n    };\n\n    Chart.prototype.getLegendStatus = function () {\n      return this._chartMeta[ChartConstants.LEGEND][ChartConstants.ENABLED];\n    };\n\n    Chart.prototype.setLegendFontSize = function (size) {\n      this._chartMeta[ChartConstants.LEGEND][ChartConstants.FONT_SIZE] = size;\n    };\n\n    Chart.prototype.getLegendFontSize = function () {\n      return this._chartMeta[ChartConstants.LEGEND][ChartConstants.FONT_SIZE];\n    };\n\n    Chart.prototype.setLegendFontColor = function (color) {\n      this._chartMeta[ChartConstants.LEGEND][ChartConstants.FONT_COLOR] = color;\n    };\n\n    Chart.prototype.getLegendFontColor = function () {\n      return this._chartMeta[ChartConstants.LEGEND][ChartConstants.FONT_COLOR];\n    };\n\n    Chart.prototype.setLegendFontStyle = function (fontStyle) {\n      this._chartMeta[ChartConstants.LEGEND][ChartConstants.FONT_STYLE] = fontStyle;\n    };\n\n    Chart.prototype.getLegendFontStyle = function () {\n      return this._chartMeta[ChartConstants.LEGEND][ChartConstants.FONT_STYLE];\n    };\n\n    Chart.prototype.setLegendFontWeight = function (fontWeight) {\n      this._chartMeta[ChartConstants.LEGEND][ChartConstants.FONT_WEIGHT] = fontWeight;\n    };\n\n    Chart.prototype.getLegendFontWeight = function () {\n      return this._chartMeta[ChartConstants.LEGEND][ChartConstants.FONT_WEIGHT];\n    }; //Datalabels\n\n\n    Chart.prototype.setDatalabelEnabled = function (isEnabled, index) {\n      this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] || (this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] = {});\n      this._chartMeta[ChartConstants.SERIES_PROPERTIES][index][ChartConstants.DATALABELS][ChartConstants.ENABLED] = isEnabled;\n    };\n\n    Chart.prototype.getDatalabelEnabled = function () {\n      this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] || (this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] = {});\n      return this._chartMeta[ChartConstants.SERIES_PROPERTIES][index][ChartConstants.DATALABELS][ChartConstants.ENABLED];\n    };\n\n    Chart.prototype.setDatalabelFontSize = function (size, index) {\n      this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] || (this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] = {});\n      this._chartMeta[ChartConstants.SERIES_PROPERTIES][index][ChartConstants.DATALABELS][ChartConstants.FONT_SIZE] = size;\n    };\n\n    Chart.prototype.setDatalabelFontColor = function (color, index) {\n      this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] || (this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] = {});\n      this._chartMeta[ChartConstants.SERIES_PROPERTIES][index][ChartConstants.DATALABELS][ChartConstants.FONT_COLOR] = color;\n    };\n\n    Chart.prototype.setDatalabelFontWeight = function (weight, index) {\n      this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] || (this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] = {});\n      this._chartMeta[ChartConstants.SERIES_PROPERTIES][index][ChartConstants.DATALABELS][ChartConstants.FONT_WEIGHT] = weight;\n    };\n\n    Chart.prototype.setDatalabelFontStyle = function (style, index) {\n      this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] || (this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] = {});\n      this._chartMeta[ChartConstants.SERIES_PROPERTIES][index][ChartConstants.DATALABELS][ChartConstants.FONT_STYLE] = style;\n    };\n\n    Chart.prototype.setDatalabelPosition = function (position, index) {\n      this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] || (this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] = {});\n      this._chartMeta[ChartConstants.SERIES_PROPERTIES][index][ChartConstants.DATALABELS][ChartConstants.POSITION] = position;\n    };\n\n    Chart.prototype.setDatalabelFormat = function (format, index) {\n      this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] || (this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] = {});\n      this._chartMeta[ChartConstants.SERIES_PROPERTIES][index][ChartConstants.DATALABELS][ChartConstants.FORMAT] = format;\n    }; //H Axis\n\n\n    Chart.prototype.setHorizontalAxisLabelsEnabled = function (isEnabled, index) {\n      this._chartMeta[ChartConstants.HAXIS][index][ChartConstants.LABELS][ChartConstants.ENABLED] = isEnabled;\n    };\n\n    Chart.prototype.getHorizontalAxisLabelsEnabled = function (index) {\n      return this._chartMeta[ChartConstants.HAXIS][index][ChartConstants.LABELS][ChartConstants.ENABLED];\n    };\n\n    Chart.prototype.setHLabelsFontSize = function (size, index) {\n      index = Number(index);\n      this._chartMeta[ChartConstants.HAXIS][index][ChartConstants.LABELS][ChartConstants.FONT_SIZE] = size;\n    };\n\n    Chart.prototype.getHLabelsFontSize = function (index) {\n      index = Number(index);\n      return this._chartMeta[ChartConstants.HAXIS][index][ChartConstants.LABELS][ChartConstants.FONT_SIZE];\n    };\n\n    Chart.prototype.setHLabelsFontColor = function (color, index) {\n      index = Number(index);\n      this._chartMeta[ChartConstants.HAXIS][index][ChartConstants.LABELS][ChartConstants.FONT_COLOR] = color;\n    };\n\n    Chart.prototype.getHLabelsFontColor = function (index) {\n      index = Number(index);\n      return this._chartMeta[ChartConstants.HAXIS][index][ChartConstants.LABELS][ChartConstants.FONT_COLOR];\n    };\n\n    Chart.prototype.setHLabelsFontStyle = function (fontStyle, index) {\n      index = Number(index);\n      this._chartMeta[ChartConstants.HAXIS][index][ChartConstants.LABELS][ChartConstants.FONT_STYLE] = fontStyle;\n    };\n\n    Chart.prototype.getHLabelsFontStyle = function (index) {\n      index = Number(index);\n      return this._chartMeta[ChartConstants.HAXIS][index][ChartConstants.LABELS][ChartConstants.FONT_STYLE];\n    };\n\n    Chart.prototype.setHLabelsFontWeight = function (fontWeight, index) {\n      index = Number(index);\n      this._chartMeta[ChartConstants.HAXIS][index][ChartConstants.LABELS][ChartConstants.FONT_WEIGHT] = fontWeight;\n    };\n\n    Chart.prototype.getHLabelsFontWeight = function (index) {\n      index = Number(index);\n      return this._chartMeta[ChartConstants.HAXIS][index][ChartConstants.LABELS][ChartConstants.FONT_WEIGHT];\n    };\n\n    Chart.prototype.setHLabelsSLCount = function (count, index) {\n      index = Number(index);\n      this._chartMeta[ChartConstants.HAXIS][index][ChartConstants.LABELS][ChartConstants.STAGGER_LINES] = count;\n    };\n\n    Chart.prototype.getHLabelsSLCount = function (index) {\n      index = Number(index);\n      return this._chartMeta[ChartConstants.HAXIS][index][ChartConstants.LABELS][ChartConstants.STAGGER_LINES];\n    };\n\n    Chart.prototype.setHLabelsRotation = function (angle, index) {\n      index = Number(index);\n      this._chartMeta[ChartConstants.HAXIS][index][ChartConstants.LABELS][ChartConstants.ROTATION] = angle;\n    };\n\n    Chart.prototype.getHLabelsRotation = function (index) {\n      index = Number(index);\n      return this._chartMeta[ChartConstants.HAXIS][index][ChartConstants.LABELS][ChartConstants.ROTATION];\n    };\n\n    Chart.prototype.setHAxisReversedValue = function (status, index) {\n      index = Number(index);\n      this._chartMeta[ChartConstants.HAXIS][index][ChartConstants.REVERSED] = status;\n    };\n\n    Chart.prototype.getHAxisReversedValue = function (index) {\n      index = Number(index);\n      return this._chartMeta[ChartConstants.HAXIS][index][ChartConstants.REVERSED];\n    };\n\n    Chart.prototype.setMinValue = function (min, index) {\n      index = Number(index);\n      this._chartMeta[ChartConstants.HAXIS][index][ChartConstants.MIN] = min;\n    };\n\n    Chart.prototype.getMinValue = function (index) {\n      index = Number(index);\n      return this._chartMeta[ChartConstants.HAXIS][index][ChartConstants.MIN];\n    };\n\n    Chart.prototype.setMaxValue = function (max, index) {\n      index = Number(index);\n      this._chartMeta[ChartConstants.HAXIS][index][ChartConstants.MAX] = max;\n    };\n\n    Chart.prototype.getMaxValue = function (index) {\n      index = Number(index);\n      return this._chartMeta[ChartConstants.HAXIS][index][ChartConstants.MAX];\n    };\n\n    Chart.prototype.setHorizontalAxisTitleText = function (xtitle, index) {\n      this._chartMeta[ChartConstants.HAXIS][index][ChartConstants.TITLE][ChartConstants.TEXT] = xtitle;\n    };\n\n    Chart.prototype.getHorizontalAxisTitleText = function (index) {\n      return this._chartMeta[ChartConstants.HAXIS][index][ChartConstants.TITLE][ChartConstants.TEXT];\n    };\n\n    Chart.prototype.setHtitleFontSize = function (size, index) {\n      this._chartMeta[ChartConstants.HAXIS][index][ChartConstants.TITLE][ChartConstants.FONT_SIZE] = size;\n    };\n\n    Chart.prototype.getHtitleFontSize = function (index) {\n      return this._chartMeta[ChartConstants.HAXIS][index][ChartConstants.TITLE][ChartConstants.FONT_SIZE];\n    };\n\n    Chart.prototype.setHtitleFontColor = function (color, index) {\n      this._chartMeta[ChartConstants.HAXIS][index][ChartConstants.TITLE][ChartConstants.FONT_COLOR] = color;\n    };\n\n    Chart.prototype.getHtitleFontColor = function (index) {\n      return this._chartMeta[ChartConstants.HAXIS][index][ChartConstants.TITLE][ChartConstants.FONT_COLOR];\n    };\n\n    Chart.prototype.setHtitleFontStyle = function (fontStyle, index) {\n      this._chartMeta[ChartConstants.HAXIS][index][ChartConstants.TITLE][ChartConstants.FONT_STYLE] = fontStyle;\n    };\n\n    Chart.prototype.getHtitleFontStyle = function (index) {\n      return this._chartMeta[ChartConstants.HAXIS][index][ChartConstants.TITLE][ChartConstants.FONT_STYLE];\n    };\n\n    Chart.prototype.setHtitleFontWeight = function (fontWeight, index) {\n      this._chartMeta[ChartConstants.HAXIS][index][ChartConstants.TITLE][ChartConstants.FONT_WEIGHT] = fontWeight;\n    };\n\n    Chart.prototype.getHtitleFontWeight = function (index) {\n      return this._chartMeta[ChartConstants.HAXIS][index][ChartConstants.TITLE][ChartConstants.FONT_WEIGHT];\n    };\n\n    Chart.prototype.setBinningInterval = function (index, interval) {\n      this._chartMeta[ChartConstants.HAXIS][index][ChartConstants.BINNING_INTERVAL] = interval;\n    };\n\n    Chart.prototype.getBinningInterval = function (index) {\n      return this._chartMeta[ChartConstants.HAXIS][index][ChartConstants.BINNING_INTERVAL];\n    }; // V Axis\n\n\n    Chart.prototype.setVerticalAxisTitleText = function (xtitle, index) {\n      index = Number(index);\n      this._chartMeta[ChartConstants.VAXIS][index][ChartConstants.TITLE][ChartConstants.TEXT] = xtitle;\n    };\n\n    Chart.prototype.getVerticalAxisTitleText = function (index) {\n      index = Number(index);\n      return this._chartMeta[ChartConstants.VAXIS][index][ChartConstants.TITLE][ChartConstants.TEXT];\n    };\n\n    Chart.prototype.setVtitleFontSize = function (size, index) {\n      index = Number(index);\n      this._chartMeta[ChartConstants.VAXIS][index][ChartConstants.TITLE][ChartConstants.FONT_SIZE] = size;\n    };\n\n    Chart.prototype.getVtitleFontSize = function (index) {\n      index = Number(index);\n      return this._chartMeta[ChartConstants.VAXIS][index][ChartConstants.TITLE][ChartConstants.FONT_SIZE];\n    };\n\n    Chart.prototype.setVtitleFontColor = function (color, index) {\n      index = Number(index);\n      this._chartMeta[ChartConstants.VAXIS][index][ChartConstants.TITLE][ChartConstants.FONT_COLOR] = color;\n    };\n\n    Chart.prototype.getVtitleFontColor = function (index) {\n      index = Number(index);\n      return this._chartMeta[ChartConstants.VAXIS][index][ChartConstants.TITLE][ChartConstants.FONT_COLOR];\n    };\n\n    Chart.prototype.setVtitleFontStyle = function (fontStyle, index) {\n      index = Number(index);\n      this._chartMeta[ChartConstants.VAXIS][index][ChartConstants.TITLE][ChartConstants.FONT_STYLE] = fontStyle;\n    };\n\n    Chart.prototype.getVtitleFontStyle = function (index) {\n      index = Number(index);\n      return this._chartMeta[ChartConstants.VAXIS][index][ChartConstants.TITLE][ChartConstants.FONT_STYLE];\n    };\n\n    Chart.prototype.setVtitleFontWeight = function (fontWeight, index) {\n      index = Number(index);\n      this._chartMeta[ChartConstants.VAXIS][index][ChartConstants.TITLE][ChartConstants.FONT_WEIGHT] = fontWeight;\n    };\n\n    Chart.prototype.getVtitleFontWeight = function (index) {\n      index = Number(index);\n      return this._chartMeta[ChartConstants.VAXIS][index][ChartConstants.TITLE][ChartConstants.FONT_WEIGHT];\n    };\n\n    Chart.prototype.setVerticalAxisLabelsEnabled = function (isEnabled, index) {\n      index = Number(index);\n      this._chartMeta[ChartConstants.VAXIS][index][ChartConstants.LABELS][ChartConstants.ENABLED] = isEnabled;\n    };\n\n    Chart.prototype.getVerticalAxisLabelsEnabled = function (index) {\n      index = Number(index);\n      return this._chartMeta[ChartConstants.VAXIS][index][ChartConstants.LABELS][ChartConstants.ENABLED];\n    };\n\n    Chart.prototype.setVLabelsFontSize = function (size, index) {\n      index = Number(index);\n      this._chartMeta[ChartConstants.VAXIS][index][ChartConstants.LABELS][ChartConstants.FONT_SIZE] = size;\n    };\n\n    Chart.prototype.getVLabelsFontSize = function (index) {\n      index = Number(index);\n      return this._chartMeta[ChartConstants.VAXIS][index][ChartConstants.LABELS][ChartConstants.FONT_SIZE];\n    };\n\n    Chart.prototype.setVLabelsFontColor = function (color, index) {\n      index = Number(index);\n      this._chartMeta[ChartConstants.VAXIS][index][ChartConstants.LABELS][ChartConstants.FONT_COLOR] = color;\n    };\n\n    Chart.prototype.getVLabelsFontColor = function (index) {\n      index = Number(index);\n      return this._chartMeta[ChartConstants.VAXIS][index][ChartConstants.LABELS][ChartConstants.FONT_COLOR];\n    };\n\n    Chart.prototype.setVLabelsFontStyle = function (fontStyle, index) {\n      index = Number(index);\n      this._chartMeta[ChartConstants.VAXIS][index][ChartConstants.LABELS][ChartConstants.FONT_STYLE] = fontStyle;\n    };\n\n    Chart.prototype.getVLabelsFontStyle = function (index) {\n      index = Number(index);\n      return this._chartMeta[ChartConstants.VAXIS][index][ChartConstants.LABELS][ChartConstants.FONT_STYLE];\n    };\n\n    Chart.prototype.setVLabelsFontWeight = function (fontWeight, index) {\n      index = Number(index);\n      this._chartMeta[ChartConstants.VAXIS][index][ChartConstants.LABELS][ChartConstants.FONT_WEIGHT] = fontWeight;\n    };\n\n    Chart.prototype.getVLabelsFontWeight = function (index) {\n      index = Number(index);\n      return this._chartMeta[ChartConstants.VAXIS][index][ChartConstants.LABELS][ChartConstants.FONT_WEIGHT];\n    }; //stack labels\n\n\n    Chart.prototype.setVStackLabelsEnabled = function (isEnabled, index) {\n      index = Number(index);\n      this._chartMeta[ChartConstants.VAXIS][index][ChartConstants.STACK_LABELS][ChartConstants.ENABLED] = isEnabled;\n    };\n\n    Chart.prototype.getVStackLabelsEnabled = function (index) {\n      index = Number(index);\n      return this._chartMeta[ChartConstants.VAXIS][index][ChartConstants.STACK_LABELS][ChartConstants.ENABLED];\n    };\n\n    Chart.prototype.setVStackLabelsFontSize = function (size, index) {\n      index = Number(index);\n      this._chartMeta[ChartConstants.VAXIS][index][ChartConstants.STACK_LABELS][ChartConstants.FONT_SIZE] = size;\n    };\n\n    Chart.prototype.getVStackLabelsFontSize = function (index) {\n      index = Number(index);\n      return this._chartMeta[ChartConstants.VAXIS][index][ChartConstants.STACK_LABELS][ChartConstants.FONT_SIZE];\n    };\n\n    Chart.prototype.setVStackLabelsFontColor = function (color, index) {\n      index = Number(index);\n      this._chartMeta[ChartConstants.VAXIS][index][ChartConstants.STACK_LABELS][ChartConstants.FONT_COLOR] = color;\n    };\n\n    Chart.prototype.getVStackLabelsFontColor = function (index) {\n      index = Number(index);\n      return this._chartMeta[ChartConstants.VAXIS][index][ChartConstants.STACK_LABELS][ChartConstants.FONT_COLOR];\n    };\n\n    Chart.prototype.setVStackLabelsFontStyle = function (fontStyle, index) {\n      index = Number(index);\n      this._chartMeta[ChartConstants.VAXIS][index][ChartConstants.STACK_LABELS][ChartConstants.FONT_STYLE] = fontStyle;\n    };\n\n    Chart.prototype.getVStackLabelsFontStyle = function (index) {\n      index = Number(index);\n      return this._chartMeta[ChartConstants.VAXIS][index][ChartConstants.STACK_LABELS][ChartConstants.FONT_STYLE];\n    };\n\n    Chart.prototype.setVStackLabelsFontWeight = function (fontWeight, index) {\n      index = Number(index);\n      this._chartMeta[ChartConstants.VAXIS][index][ChartConstants.STACK_LABELS][ChartConstants.FONT_WEIGHT] = fontWeight;\n    };\n\n    Chart.prototype.getVStackLabelsFontWeight = function (index) {\n      index = Number(index);\n      return this._chartMeta[ChartConstants.VAXIS][index][ChartConstants.STACK_LABELS][ChartConstants.FONT_WEIGHT];\n    };\n\n    Chart.prototype.setVAxisType = function (type, index) {\n      index = Number(index);\n      this._chartMeta[ChartConstants.VAXIS][index][ChartConstants.SCALE_TYPE] = type;\n    };\n\n    Chart.prototype.getVAxisType = function (index) {\n      index = Number(index);\n      return this._chartMeta[ChartConstants.VAXIS][index][ChartConstants.SCALE_TYPE];\n    };\n\n    Chart.prototype.setVAxisPrefix = function (prefix, index) {\n      index = Number(index);\n      this._chartMeta[ChartConstants.VAXIS][index][ChartConstants.PREFIX] = prefix;\n    };\n\n    Chart.prototype.getVAxisPrefix = function (index) {\n      index = Number(index);\n      return this._chartMeta[ChartConstants.VAXIS][index][ChartConstants.PREFIX];\n    };\n\n    Chart.prototype.setVAxisSuffix = function (suffix, index) {\n      index = Number(index);\n      this._chartMeta[ChartConstants.VAXIS][index][ChartConstants.SUFFIX] = suffix;\n    };\n\n    Chart.prototype.getVAxisSuffix = function (index) {\n      index = Number(index);\n      return this._chartMeta[ChartConstants.VAXIS][index][ChartConstants.SUFFIX];\n    };\n\n    Chart.prototype.setVAxisMin = function (min, index) {\n      index = Number(index);\n      this._chartMeta[ChartConstants.VAXIS][index][ChartConstants.MIN] = min;\n    };\n\n    Chart.prototype.getVAxisMin = function (index) {\n      index = Number(index);\n      return this._chartMeta[ChartConstants.VAXIS][index][ChartConstants.MIN];\n    };\n\n    Chart.prototype.setVAxisMax = function (max, index) {\n      index = Number(index);\n      this._chartMeta[ChartConstants.VAXIS][index][ChartConstants.MAX] = max;\n    };\n\n    Chart.prototype.getVAxisMax = function (index) {\n      index = Number(index);\n      return this._chartMeta[ChartConstants.VAXIS][index][ChartConstants.MAX];\n    };\n\n    Chart.prototype.setVAxisInterval = function (interval, index) {\n      index = Number(index);\n      this._chartMeta[ChartConstants.VAXIS][index][ChartConstants.TICK_INTERVAL] = interval;\n    };\n\n    Chart.prototype.getVAxisInterval = function (index) {\n      index = Number(index);\n      return this._chartMeta[ChartConstants.VAXIS][index][ChartConstants.TICK_INTERVAL];\n    };\n\n    Chart.prototype.setVAxisBaseValue = function (baseValue, index) {\n      index = Number(index);\n      this._chartMeta[ChartConstants.VAXIS][index][ChartConstants.BASE_VALUE] = baseValue;\n    };\n\n    Chart.prototype.getVAxisBaseValue = function (index) {\n      index = Number(index);\n      return this._chartMeta[ChartConstants.VAXIS][index][ChartConstants.BASE_VALUE];\n    };\n\n    Chart.prototype.setVAxisPLValue = function (value, index, plIndex) {\n      index = Number(index);\n      this._chartMeta[ChartConstants.VAXIS][index][ChartConstants.PLOT_LINES][plIndex][ChartConstants.VALUE] = value;\n    };\n\n    Chart.prototype.getVAxisPLValue = function (index, plIndex) {\n      index = Number(index);\n      return this._chartMeta[ChartConstants.VAXIS][index][ChartConstants.PLOT_LINES][plIndex][ChartConstants.VALUE];\n    };\n\n    Chart.prototype.setVAxisPLText = function (text, index, plIndex) {\n      index = Number(index);\n      this._chartMeta[ChartConstants.VAXIS][index][ChartConstants.PLOT_LINES][plIndex][ChartConstants.TEXT] = text;\n    };\n\n    Chart.prototype.getVAxisPLText = function (index, plIndex) {\n      index = Number(index);\n      return this._chartMeta[ChartConstants.VAXIS][index][ChartConstants.PLOT_LINES][plIndex][ChartConstants.TEXT];\n    };\n\n    Chart.prototype.setVAxisPLFontWeight = function (weight, index, plIndex) {\n      index = Number(index);\n      this._chartMeta[ChartConstants.VAXIS][index][ChartConstants.PLOT_LINES][plIndex][ChartConstants.FONT_WEIGHT] = weight;\n    };\n\n    Chart.prototype.getVAxisPLFontWeight = function (index, plIndex) {\n      index = Number(index);\n      return this._chartMeta[ChartConstants.VAXIS][index][ChartConstants.PLOT_LINES][plIndex][ChartConstants.FONT_WEIGHT];\n    };\n\n    Chart.prototype.setVAxisPLFontStyle = function (style, index, plIndex) {\n      index = Number(index);\n      this._chartMeta[ChartConstants.VAXIS][index][ChartConstants.PLOT_LINES][plIndex][ChartConstants.FONT_STYLE] = style;\n    };\n\n    Chart.prototype.getVAxisPLFontStyle = function (index, plIndex) {\n      index = Number(index);\n      return this._chartMeta[ChartConstants.VAXIS][index][ChartConstants.PLOT_LINES][plIndex][ChartConstants.FONT_STYLE];\n    };\n\n    Chart.prototype.setVAxisPLFontSize = function (size, index, plIndex) {\n      index = Number(index);\n      this._chartMeta[ChartConstants.VAXIS][index][ChartConstants.PLOT_LINES][plIndex][ChartConstants.FONT_SIZE] = size;\n    };\n\n    Chart.prototype.getVAxisPLFontSize = function (index, plIndex) {\n      index = Number(index);\n      return this._chartMeta[ChartConstants.VAXIS][index][ChartConstants.PLOT_LINES][plIndex][ChartConstants.FONT_SIZE];\n    };\n\n    Chart.prototype.setVAxisPLFontColor = function (color, index, plIndex) {\n      index = Number(index);\n      this._chartMeta[ChartConstants.VAXIS][index][ChartConstants.PLOT_LINES][plIndex][ChartConstants.FONT_COLOR] = color;\n    };\n\n    Chart.prototype.getVAxisPLFontColor = function (index, plIndex) {\n      index = Number(index);\n      return this._chartMeta[ChartConstants.VAXIS][index][ChartConstants.PLOT_LINES][plIndex][ChartConstants.FONT_COLOR];\n    };\n\n    Chart.prototype.setVAxisPLColor = function (color, index, plIndex) {\n      index = Number(index);\n      this._chartMeta[ChartConstants.VAXIS][index][ChartConstants.PLOT_LINES][plIndex][ChartConstants.LINE_COLOR] = color;\n    };\n\n    Chart.prototype.getVAxisPLColor = function (index, plIndex) {\n      index = Number(index);\n      return this._chartMeta[ChartConstants.VAXIS][index][ChartConstants.PLOT_LINES][plIndex][ChartConstants.LINE_COLOR];\n    };\n\n    Chart.prototype.setVAxisPLType = function (type, index, plIndex) {\n      index = Number(index);\n      this._chartMeta[ChartConstants.VAXIS][index][ChartConstants.PLOT_LINES][plIndex][ChartConstants.LINE_TYPE] = type;\n    };\n\n    Chart.prototype.getVAxisPLType = function (index, plIndex) {\n      index = Number(index);\n      return this._chartMeta[ChartConstants.VAXIS][index][ChartConstants.PLOT_LINES][plIndex][ChartConstants.LINE_TYPE];\n    };\n\n    Chart.prototype.addVAxisPlotLine = function (index, plOptions) {\n      index = Number(index);\n      var plotLines = this._chartMeta[ChartConstants.VAXIS][index][ChartConstants.PLOT_LINES];\n      var plLen = plotLines.length;\n      plotLines[plLen] = ArraySkeletonConstructor.get(ChartKeyList.PLOT_LINES, this._chartMeta[ChartConstants.CHART][ChartConstants.TYPE]);\n      plOptions[ChartConstants.VALUE] && (plotLines[plLen][ChartConstants.VALUE] = plOptions[ChartConstants.VALUE]);\n\n      if (plOptions[ChartConstants.LABEL]) {\n        plOptions[ChartConstants.LABEL][ChartConstants.TEXT] && (plotLines[plLen][ChartConstants.LABEL][ChartConstants.TEXT] = plOptions[ChartConstants.LABEL][ChartConstants.TEXT]);\n        plOptions[ChartConstants.LABEL][ChartConstants.FONT_WEIGHT] && (plotLines[plLen][ChartConstants.LABEL][ChartConstants.FONT_WEIGHT] = plOptions[ChartConstants.LABEL][ChartConstants.FONT_WEIGHT]);\n        plOptions[ChartConstants.LABEL][ChartConstants.FONT_STYLE] && (plotLines[plLen][ChartConstants.LABEL][ChartConstants.FONT_STYLE] = plOptions[ChartConstants.LABEL][ChartConstants.FONT_STYLE]);\n        plOptions[ChartConstants.LABEL][ChartConstants.FONT_COLOR] && (plotLines[plLen][ChartConstants.LABEL][ChartConstants.FONT_COLOR] = plOptions[ChartConstants.LABEL][ChartConstants.FONT_COLOR]);\n        plOptions[ChartConstants.LABEL][ChartConstants.FONT_SIZE] && (plotLines[plLen][ChartConstants.LABEL][ChartConstants.FONT_SIZE] = plOptions[ChartConstants.LABEL][ChartConstants.FONT_SIZE]);\n      }\n\n      plOptions[ChartConstants.LINE_COLOR] && (plotLines[plLen][ChartConstants.LINE_COLOR] = plOptions[ChartConstants.LINE_COLOR]);\n      plOptions[ChartConstants.LINE_TYPE] && (plotLines[plLen][ChartConstants.LINE_TYPE] = plOptions[ChartConstants.LINE_TYPE]);\n      return plotLines[plLen];\n    };\n\n    Chart.prototype.removeVAxisPlotLine = function (vIndex, plIndex) {\n      var plotLines = this._chartMeta[ChartConstants.VAXIS][vIndex][ChartConstants.PLOT_LINES];\n      GeneralUtilities.removeArrayElement(plotLines, plIndex);\n    }; // H Axis GridLines - No getter need to add if needed\n\n\n    Chart.prototype.setHAxisMajorGLStatus = function (index, status) {\n      index = Number(index);\n      this._chartMeta[ChartConstants.HAXIS][index][ChartConstants.GRIDLINES][ChartConstants.MAJOR_GRIDLINE_ENABLED] = status;\n    };\n\n    Chart.prototype.setHAxisMajorGLCount = function (index, count) {\n      index = Number(index);\n      this._chartMeta[ChartConstants.HAXIS][index][ChartConstants.GRIDLINES][ChartConstants.MAJOR_GRIDLINE_COUNT] = count;\n    };\n\n    Chart.prototype.setHAxisMajorGLType = function (index, type) {\n      index = Number(index);\n      this._chartMeta[ChartConstants.HAXIS][index][ChartConstants.GRIDLINES][ChartConstants.MAJOR_GRIDLINE_LINE_TYPE] = type;\n    };\n\n    Chart.prototype.setHAxisMajorGLColor = function (index, color) {\n      index = Number(index);\n      this._chartMeta[ChartConstants.HAXIS][index][ChartConstants.GRIDLINES][ChartConstants.MAJOR_GRIDLINE_LINE_COLOR] = color;\n    };\n\n    Chart.prototype.setHAxisMinorGLStatus = function (index, status) {\n      index = Number(index);\n      this._chartMeta[ChartConstants.HAXIS][index][ChartConstants.GRIDLINES][ChartConstants.MINOR_GRIDLINE_ENABLED] = status;\n    };\n\n    Chart.prototype.setHAxisMinorGLType = function (index, type) {\n      index = Number(index);\n      this._chartMeta[ChartConstants.HAXIS][index][ChartConstants.GRIDLINES][ChartConstants.MINOR_GRIDLINE_LINE_TYPE] = type;\n    };\n\n    Chart.prototype.setHAxisMinorGLColor = function (index, color) {\n      index = Number(index);\n      this._chartMeta[ChartConstants.HAXIS][index][ChartConstants.GRIDLINES][ChartConstants.MINOR_GRIDLINE_LINE_COLOR] = color;\n    }; //V Axis GridLines\n\n\n    Chart.prototype.setVAxisMajorGLStatus = function (index, status) {\n      index = Number(index);\n      this._chartMeta[ChartConstants.VAXIS][index][ChartConstants.GRIDLINES][ChartConstants.MAJOR_GRIDLINE_ENABLED] = status;\n    };\n\n    Chart.prototype.setVAxisMajorGLCount = function (index, count) {\n      index = Number(index);\n      this._chartMeta[ChartConstants.VAXIS][index][ChartConstants.GRIDLINES][ChartConstants.MAJOR_GRIDLINE_COUNT] = count;\n    };\n\n    Chart.prototype.setVAxisMajorGLType = function (index, type) {\n      index = Number(index);\n      this._chartMeta[ChartConstants.VAXIS][index][ChartConstants.GRIDLINES][ChartConstants.MAJOR_GRIDLINE_LINE_TYPE] = type;\n    };\n\n    Chart.prototype.setVAxisMajorGLColor = function (index, color) {\n      index = Number(index);\n      this._chartMeta[ChartConstants.VAXIS][index][ChartConstants.GRIDLINES][ChartConstants.MAJOR_GRIDLINE_LINE_COLOR] = color;\n    };\n\n    Chart.prototype.setVAxisMinorGLStatus = function (index, status) {\n      index = Number(index);\n      this._chartMeta[ChartConstants.VAXIS][index][ChartConstants.GRIDLINES][ChartConstants.MINOR_GRIDLINE_ENABLED] = status;\n    };\n\n    Chart.prototype.setVAxisMinorGLType = function (index, type) {\n      index = Number(index);\n      this._chartMeta[ChartConstants.VAXIS][index][ChartConstants.GRIDLINES][ChartConstants.MINOR_GRIDLINE_LINE_TYPE] = type;\n    };\n\n    Chart.prototype.setVAxisMinorGLColor = function (index, color) {\n      index = Number(index);\n      this._chartMeta[ChartConstants.VAXIS][index][ChartConstants.GRIDLINES][ChartConstants.MINOR_GRIDLINE_LINE_COLOR] = color;\n    };\n\n    Chart.prototype.setMultipleYAxisStatus = function (status, customProperties) {\n      //Remove all yAxis except first one if status is false\n      if (!status) {\n        var yAxisLength = this._chartMeta[ChartConstants.VAXIS] ? this._chartMeta[ChartConstants.VAXIS].length : 0;\n\n        for (var i = 1; i < yAxisLength; i++) {\n          this._chartMeta[ChartConstants.VAXIS][i][ChartConstants.VISIBLE] = false;\n        }\n      } else {\n        var seriesLength = 0;\n\n        if (this._dataMeta && this._dataMeta[ChartConstants.SERIES_INFO] && this._dataMeta[ChartConstants.SERIES_INFO][ChartConstants.SERIES_INDICES]) {\n          seriesLength = this._dataMeta[ChartConstants.SERIES_INFO][ChartConstants.SERIES_INDICES].length;\n        }\n\n        for (var i = 1; i < seriesLength; i++) {\n          var newYAxis = ArraySkeletonConstructor.get(ChartKeyList.VAXIS);\n          newYAxis[C.VISIBLE] = true;\n          newYAxis[C.OPPOSITE] = true;\n\n          if (customProperties && customProperties[i]) {\n            var customProperty = customProperties[i];\n            customProperty && customProperty[C.LABELS] && customProperty[C.LABELS][C.ENABLED] != null && (newYAxis[C.LABELS][C.ENABLED] = customProperty[C.LABELS][C.ENABLED]);\n            customProperty && customProperty[C.TITLE] && customProperty[C.TITLE][C.TEXT] && (newYAxis[C.TITLE][C.TEXT] = customProperty[C.TITLE][C.TEXT]);\n            customProperty && customProperty[C.TITLE] && customProperty[C.TITLE][C.FONT_SIZE] && (newYAxis[C.TITLE][C.FONT_SIZE] = customProperty[C.TITLE][C.FONT_SIZE]);\n            customProperty && customProperty[C.TITLE] && customProperty[C.TITLE][C.FONT_COLOR] && (newYAxis[C.TITLE][C.FONT_COLOR] = customProperty[C.TITLE][C.FONT_COLOR]);\n            customProperty && customProperty[C.TITLE] && customProperty[C.TITLE][C.FONT_WEIGHT] && (newYAxis[C.TITLE][C.FONT_WEIGHT] = customProperty[C.TITLE][C.FONT_WEIGHT]);\n            customProperty && customProperty[C.TITLE] && customProperty[C.TITLE][C.FONT_STYLE] && (newYAxis[C.TITLE][C.FONT_STYLE] = customProperty[C.TITLE][C.FONT_STYLE]);\n            customProperty && customProperty[C.LABELS] && customProperty[C.LABELS][C.FONT_SIZE] && (newYAxis[C.LABELS][C.FONT_SIZE] = customProperty[C.LABELS][C.FONT_SIZE]);\n            customProperty && customProperty[C.LABELS] && customProperty[C.LABELS][C.FONT_COLOR] && (newYAxis[C.LABELS][C.FONT_COLOR] = customProperty[C.LABELS][C.FONT_COLOR]);\n            customProperty && customProperty[C.LABELS] && customProperty[C.LABELS][C.FONT_WEIGHT] && (newYAxis[C.LABELS][C.FONT_WEIGHT] = customProperty[C.LABELS][C.FONT_WEIGHT]);\n            customProperty && customProperty[C.LABELS] && customProperty[C.LABELS][C.FONT_STYLE] && (newYAxis[C.LABELS][C.FONT_STYLE] = customProperty[C.LABELS][C.FONT_STYLE]);\n            customProperty && customProperty[C.PREFIX] && (newYAxis[C.PREFIX] = customProperty[C.PREFIX]);\n            customProperty && customProperty[C.SUFFIX] && (newYAxis[C.SUFFIX] = customProperty[C.SUFFIX]);\n            customProperty && customProperty[C.MIN] && (newYAxis[C.MIN] = customProperty[C.MIN]);\n            customProperty && customProperty[C.MAX] && (newYAxis[C.MAX] = customProperty[C.MAX]);\n            customProperty && customProperty[C.VISIBLE] && (newYAxis[C.VISIBLE] = customProperty[C.VISIBLE]);\n            customProperty && customProperty[C.OPPOSITE] && (newYAxis[C.OPPOSITE] = customProperty[C.OPPOSITE]);\n            customProperty && customProperty[C.TICK_INTERVAL] && (newYAxis[C.TICK_INTERVAL] = customProperty[C.TICK_INTERVAL]);\n            customProperty && customProperty[C.SCALE_TYPE] && (newYAxis[C.SCALE_TYPE] = customProperty[C.SCALE_TYPE]);\n            customProperty && customProperty[C.BASE_VALUE] && (newYAxis[C.BASE_VALUE] = customProperty[C.BASE_VALUE]); //PlotLines\n\n            var plotLinesLength = customProperty[C.PLOT_LINES] ? customProperty[C.PLOT_LINES].length : 0;\n\n            for (var j = 0; j < plotLinesLength; j++) {\n              newYAxis[C.PLOT_LINES][j] = ArraySkeletonConstructor.get(ChartKeyList.PLOT_LINES, this.getChartType());\n              customProperty[C.PLOT_LINES][j] && customProperty[C.PLOT_LINES][j][C.VALUE] != null && (newYAxis[C.PLOT_LINES][j][C.VALUE] = customProperty[C.PLOT_LINES][j][C.VALUE]);\n              customProperty[C.PLOT_LINES][j] && customProperty[C.PLOT_LINES][j][C.LINE_COLOR] != null && (newYAxis[C.PLOT_LINES][j][C.LINE_COLOR] = customProperty[C.PLOT_LINES][j][C.LINE_COLOR]);\n              customProperty[C.PLOT_LINES][j] && customProperty[C.PLOT_LINES][j][C.LINE_TYPE] != null && (newYAxis[C.PLOT_LINES][j][C.LINE_TYPE] = customProperty[C.PLOT_LINES][j][C.LINE_TYPE]);\n              customProperty[C.PLOT_LINES][j] && customProperty[C.PLOT_LINES][j][C.LABEL] && customProperty[C.PLOT_LINES][j][C.LABEL][C.TEXT] != null && (newYAxis[C.PLOT_LINES][j][C.LABEL][C.TEXT] = customProperty[C.PLOT_LINES][j][C.LABEL][C.TEXT]);\n              customProperty[C.PLOT_LINES][j] && customProperty[C.PLOT_LINES][j][C.LABEL] && customProperty[C.PLOT_LINES][j][C.LABEL][C.FONT_SIZE] != null && (newYAxis[C.PLOT_LINES][j][C.LABEL][C.FONT_SIZE] = customProperty[C.PLOT_LINES][j][C.LABEL][C.FONT_SIZE]);\n              customProperty[C.PLOT_LINES][j] && customProperty[C.PLOT_LINES][j][C.LABEL] && customProperty[C.PLOT_LINES][j][C.LABEL][C.FONT_COLOR] != null && (newYAxis[C.PLOT_LINES][j][C.LABEL][C.FONT_COLOR] = customProperty[C.PLOT_LINES][j][C.LABEL][C.FONT_COLOR]);\n              customProperty[C.PLOT_LINES][j] && customProperty[C.PLOT_LINES][j][C.LABEL] && customProperty[C.PLOT_LINES][j][C.LABEL][C.FONT_WEIGHT] != null && (newYAxis[C.PLOT_LINES][j][C.LABEL][C.FONT_WEIGHT] = customProperty[C.PLOT_LINES][j][C.LABEL][C.FONT_WEIGHT]);\n              customProperty[C.PLOT_LINES][j] && customProperty[C.PLOT_LINES][j][C.LABEL] && customProperty[C.PLOT_LINES][j][C.LABEL][C.FONT_STYLE] != null && (newYAxis[C.PLOT_LINES][j][C.LABEL][C.FONT_STYLE] = customProperty[C.PLOT_LINES][j][C.LABEL][C.FONT_STYLE]);\n            } //Gridlines\n\n\n            customProperty[C.GRIDLINES] && customProperty[C.GRIDLINES][C.MAJOR_GRIDLINE_ENABLED] != null && (newYAxis[C.GRIDLINES][C.MAJOR_GRIDLINE_ENABLED] = customProperty[C.GRIDLINES][C.MAJOR_GRIDLINE_ENABLED]);\n            customProperty[C.GRIDLINES] && customProperty[C.GRIDLINES][C.MAJOR_GRIDLINE_COUNT] != null && (newYAxis[C.GRIDLINES][C.MAJOR_GRIDLINE_COUNT] = customProperty[C.GRIDLINES][C.MAJOR_GRIDLINE_COUNT]);\n            customProperty[C.GRIDLINES] && customProperty[C.GRIDLINES][C.MAJOR_GRIDLINE_LINE_TYPE] != null && (newYAxis[C.GRIDLINES][C.MAJOR_GRIDLINE_LINE_TYPE] = customProperty[C.GRIDLINES][C.MAJOR_GRIDLINE_LINE_TYPE]);\n            customProperty[C.GRIDLINES] && customProperty[C.GRIDLINES][C.MAJOR_GRIDLINE_LINE_COLOR] != null && (newYAxis[C.GRIDLINES][C.MAJOR_GRIDLINE_LINE_COLOR] = customProperty[C.GRIDLINES][C.MAJOR_GRIDLINE_LINE_COLOR]);\n            customProperty[C.GRIDLINES] && customProperty[C.GRIDLINES][C.MINOR_GRIDLINE_ENABLED] != null && (newYAxis[C.GRIDLINES][C.MINOR_GRIDLINE_ENABLED] = customProperty[C.GRIDLINES][C.MINOR_GRIDLINE_ENABLED]);\n            customProperty[C.GRIDLINES] && customProperty[C.GRIDLINES][C.MINOR_GRIDLINE_LINE_TYPE] != null && (newYAxis[C.GRIDLINES][C.MINOR_GRIDLINE_LINE_TYPE] = customProperty[C.GRIDLINES][C.MINOR_GRIDLINE_LINE_TYPE]);\n            customProperty[C.GRIDLINES] && customProperty[C.GRIDLINES][C.MINOR_GRIDLINE_LINE_COLOR] != null && (newYAxis[C.GRIDLINES][C.MINOR_GRIDLINE_LINE_COLOR] = customProperty[C.GRIDLINES][C.MINOR_GRIDLINE_LINE_COLOR]);\n          }\n\n          this._chartMeta[ChartConstants.VAXIS][i] = newYAxis;\n        }\n      }\n\n      return this._chartMeta[ChartConstants.VAXIS];\n    }; //Styles\n\n\n    Chart.prototype.setBackGroundColor = function (color) {\n      this._chartMeta[ChartConstants.CHART][ChartConstants.BACKGROUND_COLOR] = color;\n    };\n\n    Chart.prototype.getBackGroundColor = function () {\n      return this._chartMeta[ChartConstants.CHART][ChartConstants.BACKGROUND_COLOR];\n    };\n\n    Chart.prototype.setBorderColor = function (color) {\n      this._chartMeta[ChartConstants.CHART][ChartConstants.BORDER_COLOR] = color;\n    };\n\n    Chart.prototype.getBorderColor = function () {\n      return this._chartMeta[ChartConstants.CHART][ChartConstants.BORDER_COLOR];\n    };\n\n    Chart.prototype.setColorTheme = function (colors) {\n      this._chartMeta[ChartConstants.CHART][ChartConstants.COLORS] = colors;\n    };\n\n    Chart.prototype.getColorTheme = function () {\n      return this._chartMeta[ChartConstants.CHART][ChartConstants.COLORS];\n    };\n\n    Chart.prototype.setGradientStatus = function (isEnabled) {\n      this._chartMeta[ChartConstants.CHART][ChartConstants.GRADIENT][ChartConstants.ENABLED] = isEnabled;\n    };\n\n    Chart.prototype.getGradientStatus = function () {\n      return this._chartMeta[ChartConstants.CHART][ChartConstants.GRADIENT][ChartConstants.ENABLED];\n    }; //Series properties\n\n\n    Chart.prototype.setEnableCumulationStatus = function (index, status) {\n      this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] || (this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] = {});\n      this._chartMeta[ChartConstants.SERIES_PROPERTIES][index][ChartConstants.ENABLE_CUMULATION] = status;\n    };\n\n    Chart.prototype.setDecimalsValue = function (index, decimal) {\n      this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] || (this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] = {});\n      this._chartMeta[ChartConstants.SERIES_PROPERTIES][index][ChartConstants.DECIMALS] = decimal;\n    };\n\n    Chart.prototype.getDecimalsValue = function (index) {\n      this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] || (this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] = {});\n      return this._chartMeta[ChartConstants.SERIES_PROPERTIES][index][ChartConstants.DECIMALS];\n    };\n\n    Chart.prototype.setDataColor = function (color, seriesIndex, dataIndex) {\n      this._chartMeta[ChartConstants.SERIES_PROPERTIES][seriesIndex] || (this._chartMeta[ChartConstants.SERIES_PROPERTIES][seriesIndex] = {});\n      this._chartMeta[ChartConstants.SERIES_PROPERTIES][seriesIndex][ChartConstants.DATA_PROPERTIES] || (this._chartMeta[ChartConstants.SERIES_PROPERTIES][seriesIndex][ChartConstants.DATA_PROPERTIES] = []);\n      this._chartMeta[ChartConstants.SERIES_PROPERTIES][seriesIndex][ChartConstants.DATA_PROPERTIES][dataIndex] || (this._chartMeta[ChartConstants.SERIES_PROPERTIES][seriesIndex][ChartConstants.DATA_PROPERTIES][dataIndex] = {});\n      this._chartMeta[ChartConstants.SERIES_PROPERTIES][seriesIndex][ChartConstants.DATA_PROPERTIES][dataIndex][ChartConstants.DATA_COLOR] = color;\n    };\n\n    Chart.prototype.setDataBorderColor = function (color, seriesIndex, dataIndex) {\n      this._chartMeta[ChartConstants.SERIES_PROPERTIES][seriesIndex] || (this._chartMeta[ChartConstants.SERIES_PROPERTIES][seriesIndex] = {});\n      this._chartMeta[ChartConstants.SERIES_PROPERTIES][seriesIndex][ChartConstants.DATA_PROPERTIES] || (this._chartMeta[ChartConstants.SERIES_PROPERTIES][seriesIndex][ChartConstants.DATA_PROPERTIES] = []);\n      this._chartMeta[ChartConstants.SERIES_PROPERTIES][seriesIndex][ChartConstants.DATA_PROPERTIES][dataIndex] || (this._chartMeta[ChartConstants.SERIES_PROPERTIES][seriesIndex][ChartConstants.DATA_PROPERTIES][dataIndex] = {});\n      this._chartMeta[ChartConstants.SERIES_PROPERTIES][seriesIndex][ChartConstants.DATA_PROPERTIES][dataIndex][ChartConstants.BORDER_COLOR] = color;\n    };\n\n    Chart.prototype.setSeriesColor = function (index, color) {\n      this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] || (this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] = {});\n      this._chartMeta[ChartConstants.SERIES_PROPERTIES][index][ChartConstants.SERIES_COLORS] = color;\n    };\n\n    Chart.prototype.getSeriesColor = function (index) {\n      this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] || (this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] = {});\n      return this._chartMeta[ChartConstants.SERIES_PROPERTIES][index][ChartConstants.SERIES_COLORS];\n    };\n\n    Chart.prototype.setTargetColor = function (index, color) {\n      this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] || (this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] = {});\n      this._chartMeta[ChartConstants.SERIES_PROPERTIES][index][ChartConstants.TARGET_OPTIONS] || (this._chartMeta[ChartConstants.SERIES_PROPERTIES][index][ChartConstants.TARGET_OPTIONS] = {});\n      this._chartMeta[ChartConstants.SERIES_PROPERTIES][index][ChartConstants.TARGET_OPTIONS][ChartConstants.COLOR] = color;\n    };\n\n    Chart.prototype.getTargetColor = function (index) {\n      this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] || (this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] = {});\n      return this._chartMeta[ChartConstants.SERIES_PROPERTIES][index][ChartConstants.TARGET_OPTIONS][ChartConstants.COLOR];\n    };\n\n    Chart.prototype.setBorderColors = function (index, color) {\n      this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] || (this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] = {});\n      this._chartMeta[ChartConstants.SERIES_PROPERTIES][index][ChartConstants.BORDER_COLORS] = color;\n    };\n\n    Chart.prototype.getBorderColors = function (index) {\n      this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] || (this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] = {});\n      return this._chartMeta[ChartConstants.SERIES_PROPERTIES][index][ChartConstants.BORDER_COLORS];\n    };\n\n    Chart.prototype.setMarkerStatus = function (index, status) {\n      this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] || (this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] = {});\n      this._chartMeta[ChartConstants.SERIES_PROPERTIES][index][ChartConstants.MARKER_STATUS] = status;\n    };\n\n    Chart.prototype.getMarkerStatus = function (index) {\n      this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] || (this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] = {});\n      return this._chartMeta[ChartConstants.SERIES_PROPERTIES][index][ChartConstants.MARKER_STATUS];\n    };\n\n    Chart.prototype.setMarkerShape = function (index, shape) {\n      this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] || (this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] = {});\n      this._chartMeta[ChartConstants.SERIES_PROPERTIES][index][ChartConstants.MARKER_SHAPE] = shape;\n    };\n\n    Chart.prototype.getMarkerShape = function (index) {\n      this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] || (this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] = {});\n      return this._chartMeta[ChartConstants.SERIES_PROPERTIES][index][ChartConstants.MARKER_SHAPE];\n    };\n\n    Chart.prototype.setMarkerSize = function (index, size) {\n      this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] || (this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] = {});\n      this._chartMeta[ChartConstants.SERIES_PROPERTIES][index][ChartConstants.MARKER_SIZE] = size;\n    };\n\n    Chart.prototype.getMarkerSize = function (index) {\n      this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] || (this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] = {});\n      return this._chartMeta[ChartConstants.SERIES_PROPERTIES][index][ChartConstants.MARKER_SIZE];\n    };\n\n    Chart.prototype.setMarkerColor = function (index, color) {\n      this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] || (this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] = {});\n      this._chartMeta[ChartConstants.SERIES_PROPERTIES][index][ChartConstants.MARKER_COLOR] = color;\n    };\n\n    Chart.prototype.getMarkerColor = function (index) {\n      this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] || (this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] = {});\n      return this._chartMeta[ChartConstants.SERIES_PROPERTIES][index][ChartConstants.MARKER_COLOR];\n    };\n\n    Chart.prototype.setMarkerBorderColor = function (index, borderColor) {\n      this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] || (this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] = {});\n      this._chartMeta[ChartConstants.SERIES_PROPERTIES][index][ChartConstants.MARKER_BORDER_COLOR] = borderColor;\n    };\n\n    Chart.prototype.getMarkerBorderColor = function (index) {\n      this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] || (this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] = {});\n      return this._chartMeta[ChartConstants.SERIES_PROPERTIES][index][ChartConstants.MARKER_BORDER_COLOR];\n    };\n\n    Chart.prototype.setLineType = function (index, type) {\n      this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] || (this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] = {});\n      this._chartMeta[ChartConstants.SERIES_PROPERTIES][index][ChartConstants.LINE_TYPE] = type;\n    };\n\n    Chart.prototype.setAreaOpacity = function (index, areaOpacity) {\n      this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] || (this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] = {});\n      this._chartMeta[ChartConstants.SERIES_PROPERTIES][index][ChartConstants.AREA_OPACITY] = areaOpacity;\n    };\n\n    Chart.prototype.setThresholdValue = function (index, value) {\n      this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] || (this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] = {});\n      this._chartMeta[ChartConstants.SERIES_PROPERTIES][index][ChartConstants.THRESHOLD] = value;\n    };\n\n    Chart.prototype.setNegativeColor = function (index, color) {\n      this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] || (this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] = {});\n      this._chartMeta[ChartConstants.SERIES_PROPERTIES][index][ChartConstants.NEGATIVE_COLOR] = color;\n    };\n\n    Chart.prototype.setStartAngle = function (angle) {\n      //Only for pie charts\n      var seriesPropLen = this._chartMeta[ChartConstants.SERIES_PROPERTIES] ? this._chartMeta[ChartConstants.SERIES_PROPERTIES].length : 0;\n\n      for (var i = 0; i < seriesPropLen; i++) {\n        this._chartMeta[ChartConstants.SERIES_PROPERTIES][i][ChartConstants.START_ANGLE] = angle;\n      }\n    };\n\n    Chart.prototype.setSortingOrder = function (index, order) {\n      this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] || (this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] = {});\n      this._chartMeta[ChartConstants.SERIES_PROPERTIES][index][ChartConstants.SORT_ORDER] = order;\n    };\n\n    Chart.prototype.setDonutTotalDatalabelEnabled = function (isEnabled) {\n      this._chartMeta[ChartConstants.DONUT_TOTAL_DATALABELS][ChartConstants.ENABLED] = isEnabled;\n    };\n\n    Chart.prototype.getDonutTotalDatalabelEnabled = function () {\n      return this._chartMeta[ChartConstants.DONUT_TOTAL_DATALABELS][ChartConstants.ENABLED];\n    };\n\n    Chart.prototype.setDonutTotalDatalabelFontSize = function (size) {\n      this._chartMeta[ChartConstants.DONUT_TOTAL_DATALABELS][ChartConstants.FONT_SIZE] = size;\n    };\n\n    Chart.prototype.setDonutTotalDatalabelFontColor = function (color) {\n      this._chartMeta[ChartConstants.DONUT_TOTAL_DATALABELS][ChartConstants.FONT_COLOR] = color;\n    };\n\n    Chart.prototype.setDonutTotalDatalabelFontWeight = function (weight) {\n      this._chartMeta[ChartConstants.DONUT_TOTAL_DATALABELS][ChartConstants.FONT_WEIGHT] = weight;\n    };\n\n    Chart.prototype.setDonutTotalDatalabelFontStyle = function (style) {\n      this._chartMeta[ChartConstants.DONUT_TOTAL_DATALABELS][ChartConstants.FONT_STYLE] = style;\n    }; //Tooltip\n\n\n    Chart.prototype.setTooltipStatus = function (isEnabled) {\n      this._chartMeta[ChartConstants.TOOLTIP][ChartConstants.ENABLED] = isEnabled;\n    }; //Trendline\n\n\n    Chart.prototype.setTrendlineStatus = function (isEnabled, index) {\n      this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] || (this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] = {});\n      this._chartMeta[ChartConstants.SERIES_PROPERTIES][index][ChartConstants.TRENDLINE][ChartConstants.ENABLED] = isEnabled;\n    };\n\n    Chart.prototype.setTrendlineType = function (type, index) {\n      this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] || (this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] = {});\n      this._chartMeta[ChartConstants.SERIES_PROPERTIES][index][ChartConstants.TRENDLINE][ChartConstants.TYPE] = type;\n    };\n\n    Chart.prototype.setTrendlineOrder = function (order, index) {\n      this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] || (this._chartMeta[ChartConstants.SERIES_PROPERTIES][index] = {});\n      this._chartMeta[ChartConstants.SERIES_PROPERTIES][index][ChartConstants.TRENDLINE][ChartConstants.ORDER] = order;\n    };\n\n    Chart.prototype.setChartSize = function (width, height) {\n      this._chartMeta[ChartConstants.CHART][ChartConstants.WIDTH] = width;\n      this._chartMeta[ChartConstants.CHART][ChartConstants.HEIGHT] = height;\n    };\n    /*\n        Populate the object using the Given Chart Meta JSON\n    */\n\n\n    Chart.prototype.populateMeta = function (meta) {\n      ChartJSONConvertor.convert(this.getChartType(), this.getChartMetaJSON(), meta, ChartConstants.JSON);\n    };\n\n    Chart.prototype.preprocessData = function (dataMeta) {\n      DataMetaParser.parse(dataMeta, this.getChartMetaJSON());\n      return dataMeta; //No changes\n    };\n\n    Chart.prototype.getChartMetaJSON = function () {\n      return this._chartMeta;\n    };\n    /* Private Utilities */\n\n\n    function constructSkeleton(type) {\n      return ChartSkeletonConstructor.construct(type);\n    }\n\n    return Chart;\n  }();\n\n  ctx.Chart = Chart;\n})(window || this);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/DataHandler/ChartFrameworkChart.js\n");

/***/ }),

/***/ "./js/DataHandler/DataMetaParser.js":
/*!******************************************!*\
  !*** ./js/DataHandler/DataMetaParser.js ***!
  \******************************************/
/***/ (function() {

"use strict";
eval("/*$Id$*/\n //No I18N\n\n(function (ctx) {\n  var C = ctx.ChartConstants;\n  var KL = ctx.ChartKeyList;\n  var DEFAULTS = ctx.ChartDefaults.DEFAULTS;\n  var GUtils = ctx.GeneralUtilities;\n  var ArraySkeletonConstructor = ctx.ArraySkeletonConstructor;\n\n  var DataMetaParser = function () {\n    function checkHeader(headerData) {\n      if (!headerData) {\n        headerData = {};\n        headerData[C.HAS_HEADER] = false;\n      }\n\n      if (headerData[C.HAS_HEADER]) {\n        //data has header\n        var isValid = headerData[C.HEADERS] && Object.keys(headerData[C.HEADERS]).length >= 1;\n\n        if (!isValid) {\n          headerData[C.HEADERS] = {\n            0: {\n              type: DEFAULTS.DEFAULT_HEADER_TYPE\n            }\n          };\n        }\n      }\n    }\n\n    function headerCheck(parse, dataIndex, headerColumns, headerRows) {\n      var isAHeader = false;\n\n      if (parse.indexOf(C.PARSE_DIRECTION_VERTICAL) != -1) {\n        isAHeader = headerColumns[dataIndex] != undefined;\n      } else if (parse.indexOf(C.PARSE_DIRECTION_HORIZONTAL) != -1) {\n        isAHeader = headerRows[dataIndex] != undefined;\n      }\n\n      return isAHeader;\n    }\n\n    function addSeriesProperty(series, index, chartType) {\n      series[index] = ArraySkeletonConstructor.get(KL.SERIES_PROPERTIES, chartType);\n    }\n\n    function setRowHeader(series, headerRows) {\n      var rowKeys = Object.keys(headerRows);\n\n      if (rowKeys.length >= 1) {\n        series[C.ROW_HEADER_INDEX] = rowKeys[0];\n      }\n    }\n\n    function setColHeader(series, headerColumns) {\n      var colKeys = Object.keys(headerColumns);\n\n      if (colKeys.length >= 1) {\n        series[C.COL_HEADER_INDEX] = colKeys[0];\n      }\n    }\n\n    function autofillData(data, parse, headerColumns, headerRows, dataArrayInfo, dataKeys) {\n      for (var i = 0; i < dataKeys.length; i++) {\n        var dataIndex = dataKeys[i];\n        var dataInfo = dataArrayInfo[dataIndex];\n        var autoFill = dataInfo[C.AUTO_FILL];\n\n        if (autoFill) {\n          if (parse.indexOf(C.PARSE_DIRECTION_VERTICAL) != -1) {\n            var colIndex = i;\n\n            switch (autoFill) {\n              case C.INTERPOLATE:\n                var prev, next;\n                var indicesToBeInterpolated = [];\n\n                for (var j = 0; j < data.length; j++) {\n                  if (headerRows[j] == undefined) {\n                    if (data[j][colIndex] == undefined && prev != null) {\n                      indicesToBeInterpolated.push(j);\n                    } else {\n                      if (prev == undefined) {\n                        prev = data[j][colIndex];\n                      } else {\n                        var arrLen = indicesToBeInterpolated.length;\n\n                        if (arrLen != 0) {\n                          next = data[j][colIndex];\n                          var interval = next - prev;\n                          var plusFactor = interval / (arrLen + 1);\n\n                          for (var idx = 0; idx < arrLen; idx++) {\n                            var newValue = prev + plusFactor;\n                            data[indicesToBeInterpolated[idx]][colIndex] = newValue;\n                            prev = newValue;\n                          }\n\n                          prev = next;\n                          next = null;\n                          indicesToBeInterpolated = [];\n                        } else {\n                          prev = data[j][colIndex];\n                        }\n                      }\n                    }\n                  }\n                }\n\n                break;\n\n              case C.LAST_VALID:\n                var lastValid = 0;\n\n                for (var j = 0; j < data.length; j++) {\n                  if (headerRows[j] == undefined) {\n                    if (data[j][colIndex] == undefined) {\n                      data[j][colIndex] = lastValid;\n                    } else {\n                      lastValid = data[j][colIndex];\n                    }\n                  }\n                }\n\n                break;\n\n              case C.ZERO:\n                for (var j = 0; j < data.length; j++) {\n                  if (headerRows[j] == undefined) {\n                    if (data[j][colIndex] == undefined) {\n                      data[j][colIndex] = 0;\n                    }\n                  }\n                }\n\n                break;\n            }\n          } else if (parse.indexOf(C.PARSE_DIRECTION_HORIZONTAL) != -1) {\n            var rowIndex = i;\n            var dataLen = data[0] ? data[0].length : 0;\n\n            switch (autoFill) {\n              case C.INTERPOLATE:\n                var prev, next;\n                var indicesToBeInterpolated = [];\n\n                for (var j = 0; j < dataLen; j++) {\n                  if (headerColumns[j] == undefined) {\n                    if (data[rowIndex][j] == undefined && prev != null) {\n                      indicesToBeInterpolated.push(j);\n                    } else {\n                      if (prev == undefined) {\n                        prev = data[rowIndex][j];\n                      } else {\n                        var arrLen = indicesToBeInterpolated.length;\n\n                        if (arrLen != 0) {\n                          next = data[rowIndex][j];\n                          var interval = next - prev;\n                          var plusFactor = interval / (arrLen + 1);\n\n                          for (var idx = 0; idx < arrLen; idx++) {\n                            var newValue = prev + plusFactor;\n                            data[rowIndex][indicesToBeInterpolated[idx]] = newValue;\n                            prev = newValue;\n                          }\n\n                          prev = next;\n                          next = null;\n                          indicesToBeInterpolated = [];\n                        } else {\n                          prev = data[rowIndex][j];\n                        }\n                      }\n                    }\n                  }\n                }\n\n                break;\n\n              case C.LAST_VALID:\n                var lastValid = 0;\n\n                for (var j = 0; j < dataLen; j++) {\n                  if (headerColumns[j] == undefined) {\n                    if (data[rowIndex][j] == undefined) {\n                      data[rowIndex][j] = lastValid;\n                    } else {\n                      lastValid = data[rowIndex][j];\n                    }\n                  }\n                }\n\n                break;\n\n              case C.ZERO:\n                for (var j = 0; j < dataLen; j++) {\n                  if (headerColumns[j] == undefined) {\n                    if (data[rowIndex][j] == undefined) {\n                      data[rowIndex][j] = 0;\n                    }\n                  }\n                }\n\n                break;\n            }\n          }\n        }\n      }\n    }\n\n    function setSeriesColor(seriesProperties, colors, chartType) {\n      var shades = [1, 0.9, 1.1];\n      var shadesIdx = 0;\n      var colorsLen = colors.length;\n      var shadesLen = shades.length;\n\n      for (var i = 0; i < seriesProperties.length;) {\n        var color = GUtils.getDiffShadeWithAlpha(colors[i % colorsLen], shades[shadesIdx]);\n        seriesProperties[i][C.SERIES_COLOR] = color;\n        i++;\n\n        if (i % colorsLen == 0) {\n          shadesIdx++;\n          shadesIdx = shadesIdx % shadesLen;\n        }\n      }\n    }\n\n    function constructSeriesProperties(dataKeys, dataArrayInfo, parse, headerColumns, headerRows, chartMeta, seriesLimit, chartType) {\n      var seriesIndex = 0;\n      var isInvalidData = false;\n      var isAHeader = false;\n\n      for (var i = 0; i < dataKeys.length; i++) {\n        var dataIndex = dataKeys[i];\n        var dataInfo = dataArrayInfo[dataIndex];\n        isInvalidData = dataInfo[C.DATA_TYPE].indexOf(C.STRING) != -1;\n        isAHeader = headerCheck(parse, dataIndex, headerColumns, headerRows);\n\n        if (!isAHeader && !isInvalidData) {\n          //Add A new entry to series properties\n          chartMeta[C.SERIES_PROPERTIES][seriesIndex] == undefined && addSeriesProperty(chartMeta[C.SERIES_PROPERTIES], seriesIndex, chartType);\n          chartMeta[C.SERIES_PROPERTIES][seriesIndex][C.DATA_INDEX] == undefined && (chartMeta[C.SERIES_PROPERTIES][seriesIndex][C.DATA_INDEX] = dataIndex);\n          chartMeta[C.SERIES_PROPERTIES][seriesIndex][C.ROW_HEADER_INDEX] == undefined && setRowHeader(chartMeta[C.SERIES_PROPERTIES][seriesIndex], headerRows);\n          chartMeta[C.SERIES_PROPERTIES][seriesIndex][C.COL_HEADER_INDEX] == undefined && setColHeader(chartMeta[C.SERIES_PROPERTIES][seriesIndex], headerColumns);\n          chartMeta[C.SERIES_PROPERTIES][seriesIndex][C.TYPE] == undefined && (chartMeta[C.SERIES_PROPERTIES][seriesIndex][C.TYPE] = chartType);\n          seriesIndex++;\n\n          if (seriesLimit != undefined && seriesIndex >= seriesLimit) {\n            break;\n          }\n        }\n      }\n    }\n\n    function constructBulletSeriesProperties(dataKeys, dataArrayInfo, parse, headerColumns, headerRows, chartMeta, seriesLimit, chartType) {\n      var seriesIndex = 0;\n      var isInvalidData = false;\n      var isAHeader = false;\n      var isBulletSeriesConstructed = false;\n\n      for (var i = dataKeys.length - 1; i >= 0; i--) {\n        var dataIndex = dataKeys[i];\n        var dataInfo = dataArrayInfo[dataIndex];\n        isInvalidData = dataInfo[C.DATA_TYPE].indexOf(C.STRING) != -1;\n        isAHeader = headerCheck(parse, dataIndex, headerColumns, headerRows);\n\n        if (!isAHeader && !isInvalidData) {\n          //Add A new entry to series properties\n          chartMeta[C.SERIES_PROPERTIES][seriesIndex] == undefined && addSeriesProperty(chartMeta[C.SERIES_PROPERTIES], seriesIndex, chartType);\n          chartMeta[C.SERIES_PROPERTIES][seriesIndex][C.ROW_HEADER_INDEX] == undefined && setRowHeader(chartMeta[C.SERIES_PROPERTIES][seriesIndex], headerRows);\n          chartMeta[C.SERIES_PROPERTIES][seriesIndex][C.COL_HEADER_INDEX] == undefined && setColHeader(chartMeta[C.SERIES_PROPERTIES][seriesIndex], headerColumns);\n\n          if (!isBulletSeriesConstructed) {\n            chartMeta[C.SERIES_PROPERTIES][seriesIndex][C.TYPE] == undefined && (chartMeta[C.SERIES_PROPERTIES][seriesIndex][C.TYPE] = chartType);\n            chartMeta[C.SERIES_PROPERTIES][seriesIndex][C.TARGET_INDEX] == undefined && (chartMeta[C.SERIES_PROPERTIES][seriesIndex][C.TARGET_INDEX] = i);\n            chartMeta[C.SERIES_PROPERTIES][seriesIndex][C.ACTUAL_INDEX] == undefined && i - 1 >= 0 && (chartMeta[C.SERIES_PROPERTIES][seriesIndex][C.ACTUAL_INDEX] = i - 1);\n            isBulletSeriesConstructed = true;\n            i--;\n          } else {\n            //Construct Column Series For Plot Bands\n            var cType = chartType.indexOf(C.BULLET_COL) != -1 ? C.COL : chartType.indexOf(C.BULLET_BAR) != -1 ? C.BAR : C.COL;\n            chartMeta[C.SERIES_PROPERTIES][seriesIndex][C.DATA_INDEX] == undefined && (chartMeta[C.SERIES_PROPERTIES][seriesIndex][C.DATA_INDEX] = i);\n            chartMeta[C.SERIES_PROPERTIES][seriesIndex][C.TYPE] == undefined && (chartMeta[C.SERIES_PROPERTIES][seriesIndex][C.TYPE] = cType);\n          }\n\n          seriesIndex++;\n\n          if (seriesLimit != undefined && seriesIndex >= seriesLimit) {\n            break;\n          }\n        }\n      }\n\n      chartMeta[C.SERIES_PROPERTIES].reverse();\n    }\n\n    function constructWordCloudSeriesProperties(dataKeys, dataArrayInfo, parse, headerColumns, headerRows, chartMeta, seriesLimit, chartType) {\n      var seriesIndex = 0;\n      var idx = 0;\n      chartMeta[C.SERIES_PROPERTIES][seriesIndex] == undefined && addSeriesProperty(chartMeta[C.SERIES_PROPERTIES], seriesIndex, chartType);\n      chartMeta[C.SERIES_PROPERTIES][seriesIndex][C.TYPE] == undefined && (chartMeta[C.SERIES_PROPERTIES][seriesIndex][C.TYPE] = chartType);\n      chartMeta[C.SERIES_PROPERTIES][seriesIndex][C.ROW_HEADER_INDEX] == undefined && setRowHeader(chartMeta[C.SERIES_PROPERTIES][seriesIndex], headerRows);\n      chartMeta[C.SERIES_PROPERTIES][seriesIndex][C.COL_HEADER_INDEX] == undefined && setColHeader(chartMeta[C.SERIES_PROPERTIES][seriesIndex], headerColumns);\n      chartMeta[C.SERIES_PROPERTIES][seriesIndex][C.WORDCLOUD_INDICES] = [];\n\n      for (var i = 0; i < dataKeys.length; i++) {\n        var dataIndex = dataKeys[i];\n        chartMeta[C.SERIES_PROPERTIES][seriesIndex][C.WORDCLOUD_INDICES][idx] = dataIndex;\n        idx++;\n      }\n    }\n\n    function constructHistogramSeriesProperties(dataKeys, dataArrayInfo, parse, headerColumns, headerRows, chartMeta, seriesLimit, chartType) {\n      var seriesIndex = 0;\n      var isInvalidData = false;\n      var isAHeader = false;\n      var idx = 0;\n      chartMeta[C.SERIES_PROPERTIES][seriesIndex] == undefined && addSeriesProperty(chartMeta[C.SERIES_PROPERTIES], seriesIndex, chartType);\n      chartMeta[C.SERIES_PROPERTIES][seriesIndex][C.ROW_HEADER_INDEX] == undefined && setRowHeader(chartMeta[C.SERIES_PROPERTIES][seriesIndex], headerRows);\n      chartMeta[C.SERIES_PROPERTIES][seriesIndex][C.COL_HEADER_INDEX] == undefined && setColHeader(chartMeta[C.SERIES_PROPERTIES][seriesIndex], headerColumns);\n      chartMeta[C.SERIES_PROPERTIES][seriesIndex][C.TYPE] == undefined && (chartMeta[C.SERIES_PROPERTIES][seriesIndex][C.TYPE] = chartType);\n      chartMeta[C.SERIES_PROPERTIES][seriesIndex][C.HISTOGRAM_INDICES] == undefined && (chartMeta[C.SERIES_PROPERTIES][seriesIndex][C.HISTOGRAM_INDICES] = []);\n\n      for (var i = 0; i < dataKeys.length; i++) {\n        var dataIndex = dataKeys[i];\n        var dataInfo = dataArrayInfo[dataIndex];\n        isInvalidData = dataInfo[C.DATA_TYPE].indexOf(C.STRING) != -1;\n        isAHeader = headerCheck(parse, dataIndex, headerColumns, headerRows);\n\n        if (!isAHeader && !isInvalidData) {\n          //Add all valid histogram series indices\n          chartMeta[C.SERIES_PROPERTIES][seriesIndex][C.HISTOGRAM_INDICES][idx] = dataIndex;\n          idx++;\n        }\n      }\n    }\n\n    function constructRaceChartSeriesProperties(dataKeys, dataArrayInfo, parse, headerColumns, headerRows, chartMeta, seriesLimit, chartType) {\n      var seriesIndex = 0;\n      var isInvalidData = false;\n      var isAHeader = false;\n      var idx = 0;\n      chartMeta[C.SERIES_PROPERTIES][seriesIndex] == undefined && addSeriesProperty(chartMeta[C.SERIES_PROPERTIES], seriesIndex, chartType);\n      chartMeta[C.SERIES_PROPERTIES][seriesIndex][C.ROW_HEADER_INDEX] == undefined && setRowHeader(chartMeta[C.SERIES_PROPERTIES][seriesIndex], headerRows);\n      chartMeta[C.SERIES_PROPERTIES][seriesIndex][C.COL_HEADER_INDEX] == undefined && setColHeader(chartMeta[C.SERIES_PROPERTIES][seriesIndex], headerColumns);\n      chartMeta[C.SERIES_PROPERTIES][seriesIndex][C.TYPE] == undefined && (chartMeta[C.SERIES_PROPERTIES][seriesIndex][C.TYPE] = chartType);\n      chartMeta[C.SERIES_PROPERTIES][seriesIndex][C.RACE_CHART_INDICES] == undefined && (chartMeta[C.SERIES_PROPERTIES][seriesIndex][C.RACE_CHART_INDICES] = []);\n\n      for (var i = 0; i < dataKeys.length; i++) {\n        var dataIndex = dataKeys[i];\n        var dataInfo = dataArrayInfo[dataIndex];\n        isInvalidData = dataInfo[C.DATA_TYPE].indexOf(C.STRING) != -1;\n        isAHeader = headerCheck(parse, dataIndex, headerColumns, headerRows);\n\n        if (!isAHeader && !isInvalidData) {\n          //Add all valid histogram series indices\n          chartMeta[C.SERIES_PROPERTIES][seriesIndex][C.RACE_CHART_INDICES][idx] = dataIndex;\n          idx++;\n        }\n      }\n    }\n\n    function constructBubbleSeriesProperties(dataKeys, dataArrayInfo, parse, headerColumns, headerRows, chartMeta, seriesLimit, chartType) {\n      var seriesIndex = 0;\n      var isInvalidData = false;\n      var isAHeader = false;\n      var subGroupIndex = 0;\n      var subGroup = [];\n\n      for (var i = 0; i < dataKeys.length; i++) {\n        var dataIndex = dataKeys[i];\n        var dataInfo = dataArrayInfo[dataIndex];\n        isInvalidData = dataInfo[C.DATA_TYPE].indexOf(C.STRING) != -1;\n        isAHeader = headerCheck(parse, dataIndex, headerColumns, headerRows);\n\n        if (!isAHeader && !isInvalidData) {\n          //Add A new entry to series properties                    \n          if (subGroupIndex == 0) {\n            subGroup = [];\n          }\n\n          subGroup.push(i);\n          subGroupIndex++;\n\n          if (subGroupIndex == 3) {\n            chartMeta[C.SERIES_PROPERTIES][seriesIndex] == undefined && addSeriesProperty(chartMeta[C.SERIES_PROPERTIES], seriesIndex, chartType);\n            chartMeta[C.SERIES_PROPERTIES][seriesIndex][C.ROW_HEADER_INDEX] == undefined && setRowHeader(chartMeta[C.SERIES_PROPERTIES][seriesIndex], headerRows);\n            chartMeta[C.SERIES_PROPERTIES][seriesIndex][C.COL_HEADER_INDEX] == undefined && setColHeader(chartMeta[C.SERIES_PROPERTIES][seriesIndex], headerColumns);\n            chartMeta[C.SERIES_PROPERTIES][seriesIndex][C.TYPE] == undefined && (chartMeta[C.SERIES_PROPERTIES][seriesIndex][C.TYPE] = chartType);\n            chartMeta[C.SERIES_PROPERTIES][seriesIndex][C.BUBBLE_GROUP] = subGroup;\n            seriesIndex++;\n            subGroupIndex = 0;\n          }\n\n          if (seriesLimit != undefined && seriesIndex >= seriesLimit) {\n            break;\n          }\n        }\n      }\n    }\n\n    function getSeriesLimit(chartType) {\n      var seriesLmit = undefined;\n\n      if (GUtils.isPieType(chartType)) {\n        seriesLmit = DEFAULTS.PIE_SERIES_LIMIT;\n      } else if (GUtils.isDonutType(chartType)) {\n        seriesLmit = DEFAULTS.DONUT_SERIES_LIMIT;\n      } else if (GUtils.isFunnelSeries(chartType)) {\n        seriesLmit = DEFAULTS.FUNNEL_SERIES_LIMIT;\n      }\n\n      return seriesLmit;\n    }\n\n    function constructSeries(dataKeys, dataArrayInfo, parse, headerColumns, headerRows, chartMeta, seriesLimit, chartType) {\n      if (chartType.indexOf(C.BUBBLE) != -1) {\n        constructBubbleSeriesProperties(dataKeys, dataArrayInfo, parse, headerColumns, headerRows, chartMeta, seriesLimit, chartType);\n      } else if (chartType.indexOf(C.WORDCLOUD) != -1) {\n        constructWordCloudSeriesProperties(dataKeys, dataArrayInfo, parse, headerColumns, headerRows, chartMeta, seriesLimit, chartType);\n      } else if (GUtils.isBulletSeries(chartType)) {\n        constructBulletSeriesProperties(dataKeys, dataArrayInfo, parse, headerColumns, headerRows, chartMeta, seriesLimit, chartType);\n      } else if (chartType.indexOf(C.HISTOGRAM) != -1) {\n        constructHistogramSeriesProperties(dataKeys, dataArrayInfo, parse, headerColumns, headerRows, chartMeta, seriesLimit, chartType);\n      } else if (chartType.indexOf(C.RACEBAR) != -1) {\n        constructRaceChartSeriesProperties(dataKeys, dataArrayInfo, parse, headerColumns, headerRows, chartMeta, seriesLimit, chartType);\n      } else {\n        constructSeriesProperties(dataKeys, dataArrayInfo, parse, headerColumns, headerRows, chartMeta, seriesLimit, chartType);\n      }\n    }\n\n    function checkDataArrayInfo(dataMeta, chartMeta) {\n      /**\n       * Rules for Data \n       * 1) Should not be a string \n       * 2) Should not be a header\n       */\n      var chartType = chartMeta[C.CHART][C.TYPE];\n      var data = dataMeta[C.DATA];\n      var parse = dataMeta[C.PARSE_DIRECTION];\n      var headerColumns = dataMeta[C.HEADER_COLUMNS][C.HEADERS] ? dataMeta[C.HEADER_COLUMNS][C.HEADERS] : {};\n      var headerRows = dataMeta[C.HEADER_ROWS][C.HEADERS] ? dataMeta[C.HEADER_ROWS][C.HEADERS] : {};\n      var dataArrayInfo = dataMeta[C.DATA_ARRAY_INFO];\n      var dataKeys = Object.keys(dataArrayInfo);\n      var seriesLimit = getSeriesLimit(chartType);\n      autofillData(data, parse, headerColumns, headerRows, dataArrayInfo, dataKeys);\n      constructSeries(dataKeys, dataArrayInfo, parse, headerColumns, headerRows, chartMeta, seriesLimit, chartType); //setSeriesColor(chartMeta[C.SERIES_PROPERTIES], chartMeta[C.CHART][C.COLORS], chartType);//Set series color\n    }\n\n    function parseMeta(dataMeta, chartMeta) {\n      /**\n       * If header col / row is true - check if the data has atleast one header col/row, if not take first col/row as header\n       * Check Data Array Info and Find the number of series need to be plotted\n       */\n      var headerColumns = dataMeta[C.HEADER_COLUMNS];\n      var headerRows = dataMeta[C.HEADER_ROWS];\n      checkHeader(headerColumns);\n      checkHeader(headerRows);\n      checkDataArrayInfo(dataMeta, chartMeta);\n    }\n\n    return {\n      parse: parseMeta\n    };\n  }();\n\n  ctx.DataMetaParser = DataMetaParser;\n})(window || this);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/DataHandler/DataMetaParser.js\n");

/***/ }),

/***/ "./js/MultiFramework/ChartFramework.js":
/*!*********************************************!*\
  !*** ./js/MultiFramework/ChartFramework.js ***!
  \*********************************************/
/***/ (function() {

"use strict";
eval("/*$Id$*/\n //No I18N\n\n(function (ctx) {\n  var ChartMaps = ctx.ChartMaps;\n  var chartTypeToFramework = ChartMaps.chartTypeToFramework;\n  var ChartConstants = ctx.ChartConstants;\n  var FILE_LOADER = ctx.FILE_LOADER;\n\n  var Framework = function () {\n    function Framework(type, frameWork) {\n      this.type = type;\n      var framework = frameWork ? frameWork : chartTypeToFramework[type];\n      this.framework = framework;\n      this.frameworkInstance = createInstance(framework, type);\n    }\n\n    Framework.prototype.createChart = function (chartJSON, dataJSON) {\n      var self = this;\n      var promise = loadAsync(this.framework);\n      promise.then(function (res) {\n        self.frameworkInstance.createChart(chartJSON, dataJSON);\n      });\n    };\n\n    Framework.prototype.update = function (json) {\n      this.frameworkInstance.update(json);\n    };\n\n    Framework.prototype.updateChartType = function (type) {\n      this.type = type;\n      this.frameworkInstance && this.frameworkInstance.updateChartType(type);\n    };\n\n    Framework.prototype.updateAnimationDuration = function (duration) {\n      this.frameworkInstance.updateAnimationDuration(duration);\n    };\n\n    Framework.prototype.updateInvertedStatus = function (status) {\n      this.frameworkInstance.updateInvertedStatus(status);\n    };\n\n    Framework.prototype.updateChartFontFamily = function (fontFamily) {\n      this.frameworkInstance.updateChartFontFamily(fontFamily);\n    };\n\n    Framework.prototype.updateCaptionStatus = function (status) {\n      this.frameworkInstance.updateCaptionStatus(status);\n    };\n\n    Framework.prototype.updateCaptionFontSize = function (size) {\n      this.frameworkInstance.updateCaptionFontSize(size);\n    };\n\n    Framework.prototype.updateCaptionFontColor = function (color) {\n      this.frameworkInstance.updateCaptionFontColor(color);\n    };\n\n    Framework.prototype.updateCaptionFontWeight = function (fontWeight) {\n      this.frameworkInstance.updateCaptionFontWeight(fontWeight);\n    };\n\n    Framework.prototype.updateCaptionFontStyle = function (fontStyle) {\n      this.frameworkInstance.updateCaptionFontStyle(fontStyle);\n    };\n\n    Framework.prototype.updateTitle = function (title) {\n      this.frameworkInstance.updateTitle(title);\n    };\n\n    Framework.prototype.updateTitleFontSize = function (size) {\n      this.frameworkInstance.updateTitleFontSize(size);\n    };\n\n    Framework.prototype.updateTitleFontColor = function (color) {\n      this.frameworkInstance.updateTitleFontColor(color);\n    };\n\n    Framework.prototype.updateTitleFontWeight = function (fontWeight) {\n      this.frameworkInstance.updateTitleFontWeight(fontWeight);\n    };\n\n    Framework.prototype.updateTitleFontStyle = function (fontStyle) {\n      this.frameworkInstance.updateTitleFontStyle(fontStyle);\n    };\n\n    Framework.prototype.updateSubTitle = function (subtitle) {\n      this.frameworkInstance.updateSubTitle(subtitle);\n    };\n\n    Framework.prototype.updateSubtitleFontSize = function (size) {\n      this.frameworkInstance.updateSubtitleFontSize(size);\n    };\n\n    Framework.prototype.updateSubtitleFontColor = function (color) {\n      this.frameworkInstance.updateSubtitleFontColor(color);\n    };\n\n    Framework.prototype.updateSubtitleFontWeight = function (fontWeight) {\n      this.frameworkInstance.updateSubtitleFontWeight(fontWeight);\n    };\n\n    Framework.prototype.updateSubtitleFontStyle = function (fontStyle) {\n      this.frameworkInstance.updateSubtitleFontStyle(fontStyle);\n    }; //Legend\n\n\n    Framework.prototype.updateLegend = function (legendOptions) {\n      this.frameworkInstance.updateLegend(legendOptions);\n    };\n\n    Framework.prototype.updateLegendStatus = function (isEnabled) {\n      this.frameworkInstance.updateLegendStatus(isEnabled);\n    };\n\n    Framework.prototype.updateLegendFontSize = function (size) {\n      this.frameworkInstance.updateLegendFontSize(size);\n    };\n\n    Framework.prototype.updateLegendFontColor = function (color) {\n      this.frameworkInstance.updateLegendFontColor(color);\n    };\n\n    Framework.prototype.updateLegendFontWeight = function (fontWeight) {\n      this.frameworkInstance.updateLegendFontWeight(fontWeight);\n    };\n\n    Framework.prototype.updateLegendFontStyle = function (fontStyle) {\n      this.frameworkInstance.updateLegendFontStyle(fontStyle);\n    }; //Datalabels\n\n\n    Framework.prototype.updateDatalabelEnabled = function (isEnabled, index) {\n      this.frameworkInstance.updateDatalabelEnabled(isEnabled, index);\n    };\n\n    Framework.prototype.updateDatalabelFontSize = function (size, index) {\n      this.frameworkInstance.updateDatalabelFontSize(size, index);\n    };\n\n    Framework.prototype.updateDatalabelFontColor = function (color, index) {\n      this.frameworkInstance.updateDatalabelFontColor(color, index);\n    };\n\n    Framework.prototype.updateDatalabelFontWeight = function (weight, index) {\n      this.frameworkInstance.updateDatalabelFontWeight(weight, index);\n    };\n\n    Framework.prototype.updateDatalabelFontStyle = function (style, index) {\n      this.frameworkInstance.updateDatalabelFontStyle(style, index);\n    };\n\n    Framework.prototype.updateDatalabelPosition = function (position, index) {\n      this.frameworkInstance.updateDatalabelPosition(position, index);\n    };\n\n    Framework.prototype.updateDatalabelFormat = function (format, index) {\n      this.frameworkInstance.updateDatalabelFormat(format, index);\n    }; //H Axis\n\n\n    Framework.prototype.updateHAxisLabelsEnbaled = function (isEnabled, index) {\n      this.frameworkInstance.updateHAxisLabelsEnbaled(isEnabled, index);\n    };\n\n    Framework.prototype.updateHLabelsFontSize = function (size, index) {\n      this.frameworkInstance.updateHLabelsFontSize(size, index);\n    };\n\n    Framework.prototype.updateHLabelsFontColor = function (color, index) {\n      this.frameworkInstance.updateHLabelsFontColor(color, index);\n    };\n\n    Framework.prototype.updateHLabelsFontWeight = function (fontWeight, index) {\n      this.frameworkInstance.updateHLabelsFontWeight(fontWeight, index);\n    };\n\n    Framework.prototype.updateHLabelsFontStyle = function (fontStyle, index) {\n      this.frameworkInstance.updateHLabelsFontStyle(fontStyle, index);\n    };\n\n    Framework.prototype.updateHLabelsSLCount = function (count, index) {\n      this.frameworkInstance.updateHLabelsSLCount(count, index);\n    };\n\n    Framework.prototype.updateHLabelsRotation = function (angle, index) {\n      this.frameworkInstance.updateHLabelsRotation(angle, index);\n    };\n\n    Framework.prototype.updateHAxisReversedValue = function (status, index) {\n      this.frameworkInstance.updateHAxisReversedValue(status, index);\n    };\n\n    Framework.prototype.updateMinValue = function (min, index) {\n      this.frameworkInstance.updateMinValue(min, index);\n    };\n\n    Framework.prototype.updateMaxValue = function (max, index) {\n      this.frameworkInstance.updateMaxValue(max, index);\n    };\n\n    Framework.prototype.updateHAxisTitle = function (hTitle, index) {\n      this.frameworkInstance.updateHAxisTitle(hTitle, index);\n    };\n\n    Framework.prototype.updateHtitleFontSize = function (size, index) {\n      this.frameworkInstance.updateHtitleFontSize(size, index);\n    };\n\n    Framework.prototype.updateHtitleFontColor = function (color, index) {\n      this.frameworkInstance.updateHtitleFontColor(color, index);\n    };\n\n    Framework.prototype.updateHtitleFontWeight = function (fontWeight, index) {\n      this.frameworkInstance.updateHtitleFontWeight(fontWeight, index);\n    };\n\n    Framework.prototype.updateHtitleFontStyle = function (fontStyle, index) {\n      this.frameworkInstance.updateHtitleFontStyle(fontStyle, index);\n    }; // V Axis\n\n\n    Framework.prototype.updateVAxisTitle = function (vTitle, index) {\n      this.frameworkInstance.updateVAxisTitle(vTitle, index);\n    };\n\n    Framework.prototype.updateVtitleFontSize = function (size, index) {\n      this.frameworkInstance.updateVtitleFontSize(size, index);\n    };\n\n    Framework.prototype.updateVtitleFontColor = function (color, index) {\n      this.frameworkInstance.updateVtitleFontColor(color, index);\n    };\n\n    Framework.prototype.updateVtitleFontWeight = function (fontWeight, index) {\n      this.frameworkInstance.updateVtitleFontWeight(fontWeight, index);\n    };\n\n    Framework.prototype.updateVtitleFontStyle = function (fontStyle, index) {\n      this.frameworkInstance.updateVtitleFontStyle(fontStyle, index);\n    };\n\n    Framework.prototype.updateVAxisLabelsEnbaled = function (isEnabled, index) {\n      this.frameworkInstance.updateVAxisLabelsEnbaled(isEnabled, index);\n    };\n\n    Framework.prototype.updateVLabelsFontSize = function (size, index) {\n      this.frameworkInstance.updateVLabelsFontSize(size, index);\n    };\n\n    Framework.prototype.updateVLabelsFontColor = function (color, index) {\n      this.frameworkInstance.updateVLabelsFontColor(color, index);\n    };\n\n    Framework.prototype.updateVLabelsFontWeight = function (fontWeight, index) {\n      this.frameworkInstance.updateVLabelsFontWeight(fontWeight, index);\n    };\n\n    Framework.prototype.updateVLabelsFontStyle = function (fontStyle, index) {\n      this.frameworkInstance.updateVLabelsFontStyle(fontStyle, index);\n    }; //stack labels\n\n\n    Framework.prototype.updateVStackLabelsEnbaled = function (isEnabled, index) {\n      this.frameworkInstance.updateVStackLabelsEnbaled(isEnabled, index);\n    };\n\n    Framework.prototype.updateVStackLabelsFontSize = function (size, index) {\n      this.frameworkInstance.updateVStackLabelsFontSize(size, index);\n    };\n\n    Framework.prototype.updateVStackLabelsFontColor = function (color, index) {\n      this.frameworkInstance.updateVStackLabelsFontColor(color, index);\n    };\n\n    Framework.prototype.updateVStackLabelsFontWeight = function (fontWeight, index) {\n      this.frameworkInstance.updateVStackLabelsFontWeight(fontWeight, index);\n    };\n\n    Framework.prototype.updateVStackLabelsFontStyle = function (fontStyle, index) {\n      this.frameworkInstance.updateVStackLabelsFontStyle(fontStyle, index);\n    };\n\n    Framework.prototype.updateVAxisType = function (type, index) {\n      this.frameworkInstance.updateVAxisType(type, index);\n    };\n\n    Framework.prototype.updateVAxisPrefix = function (prefix, index) {\n      this.frameworkInstance.updateVAxisPrefix(prefix, index);\n    };\n\n    Framework.prototype.updateVAxisSuffix = function (suffix, index) {\n      this.frameworkInstance.updateVAxisSuffix(suffix, index);\n    };\n\n    Framework.prototype.updateVAxisMin = function (min, index) {\n      this.frameworkInstance.updateVAxisMin(min, index);\n    };\n\n    Framework.prototype.updateVAxisMax = function (max, index) {\n      this.frameworkInstance.updateVAxisMax(max, index);\n    };\n\n    Framework.prototype.updateVAxisInterval = function (interval, index) {\n      this.frameworkInstance.updateVAxisInterval(interval, index);\n    };\n\n    Framework.prototype.updateVAxisBaseValue = function (baseValue, index) {\n      this.frameworkInstance.updateVAxisBaseValue(baseValue, index);\n    };\n\n    Framework.prototype.updateVAxisPLValue = function (value, vIndex, plIndex) {\n      this.frameworkInstance.updateVAxisPLValue(value, vIndex, plIndex);\n    };\n\n    Framework.prototype.updateVAxisPLText = function (text, vIndex, plIndex) {\n      this.frameworkInstance.updateVAxisPLText(text, vIndex, plIndex);\n    };\n\n    Framework.prototype.updateVAxisPLFontWeight = function (weight, vIndex, plIndex) {\n      this.frameworkInstance.updateVAxisPLFontWeight(weight, vIndex, plIndex);\n    };\n\n    Framework.prototype.updateVAxisPLFontStyle = function (style, vIndex, plIndex) {\n      this.frameworkInstance.updateVAxisPLFontStyle(style, vIndex, plIndex);\n    };\n\n    Framework.prototype.updateVAxisPLFontSize = function (size, vIndex, plIndex) {\n      this.frameworkInstance.updateVAxisPLFontSize(size, vIndex, plIndex);\n    };\n\n    Framework.prototype.updateVAxisPLFontColor = function (color, vIndex, plIndex) {\n      this.frameworkInstance.updateVAxisPLFontColor(color, vIndex, plIndex);\n    };\n\n    Framework.prototype.updateVAxisPLColor = function (color, vIndex, plIndex) {\n      this.frameworkInstance.updateVAxisPLColor(color, vIndex, plIndex);\n    };\n\n    Framework.prototype.updateVAxisPLType = function (type, vIndex, plIndex) {\n      this.frameworkInstance.updateVAxisPLType(type, vIndex, plIndex);\n    };\n\n    Framework.prototype.addVAxisPlotLine = function (index, plOptions) {\n      this.frameworkInstance.addVAxisPlotLine(index, plOptions);\n    };\n\n    Framework.prototype.removeVAxisPlotLine = function (vIndex, plIndex) {\n      this.frameworkInstance.removeVAxisPlotLine(vIndex, plIndex);\n    }; // H Axis GridLines - No getter need to add if needed\n\n\n    Framework.prototype.updateHAxisMajorGLStatus = function (index, status) {\n      this.frameworkInstance.updateHAxisMajorGLStatus(index, status);\n    };\n\n    Framework.prototype.updateHAxisMajorGLCount = function (index, count) {\n      this.frameworkInstance.updateHAxisMajorGLCount(index, count);\n    };\n\n    Framework.prototype.updateHAxisMajorGLType = function (index, type) {\n      this.frameworkInstance.updateHAxisMajorGLType(index, type);\n    };\n\n    Framework.prototype.updateHAxisMajorGLColor = function (index, color) {\n      this.frameworkInstance.updateHAxisMajorGLColor(index, color);\n    };\n\n    Framework.prototype.updateHAxisMinorGLStatus = function (index, status) {\n      this.frameworkInstance.updateHAxisMinorGLStatus(index, status);\n    };\n\n    Framework.prototype.updateHAxisMinorGLType = function (index, type) {\n      this.frameworkInstance.updateHAxisMinorGLType(index, type);\n    };\n\n    Framework.prototype.updateHAxisMinorGLColor = function (index, color) {\n      this.frameworkInstance.updateHAxisMinorGLColor(index, color);\n    }; //V Axis GridLines\n\n\n    Framework.prototype.updateVAxisMajorGLStatus = function (index, status) {\n      this.frameworkInstance.updateVAxisMajorGLStatus(index, status);\n    };\n\n    Framework.prototype.updateVAxisMajorGLCount = function (index, count) {\n      this.frameworkInstance.updateVAxisMajorGLCount(index, count);\n    };\n\n    Framework.prototype.updateVAxisMajorGLType = function (index, type) {\n      this.frameworkInstance.updateVAxisMajorGLType(index, type);\n    };\n\n    Framework.prototype.updateVAxisMajorGLColor = function (index, color) {\n      this.frameworkInstance.updateVAxisMajorGLColor(index, color);\n    };\n\n    Framework.prototype.updateVAxisMinorGLStatus = function (index, status) {\n      this.frameworkInstance.updateVAxisMinorGLStatus(index, status);\n    };\n\n    Framework.prototype.updateVAxisMinorGLType = function (index, type) {\n      this.frameworkInstance.updateVAxisMinorGLType(index, type);\n    };\n\n    Framework.prototype.updateVAxisMinorGLColor = function (index, color) {\n      this.frameworkInstance.updateVAxisMinorGLColor(index, color);\n    };\n\n    Framework.prototype.updateMultipleYAxisStatus = function (status, yAxis) {\n      this.frameworkInstance.updateMultipleYAxisStatus(status, yAxis);\n    };\n\n    Framework.prototype.updateBackgroundColor = function (chartJSON, bg_color) {\n      this.frameworkInstance.updateBackgroundColor(chartJSON, bg_color);\n    };\n\n    Framework.prototype.updateBorderColor = function (border_color) {\n      this.frameworkInstance.updateBorderColor(border_color);\n    };\n\n    Framework.prototype.updateColorTheme = function (chartJSON, theme) {\n      this.frameworkInstance.updateColorTheme(chartJSON, theme);\n    };\n\n    Framework.prototype.updateGradientStatus = function (isEnabled) {\n      this.frameworkInstance.updateGradientStatus(isEnabled);\n    }; //Series properties\n\n\n    Framework.prototype.updateDecimalsValue = function (index, decimals, dataMeta, chartMeta) {\n      this.frameworkInstance.updateDecimalsValue(index, decimals, dataMeta, chartMeta);\n    };\n\n    Framework.prototype.updateDataColor = function (color, seriesIndex, dataIndex) {\n      this.frameworkInstance.updateDataColor(color, seriesIndex, dataIndex);\n    };\n\n    Framework.prototype.updateDataBorderColor = function (color, seriesIndex, dataIndex) {\n      this.frameworkInstance.updateDataBorderColor(color, seriesIndex, dataIndex);\n    };\n\n    Framework.prototype.updateSeriesColor = function (index, color) {\n      this.frameworkInstance.updateSeriesColor(index, color);\n    };\n\n    Framework.prototype.updateTargetColor = function (index, color) {\n      this.frameworkInstance.updateTargetColor(index, color);\n    };\n\n    Framework.prototype.updateBorderColors = function (index, color) {\n      this.frameworkInstance.updateBorderColors(index, color);\n    };\n\n    Framework.prototype.updateMarkerStatus = function (index, status) {\n      this.frameworkInstance.updateMarkerStatus(index, status);\n    };\n\n    Framework.prototype.updateMarkerShape = function (index, shape) {\n      this.frameworkInstance.updateMarkerShape(index, shape);\n    };\n\n    Framework.prototype.updateMarkerSize = function (index, size) {\n      this.frameworkInstance.updateMarkerSize(index, size);\n    };\n\n    Framework.prototype.updateMarkerColor = function (index, color) {\n      this.frameworkInstance.updateMarkerColor(index, color);\n    };\n\n    Framework.prototype.upateMarkerBorderColor = function (index, borderColor) {\n      this.frameworkInstance.upateMarkerBorderColor(index, borderColor);\n    };\n\n    Framework.prototype.updateLineType = function (index, lineType) {\n      this.frameworkInstance.updateLineType(index, lineType);\n    };\n\n    Framework.prototype.updateAreaOpacity = function (index, areaOpacity) {\n      this.frameworkInstance.updateAreaOpacity(index, areaOpacity);\n    };\n\n    Framework.prototype.updateThresholdValue = function (index, value) {\n      this.frameworkInstance.updateThresholdValue(index, value);\n    };\n\n    Framework.prototype.updateNegativeColor = function (index, color) {\n      this.frameworkInstance.updateNegativeColor(index, color);\n    };\n\n    Framework.prototype.updateSortingOrder = function (index, color) {\n      this.frameworkInstance.updateSortingOrder(index, color);\n    };\n\n    Framework.prototype.updateStartAngle = function (angle) {\n      this.frameworkInstance.updateStartAngle(angle);\n    };\n\n    Framework.prototype.updateDonutTotalDatalabelEnabled = function (isEnabled) {\n      this.frameworkInstance.updateDonutTotalDatalabelEnabled(isEnabled);\n    };\n\n    Framework.prototype.updateDonutTotalDatalabelFontSize = function (size) {\n      this.frameworkInstance.updateDonutTotalDatalabelFontSize(size);\n    };\n\n    Framework.prototype.updateDonutTotalDatalabelFontColor = function (color) {\n      this.frameworkInstance.updateDonutTotalDatalabelFontColor(color);\n    };\n\n    Framework.prototype.updateDonutTotalDatalabelFontWeight = function (weight) {\n      this.frameworkInstance.updateDonutTotalDatalabelFontWeight(weight);\n    };\n\n    Framework.prototype.updateDonutTotalDatalabelFontStyle = function (style) {\n      this.frameworkInstance.updateDonutTotalDatalabelFontStyle(style);\n    }; //Tooltip\n\n\n    Framework.prototype.updateTooltipStatus = function (isEnabled) {\n      this.frameworkInstance.updateTooltipStatus(isEnabled);\n    }; //Trendline\n\n\n    Framework.prototype.updateTrendlineStatus = function (isEnabled, index) {\n      this.frameworkInstance.updateTrendlineStatus(isEnabled, index);\n    };\n\n    Framework.prototype.updateTrendlineType = function (type, index) {\n      this.frameworkInstance.updateTrendlineType(type, index);\n    };\n\n    Framework.prototype.updateTrendlineOrder = function (order, index) {\n      this.frameworkInstance.updateTrendlineOrder(order, index);\n    };\n\n    Framework.prototype.updateChartSize = function (width, height) {\n      this.frameworkInstance.updateChartSize(width, height);\n    };\n\n    Framework.prototype.updateData = function (dataMeta, chartMeta) {\n      this.frameworkInstance.updateData(dataMeta, chartMeta);\n    };\n\n    function createInstance(framework, type) {\n      FILE_LOADER.load(framework);\n      var frameworkInstance;\n\n      switch (framework) {\n        case ChartConstants.HIGHCHARTS:\n          frameworkInstance = new HighChartsFramework(type);\n          break;\n\n        case ChartConstants.ZOHOCHARTS:\n          frameworkInstance = new ZohoChartsFramework(type);\n          break;\n      }\n\n      return frameworkInstance;\n    }\n\n    var loadAsync = function loadAsync(framework) {\n      return new Promise(function (res, rej) {\n        var timer = setInterval(function () {\n          if (FILE_LOADER.isLoaded(framework)) {\n            clearInterval(timer);\n            res();\n          }\n        }, 100);\n      });\n    };\n\n    return Framework;\n  }();\n\n  ctx.Framework = Framework;\n})(window || this);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/MultiFramework/ChartFramework.js\n");

/***/ }),

/***/ "./js/MultiFramework/FileLoader.js":
/*!*****************************************!*\
  !*** ./js/MultiFramework/FileLoader.js ***!
  \*****************************************/
/***/ (function() {

"use strict";
eval("/*$Id$*/\n //No I18N\n\n(function (ctx) {\n  var ChartConstants = ctx.ChartConstants;\n  var HCCustomHandler = ctx.HCCustomHandler;\n  var ChartsPlugin = ctx.ChartsPlugin;\n\n  var FILE_LOADER = function FILE_LOADER() {\n    var files_map = [];\n    files_map[ChartConstants.HIGHCHARTS] = {\n      paths: [// \"./js/ThirdParty/highcharts.js\", //No I18N\n      // \"./js/ThirdParty/highcharts-more.src.js\",//No I18N\n      \"../js/ThirdParty/highcharts_regression.js\" //No I18N\n      ],\n      isLoaded: false,\n      isRequestRecieved: false,\n      totalFilesNeeded: 1,\n      totalFilesUploaded: 0,\n      startTime: 0\n    };\n    files_map[ChartConstants.ZOHOCHARTS] = {\n      paths: [\"../js/ThirdParty/d3.js\", //No I18N\n      \"../js/ThirdParty/zc.js\"],\n      //No I18N\n      isLoaded: false,\n      isRequestRecieved: false,\n      totalFilesNeeded: 1,\n      totalFilesUploaded: 0,\n      startTime: 0\n    };\n    return {\n      load: function load(framework_name) {\n        if (!files_map[framework_name].isLoaded && !files_map[framework_name].isRequestRecieved) {\n          files_map[framework_name].isRequestRecieved = true;\n          files_map[framework_name].startTime = performance.now();\n          var paths = files_map[framework_name].paths;\n          paths.forEach(function (path) {\n            setTimeout(function () {\n              var head = document.getElementsByTagName('head')[0];\n              var script = document.createElement('script');\n              script.type = 'text/javascript';\n              script.src = path;\n\n              script.onload = function () {\n                files_map[framework_name].totalFilesUploaded++;\n\n                if (files_map[framework_name].totalFilesUploaded == files_map[framework_name].totalFilesNeeded) {\n                  var endTime = performance.now(); //console.log(\"Total Uploading Time for : \"+framework_name+\" is \"+(endTime - files_map[framework_name].startTime)+\" ms\");\n\n                  files_map[framework_name].isLoaded = true;\n                  ChartsPlugin.load(framework_name);\n                }\n              }; // Load File\n\n\n              head.appendChild(script);\n            }, 100);\n          });\n        }\n      },\n      isLoaded: function isLoaded(framework_name) {\n        return files_map[framework_name].isLoaded;\n      }\n    };\n  };\n\n  ctx.FILE_LOADER = FILE_LOADER();\n})(window || this);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUNIO0FBQ0osZUFSRCxDQUxpQixDQWNqQjs7O0FBQ0FNLGNBQUFBLElBQUksQ0FBQ1MsV0FBTCxDQUFpQk4sTUFBakI7QUFDSCxhQWhCUyxFQWdCUCxHQWhCTyxDQUFWO0FBbUJILFdBcEJEO0FBcUJIO0FBQ0osT0E1QkU7QUE4QkhoQixNQUFBQSxRQTlCRyxvQkE4Qk9PLGNBOUJQLEVBOEJ1QjtBQUN0QixlQUFPVixTQUFTLENBQUNVLGNBQUQsQ0FBVCxDQUEwQlAsUUFBakM7QUFDSDtBQWhDRSxLQUFQO0FBa0NILEdBMUREOztBQTJEQVIsRUFBQUEsR0FBRyxDQUFDSSxXQUFKLEdBQWtCQSxXQUFXLEVBQTdCO0FBQ0gsQ0FoRUQsRUFnRUcyQixNQUFNLElBQUksSUFoRWIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tdWx0aS1jaGFydC1mcmFtZXdvcmsvLi9qcy9NdWx0aUZyYW1ld29yay9GaWxlTG9hZGVyLmpzPzRiMmQiXSwic291cmNlc0NvbnRlbnQiOlsiLyokSWQkKi9cblwidXNlIHN0cmljdFwiOy8vTm8gSTE4TlxuKGZ1bmN0aW9uKGN0eCl7XG4gICAgY29uc3QgQ2hhcnRDb25zdGFudHMgPSBjdHguQ2hhcnRDb25zdGFudHM7XG4gICAgY29uc3QgSENDdXN0b21IYW5kbGVyID0gY3R4LkhDQ3VzdG9tSGFuZGxlcjtcbiAgICBjb25zdCBDaGFydHNQbHVnaW4gPSBjdHguQ2hhcnRzUGx1Z2luO1xuICAgIHZhciBGSUxFX0xPQURFUiA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBmaWxlc19tYXAgPSBbXTtcbiAgICAgICAgZmlsZXNfbWFwW0NoYXJ0Q29uc3RhbnRzLkhJR0hDSEFSVFNdID0ge1xuICAgICAgICAgICAgcGF0aHMgOiBbXG4gICAgICAgICAgICAgICAgLy8gXCIuL2pzL1RoaXJkUGFydHkvaGlnaGNoYXJ0cy5qc1wiLCAvL05vIEkxOE5cbiAgICAgICAgICAgIC8vIFwiLi9qcy9UaGlyZFBhcnR5L2hpZ2hjaGFydHMtbW9yZS5zcmMuanNcIiwvL05vIEkxOE5cbiAgICAgICAgICAgIFwiLi4vanMvVGhpcmRQYXJ0eS9oaWdoY2hhcnRzX3JlZ3Jlc3Npb24uanNcIiAvL05vIEkxOE5cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBpc0xvYWRlZCA6IGZhbHNlLFxuICAgICAgICAgICAgaXNSZXF1ZXN0UmVjaWV2ZWQgOiBmYWxzZSxcbiAgICAgICAgICAgIHRvdGFsRmlsZXNOZWVkZWQgOiAxLFxuICAgICAgICAgICAgdG90YWxGaWxlc1VwbG9hZGVkIDogMCxcbiAgICAgICAgICAgIHN0YXJ0VGltZSA6IDBcbiAgICAgICAgfVxuXG4gICAgICAgIGZpbGVzX21hcFtDaGFydENvbnN0YW50cy5aT0hPQ0hBUlRTXSA9IHtcbiAgICAgICAgICAgIHBhdGhzIDogW1wiLi4vanMvVGhpcmRQYXJ0eS9kMy5qc1wiLC8vTm8gSTE4TlxuICAgICAgICAgICAgXCIuLi9qcy9UaGlyZFBhcnR5L3pjLmpzXCJdLC8vTm8gSTE4TlxuICAgICAgICAgICAgaXNMb2FkZWQgOiBmYWxzZSxcbiAgICAgICAgICAgIGlzUmVxdWVzdFJlY2lldmVkIDogZmFsc2UsXG4gICAgICAgICAgICB0b3RhbEZpbGVzTmVlZGVkIDogMSxcbiAgICAgICAgICAgIHRvdGFsRmlsZXNVcGxvYWRlZCA6IDAsXG4gICAgICAgICAgICBzdGFydFRpbWUgOiAwXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxvYWQgOiBmdW5jdGlvbihmcmFtZXdvcmtfbmFtZSkge1xuICAgICAgICAgICAgICAgIGlmKCFmaWxlc19tYXBbZnJhbWV3b3JrX25hbWVdLmlzTG9hZGVkICYmICFmaWxlc19tYXBbZnJhbWV3b3JrX25hbWVdLmlzUmVxdWVzdFJlY2lldmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGZpbGVzX21hcFtmcmFtZXdvcmtfbmFtZV0uaXNSZXF1ZXN0UmVjaWV2ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBmaWxlc19tYXBbZnJhbWV3b3JrX25hbWVdLnN0YXJ0VGltZSA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGF0aHMgPSBmaWxlc19tYXBbZnJhbWV3b3JrX25hbWVdLnBhdGhzO1xuICAgICAgICAgICAgICAgICAgICBwYXRocy5mb3JFYWNoKHBhdGggPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBoZWFkID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NyaXB0LnR5cGUgPSAndGV4dC9qYXZhc2NyaXB0JztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JpcHQuc3JjID0gcGF0aDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JpcHQub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVzX21hcFtmcmFtZXdvcmtfbmFtZV0udG90YWxGaWxlc1VwbG9hZGVkKys7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGZpbGVzX21hcFtmcmFtZXdvcmtfbmFtZV0udG90YWxGaWxlc1VwbG9hZGVkID09IGZpbGVzX21hcFtmcmFtZXdvcmtfbmFtZV0udG90YWxGaWxlc05lZWRlZCkgeyAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZW5kVGltZSA9IHBlcmZvcm1hbmNlLm5vdygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jb25zb2xlLmxvZyhcIlRvdGFsIFVwbG9hZGluZyBUaW1lIGZvciA6IFwiK2ZyYW1ld29ya19uYW1lK1wiIGlzIFwiKyhlbmRUaW1lIC0gZmlsZXNfbWFwW2ZyYW1ld29ya19uYW1lXS5zdGFydFRpbWUpK1wiIG1zXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZXNfbWFwW2ZyYW1ld29ya19uYW1lXS5pc0xvYWRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDaGFydHNQbHVnaW4ubG9hZChmcmFtZXdvcmtfbmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIExvYWQgRmlsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIDEwMCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICBpc0xvYWRlZCAoZnJhbWV3b3JrX25hbWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmlsZXNfbWFwW2ZyYW1ld29ya19uYW1lXS5pc0xvYWRlZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9KTtcbiAgICBjdHguRklMRV9MT0FERVIgPSBGSUxFX0xPQURFUigpO1xufSkod2luZG93IHx8IHRoaXMpXG4iXSwibmFtZXMiOlsiY3R4IiwiQ2hhcnRDb25zdGFudHMiLCJIQ0N1c3RvbUhhbmRsZXIiLCJDaGFydHNQbHVnaW4iLCJGSUxFX0xPQURFUiIsImZpbGVzX21hcCIsIkhJR0hDSEFSVFMiLCJwYXRocyIsImlzTG9hZGVkIiwiaXNSZXF1ZXN0UmVjaWV2ZWQiLCJ0b3RhbEZpbGVzTmVlZGVkIiwidG90YWxGaWxlc1VwbG9hZGVkIiwic3RhcnRUaW1lIiwiWk9IT0NIQVJUUyIsImxvYWQiLCJmcmFtZXdvcmtfbmFtZSIsInBlcmZvcm1hbmNlIiwibm93IiwiZm9yRWFjaCIsInBhdGgiLCJzZXRUaW1lb3V0IiwiaGVhZCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJzY3JpcHQiLCJjcmVhdGVFbGVtZW50IiwidHlwZSIsInNyYyIsIm9ubG9hZCIsImVuZFRpbWUiLCJhcHBlbmRDaGlsZCIsIndpbmRvdyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./js/MultiFramework/FileLoader.js\n");

/***/ }),

/***/ "./js/MultiFramework/HighChartsFramework.js":
/*!**************************************************!*\
  !*** ./js/MultiFramework/HighChartsFramework.js ***!
  \**************************************************/
/***/ (function() {

"use strict";
eval("/*$Id$*/\n //No I18N\n\n(function (ctx) {\n  var chartTypeToHCType = ctx.HCMaps.chartTypeToHCType;\n  var HCSkeletonConstructor = ctx.HCSkeletonConstructor;\n  var HCSeriesConstructor = ctx.HCSeriesConstructor;\n  var HCJSONConvertor = ctx.HCJSONConvertor;\n  var HCKeyList = ctx.HCKeyList;\n  var HCConstants = ctx.HCConstants;\n  var HCCustomHandler = ctx.HCCustomHandler;\n  var HCPropHandler = ctx.HCPropHandler;\n  var HCSeriesPropertiesHandler = ctx.HCSeriesPropertiesHandler;\n  var GeneralUtilities = ctx.GeneralUtilities;\n  var ChartConstants = ctx.ChartConstants;\n  var RaceBarSeriesConstructor = ctx.RaceBarSeriesConstructor;\n\n  var HighChartsFramework = function () {\n    function HighChartsFramework(type) {\n      this.chartType = type;\n      this.type = chartTypeToHCType[type];\n      this.highchartsInstance = {};\n    }\n\n    HighChartsFramework.prototype.createChart = function (chartJSON, dataJSON) {\n      var highchartsJSON = getHighchartsSkeleton(this.type, this.chartType);\n      HCJSONConvertor.convert(this.type, this.chartType, chartJSON, highchartsJSON); // Converts the input chart meta to highcharts format\n\n      HCCustomHandler.handle(this.type, this.chartType, highchartsJSON); //Handles Default Behaviour that are not exposed to users\n\n      HCSeriesConstructor.construct(this.type, this.chartType, dataJSON, highchartsJSON, chartJSON); // Constructs the series\n\n      HCSeriesPropertiesHandler.handle(this.type, chartJSON, highchartsJSON, this.chartType); // Set all the properties specific to series\n\n      this.renderChart(highchartsJSON);\n      this.afterRenderTasks(chartJSON, highchartsJSON);\n    };\n\n    HighChartsFramework.prototype.reqData = function (chartId) {\n      var d = RaceBarSeriesConstructor.raceChartData[chartId];\n      var t = this.highchartsInstance.userOptions[HCConstants.CHART][HCConstants.ANIMATION][HCConstants.DURATION];\n      var self = this;\n      d.timer = setTimeout(function () {\n        d.currentIndex++;\n\n        if (d.currentIndex >= d.totalSeries) {\n          self.stop(chartId);\n        } else {\n          self.play(chartId);\n        }\n      }, t);\n      this.highchartsInstance.sequenceTimer = d.timer;\n    };\n\n    HighChartsFramework.prototype.play = function (chartId) {\n      var d = RaceBarSeriesConstructor.raceChartData[chartId];\n      RaceBarSeriesConstructor.update(d.currentIndex, chartId, this.highchartsInstance.userOptions, this.highchartsInstance); // d.currentIndex++;\n\n      d.isPlaying = true;\n      this.reqData(chartId);\n    };\n\n    HighChartsFramework.prototype.pause = function (chartId) {\n      var d = RaceBarSeriesConstructor.raceChartData[chartId];\n      clearInterval(d.timer);\n      clearInterval(this.highchartsInstance.sequenceTimer);\n      d.isPlaying = false;\n      d.img.src = \"../images/play_button.png\";\n    };\n\n    HighChartsFramework.prototype.stop = function (chartId) {\n      var d = RaceBarSeriesConstructor.raceChartData[chartId];\n      clearInterval(d.timer);\n      clearInterval(this.highchartsInstance.sequenceTimer); //Update Last Data\n\n      RaceBarSeriesConstructor.update(d.totalSeries - 1, chartId, this.highchartsInstance.userOptions, this.highchartsInstance);\n      RaceBarSeriesConstructor.fillCumulatedArrayWithZero(chartId);\n      d.currentIndex = 0;\n      d.isPlaying = false;\n      d.img.src = \"../images/play_button.png\";\n    };\n\n    HighChartsFramework.prototype.addButton = function (highchartsJSON) {\n      var chartId = highchartsJSON[HCConstants.CHART][HCConstants.RENDER_TO]; //Add play btn and slider\n\n      var img = document.createElement(\"img\");\n      var chartDiv = document.getElementById(chartId);\n      img.src = \"../images/play_button.png\";\n      img.classList.add(\"play_btn\"); //No I18N\n\n      var self = this;\n      var d = RaceBarSeriesConstructor.raceChartData[chartId];\n      d.img = img;\n      img.addEventListener('click', function (e) {\n        var chartId = highchartsJSON[HCConstants.CHART][HCConstants.RENDER_TO];\n        d = RaceBarSeriesConstructor.raceChartData[chartId];\n\n        if (d.isPlaying) {\n          self.pause(chartId);\n        } else {\n          d.img.src = \"../images/pause_button.png\";\n          self.play(chartId);\n        }\n      });\n      chartDiv.appendChild(img);\n    };\n\n    HighChartsFramework.prototype.afterRenderTasks = function (chartJSON, highchartsJSON) {\n      if (this.chartType.indexOf(ChartConstants.RACEBAR) != -1) {\n        this.addButton(highchartsJSON);\n      }\n    };\n\n    HighChartsFramework.prototype.renderChart = function (json) {\n      if (this.chartType.indexOf(ChartConstants.LINE_TIME_SERIES) != -1 || this.chartType.indexOf(ChartConstants.AREA_TIME_SERIES) != -1) {\n        this.highchartsInstance = new Highcharts.StockChart(json);\n      } else {\n        this.highchartsInstance = new Highcharts.Chart(json);\n      }\n    }; //Updation Code\n\n\n    HighChartsFramework.prototype.update = function (json) {\n      this.highchartsInstance.update(json);\n    };\n\n    HighChartsFramework.prototype.updateChartType = function (type) {\n      this.type = chartTypeToHCType[type];\n    };\n\n    HighChartsFramework.prototype.updateAnimationDuration = function (duration) {\n      var chartObj = HCPropHandler.handleAnimatedDuration(duration);\n      this.highchartsInstance.update(chartObj);\n    };\n\n    HighChartsFramework.prototype.updateInvertedStatus = function (status) {\n      var chartObj = HCPropHandler.handleInverted(status);\n      this.highchartsInstance.update(chartObj);\n    };\n\n    HighChartsFramework.prototype.updateChartFontFamily = function (fontFamily) {\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      var chartObj = HCPropHandler.handleChartFontFamily(fontFamily, highchartsJSON);\n      this.highchartsInstance.update(chartObj);\n    };\n\n    HighChartsFramework.prototype.updateTitle = function (title) {\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      var titleObj = HCPropHandler.handleTitleTextChange(title, highchartsJSON);\n      this.highchartsInstance.setTitle(titleObj);\n    };\n\n    HighChartsFramework.prototype.updateTitleFontSize = function (size) {\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      highchartsJSON[HCConstants.TITLE][HCConstants.STYLE][HCConstants.FONT_SIZE] = size;\n      this.highchartsInstance.setTitle(highchartsJSON[HCConstants.TITLE]);\n    };\n\n    HighChartsFramework.prototype.updateTitleFontColor = function (color) {\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      highchartsJSON[HCConstants.TITLE][HCConstants.STYLE][HCConstants.FONT_COLOR] = color;\n      this.highchartsInstance.setTitle(highchartsJSON[HCConstants.TITLE]);\n    };\n\n    HighChartsFramework.prototype.updateTitleFontWeight = function (fontWeight) {\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      highchartsJSON[HCConstants.TITLE][HCConstants.STYLE][HCConstants.FONT_WEIGHT] = fontWeight;\n      this.highchartsInstance.setTitle(highchartsJSON[HCConstants.TITLE]);\n    };\n\n    HighChartsFramework.prototype.updateTitleFontStyle = function (fontStyle) {\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      highchartsJSON[HCConstants.TITLE][HCConstants.STYLE][HCConstants.FONT_STYLE] = fontStyle;\n      this.highchartsInstance.setTitle(highchartsJSON[HCConstants.TITLE]);\n    };\n\n    HighChartsFramework.prototype.updateSubTitle = function (subtitle) {\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      var subtitleObj = HCPropHandler.handleSubtitleTextChange(subtitle, highchartsJSON);\n      this.highchartsInstance.setSubtitle(subtitleObj);\n    };\n\n    HighChartsFramework.prototype.updateSubtitleFontSize = function (size) {\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      highchartsJSON[HCConstants.SUBTITLE][HCConstants.STYLE][HCConstants.FONT_SIZE] = size;\n      this.highchartsInstance.setSubtitle(highchartsJSON[HCConstants.SUBTITLE]);\n    };\n\n    HighChartsFramework.prototype.updateSubtitleFontColor = function (color) {\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      highchartsJSON[HCConstants.SUBTITLE][HCConstants.STYLE][HCConstants.FONT_COLOR] = color;\n      this.highchartsInstance.setSubtitle(highchartsJSON[HCConstants.SUBTITLE]);\n    };\n\n    HighChartsFramework.prototype.updateSubtitleFontWeight = function (fontWeight) {\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      highchartsJSON[HCConstants.SUBTITLE][HCConstants.STYLE][HCConstants.FONT_WEIGHT] = fontWeight;\n      this.highchartsInstance.setSubtitle(highchartsJSON[HCConstants.SUBTITLE]);\n    };\n\n    HighChartsFramework.prototype.updateSubtitleFontStyle = function (fontStyle) {\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      highchartsJSON[HCConstants.SUBTITLE][HCConstants.STYLE][HCConstants.FONT_STYLE] = fontStyle;\n      this.highchartsInstance.setSubtitle(highchartsJSON[HCConstants.SUBTITLE]);\n    }; //Legend\n\n\n    HighChartsFramework.prototype.updateLegend = function (legendOptions) {\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      var legend = HCPropHandler.handleLegendObject(legendOptions, highchartsJSON);\n      this.highchartsInstance[HCConstants.LEGEND].update(legend);\n    };\n\n    HighChartsFramework.prototype.updateLegendStatus = function (isEnabled) {\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      var legend = HCPropHandler.handleLegendStatus(isEnabled, highchartsJSON);\n      this.highchartsInstance[HCConstants.LEGEND].update(legend);\n    };\n\n    HighChartsFramework.prototype.updateLegendFontSize = function (size) {\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      HCPropHandler.handleLegendFontSize(size, highchartsJSON);\n      this.highchartsInstance[HCConstants.LEGEND].update(highchartsJSON[HCConstants.LEGEND]);\n    };\n\n    HighChartsFramework.prototype.updateLegendFontColor = function (color) {\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      HCPropHandler.handleLegendFontColor(color, highchartsJSON);\n      this.highchartsInstance[HCConstants.LEGEND].update(highchartsJSON[HCConstants.LEGEND]);\n    };\n\n    HighChartsFramework.prototype.updateLegendFontWeight = function (fontWeight) {\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      HCPropHandler.handleLegendFontWeight(fontWeight, highchartsJSON);\n      this.highchartsInstance[HCConstants.LEGEND].update(highchartsJSON[HCConstants.LEGEND]);\n    };\n\n    HighChartsFramework.prototype.updateLegendFontStyle = function (fontStyle) {\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      HCPropHandler.handleLegendFontStyle(fontStyle, highchartsJSON);\n      this.highchartsInstance[HCConstants.LEGEND].update(highchartsJSON[HCConstants.LEGEND]);\n    }; //caption\n\n\n    HighChartsFramework.prototype.updateCaptionStatus = function (isEnabled) {\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      HCPropHandler.handleCaptionStatus(this.type, isEnabled, highchartsJSON);\n      this.highchartsInstance[HCConstants.CAPTION].update(highchartsJSON[HCConstants.CAPTION]);\n    };\n\n    HighChartsFramework.prototype.updateCaptionFontSize = function (size) {\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      HCPropHandler.handleCaptionFontSize(this.type, size, highchartsJSON);\n      this.highchartsInstance[HCConstants.CAPTION].update(highchartsJSON[HCConstants.CAPTION]);\n    };\n\n    HighChartsFramework.prototype.updateCaptionFontColor = function (color) {\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      HCPropHandler.handleCaptionFontColor(this.type, color, highchartsJSON);\n      this.highchartsInstance[HCConstants.CAPTION].update(highchartsJSON[HCConstants.CAPTION]);\n    };\n\n    HighChartsFramework.prototype.updateCaptionFontWeight = function (weight) {\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      HCPropHandler.handleCaptionFontWeight(this.type, weight, highchartsJSON);\n      this.highchartsInstance[HCConstants.CAPTION].update(highchartsJSON[HCConstants.CAPTION]);\n    };\n\n    HighChartsFramework.prototype.updateCaptionFontStyle = function (style) {\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      HCPropHandler.handleCaptionFontStyle(this.type, style, highchartsJSON);\n      this.highchartsInstance[HCConstants.CAPTION].update(highchartsJSON[HCConstants.CAPTION]);\n    }; //Donut total datalabels \n\n\n    HighChartsFramework.prototype.updateDonutTotalDatalabelEnabled = function (isEnabled) {\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      var series = highchartsJSON[HCConstants.SERIES];\n\n      if (series && series.length == 2 && series[1] && series[1][HCConstants.IS_DATALABEL_SERIES]) {\n        series[1][HCConstants.DATALABELS][HCConstants.ENABLED] = isEnabled;\n        this.highchartsInstance.update(highchartsJSON);\n      }\n    };\n\n    HighChartsFramework.prototype.updateDonutTotalDatalabelFontSize = function (size) {\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      var series = highchartsJSON[HCConstants.SERIES];\n\n      if (series && series.length == 2 && series[1] && series[1][HCConstants.IS_DATALABEL_SERIES]) {\n        series[1][HCConstants.DATALABELS][HCConstants.STYLE][HCConstants.FONT_SIZE] = size;\n        this.highchartsInstance.update(highchartsJSON);\n      }\n    };\n\n    HighChartsFramework.prototype.updateDonutTotalDatalabelFontColor = function (color) {\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      var series = highchartsJSON[HCConstants.SERIES];\n\n      if (series && series.length == 2 && series[1] && series[1][HCConstants.IS_DATALABEL_SERIES]) {\n        series[1][HCConstants.DATALABELS][HCConstants.STYLE][HCConstants.FONT_COLOR] = color;\n        this.highchartsInstance.update(highchartsJSON);\n      }\n    };\n\n    HighChartsFramework.prototype.updateDonutTotalDatalabelFontWeight = function (weight) {\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      var series = highchartsJSON[HCConstants.SERIES];\n\n      if (series && series.length == 2 && series[1] && series[1][HCConstants.IS_DATALABEL_SERIES]) {\n        series[1][HCConstants.DATALABELS][HCConstants.STYLE][HCConstants.FONT_WEIGHT] = weight;\n        this.highchartsInstance.update(highchartsJSON);\n      }\n    };\n\n    HighChartsFramework.prototype.updateDonutTotalDatalabelFontStyle = function (style) {\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      var series = highchartsJSON[HCConstants.SERIES];\n\n      if (series && series.length == 2 && series[1] && series[1][HCConstants.IS_DATALABEL_SERIES]) {\n        series[1][HCConstants.DATALABELS][HCConstants.STYLE][HCConstants.FONT_STYLE] = style;\n        this.highchartsInstance.update(highchartsJSON);\n      }\n    }; //Datalabels\n\n\n    HighChartsFramework.prototype.updateDatalabelEnabled = function (isEnabled, index) {\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      HCPropHandler.handleDatalabelStatus(this.type, index, isEnabled, highchartsJSON, this.chartType);\n\n      if (this.chartType.indexOf(ChartConstants.WEIGHTED_FUNNEL) != -1) {\n        var series = highchartsJSON[HCConstants.SERIES];\n        var seriesLen = series ? series.length : 0;\n\n        for (var i = 0; i < seriesLen; i++) {\n          this.updateSeries(i, highchartsJSON[HCConstants.SERIES][i]);\n        }\n      } else {\n        this.updateSeries(index, highchartsJSON[HCConstants.SERIES][index]);\n      }\n    };\n\n    HighChartsFramework.prototype.updateDatalabelFontSize = function (size, index) {\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      HCPropHandler.handleDatalabelFontSize(this.type, index, size, highchartsJSON, this.chartType);\n\n      if (this.chartType.indexOf(ChartConstants.WEIGHTED_FUNNEL) != -1) {\n        var series = highchartsJSON[HCConstants.SERIES];\n        var seriesLen = series ? series.length : 0;\n\n        for (var i = 0; i < seriesLen; i++) {\n          this.updateSeries(i, highchartsJSON[HCConstants.SERIES][i]);\n        }\n      } else {\n        this.updateSeries(index, highchartsJSON[HCConstants.SERIES][index]);\n      }\n    };\n\n    HighChartsFramework.prototype.updateDatalabelFontColor = function (color, index) {\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      HCPropHandler.handleDatalabelFontColor(this.type, index, color, highchartsJSON, this.chartType);\n\n      if (this.chartType.indexOf(ChartConstants.WEIGHTED_FUNNEL) != -1) {\n        var series = highchartsJSON[HCConstants.SERIES];\n        var seriesLen = series ? series.length : 0;\n\n        for (var i = 0; i < seriesLen; i++) {\n          this.updateSeries(i, highchartsJSON[HCConstants.SERIES][i]);\n        }\n      } else {\n        this.updateSeries(index, highchartsJSON[HCConstants.SERIES][index]);\n      }\n    };\n\n    HighChartsFramework.prototype.updateDatalabelFontWeight = function (weight, index) {\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      HCPropHandler.handleDatalabelFontWeight(this.type, index, weight, highchartsJSON, this.chartType);\n\n      if (this.chartType.indexOf(ChartConstants.WEIGHTED_FUNNEL) != -1) {\n        var series = highchartsJSON[HCConstants.SERIES];\n        var seriesLen = series ? series.length : 0;\n\n        for (var i = 0; i < seriesLen; i++) {\n          this.updateSeries(i, highchartsJSON[HCConstants.SERIES][i]);\n        }\n      } else {\n        this.updateSeries(index, highchartsJSON[HCConstants.SERIES][index]);\n      }\n    };\n\n    HighChartsFramework.prototype.updateDatalabelFontStyle = function (style, index) {\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      HCPropHandler.handleDatalabelFontStyle(this.type, index, style, highchartsJSON, this.chartType);\n\n      if (this.chartType.indexOf(ChartConstants.WEIGHTED_FUNNEL) != -1) {\n        var series = highchartsJSON[HCConstants.SERIES];\n        var seriesLen = series ? series.length : 0;\n\n        for (var i = 0; i < seriesLen; i++) {\n          this.updateSeries(i, highchartsJSON[HCConstants.SERIES][i]);\n        }\n      } else {\n        this.updateSeries(index, highchartsJSON[HCConstants.SERIES][index]);\n      }\n    };\n\n    HighChartsFramework.prototype.updateDatalabelPosition = function (position, index) {\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      HCPropHandler.handleDatalabelPosition(this.type, index, position, highchartsJSON, this.chartType);\n\n      if (this.chartType.indexOf(ChartConstants.WEIGHTED_FUNNEL) != -1) {\n        var series = highchartsJSON[HCConstants.SERIES];\n        var seriesLen = series ? series.length : 0;\n\n        for (var i = 0; i < seriesLen; i++) {\n          this.updateSeries(i, highchartsJSON[HCConstants.SERIES][i]);\n        }\n      } else {\n        this.updateSeries(index, highchartsJSON[HCConstants.SERIES][index]);\n      }\n    };\n\n    HighChartsFramework.prototype.updateDatalabelFormat = function (format, index) {\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      HCPropHandler.handleDatalabelFormat(this.type, index, format, highchartsJSON, this.chartType);\n\n      if (this.chartType.indexOf(ChartConstants.WEIGHTED_FUNNEL) != -1) {\n        var series = highchartsJSON[HCConstants.SERIES];\n        var seriesLen = series ? series.length : 0;\n\n        for (var i = 0; i < seriesLen; i++) {\n          this.updateSeries(i, highchartsJSON[HCConstants.SERIES][i]);\n        }\n      } else {\n        this.updateSeries(index, highchartsJSON[HCConstants.SERIES][index]);\n      }\n    }; //X Axis\n\n\n    HighChartsFramework.prototype.updateHAxisLabelsEnbaled = function (isEnabled, index) {\n      index = Number(index);\n      this.highchartsInstance[HCConstants.HAXIS][index].update({\n        labels: {\n          enabled: isEnabled\n        }\n      });\n    };\n\n    HighChartsFramework.prototype.updateHLabelsFontSize = function (size, index) {\n      index = Number(index);\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      highchartsJSON[HCConstants.HAXIS][index][HCConstants.LABELS][HCConstants.STYLE][HCConstants.FONT_SIZE] = size;\n      this.highchartsInstance[HCConstants.HAXIS][index].update(highchartsJSON[HCConstants.HAXIS][index]);\n    };\n\n    HighChartsFramework.prototype.updateHLabelsFontColor = function (color, index) {\n      index = Number(index);\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      highchartsJSON[HCConstants.HAXIS][index][HCConstants.LABELS][HCConstants.STYLE][HCConstants.FONT_COLOR] = color;\n      this.highchartsInstance[HCConstants.HAXIS][index].update(highchartsJSON[HCConstants.HAXIS][index]);\n    };\n\n    HighChartsFramework.prototype.updateHLabelsFontWeight = function (fontWeight, index) {\n      index = Number(index);\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      highchartsJSON[HCConstants.HAXIS][index][HCConstants.LABELS][HCConstants.STYLE][HCConstants.FONT_WEIGHT] = fontWeight;\n      this.highchartsInstance[HCConstants.HAXIS][index].update(highchartsJSON[HCConstants.HAXIS][index]);\n    };\n\n    HighChartsFramework.prototype.updateHLabelsFontStyle = function (fontStyle, index) {\n      index = Number(index);\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      highchartsJSON[HCConstants.HAXIS][index][HCConstants.LABELS][HCConstants.STYLE][HCConstants.FONT_STYLE] = fontStyle;\n      this.highchartsInstance[HCConstants.HAXIS][index].update(highchartsJSON[HCConstants.HAXIS][index]);\n    };\n\n    HighChartsFramework.prototype.updateHLabelsSLCount = function (count, index) {\n      index = Number(index);\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      highchartsJSON[HCConstants.HAXIS][index][HCConstants.LABELS][HCConstants.STAGGER_LINES] = count;\n      this.highchartsInstance[HCConstants.HAXIS][index].update(highchartsJSON[HCConstants.HAXIS][index]);\n    };\n\n    HighChartsFramework.prototype.updateHLabelsRotation = function (angle, index) {\n      index = Number(index);\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      highchartsJSON[HCConstants.HAXIS][index][HCConstants.LABELS][HCConstants.ROTATION] = angle;\n      this.highchartsInstance[HCConstants.HAXIS][index].update(highchartsJSON[HCConstants.HAXIS][index]);\n    };\n\n    HighChartsFramework.prototype.updateHAxisReversedValue = function (status, index) {\n      index = Number(index);\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      highchartsJSON[HCConstants.HAXIS][index][HCConstants.REVERSED] = status;\n      this.highchartsInstance[HCConstants.HAXIS][index].update(highchartsJSON[HCConstants.HAXIS][index]);\n    };\n\n    HighChartsFramework.prototype.updateMinValue = function (min, index) {\n      index = Number(index);\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      highchartsJSON[HCConstants.HAXIS][index][HCConstants.MIN] = min;\n      this.highchartsInstance[HCConstants.HAXIS][index].update(highchartsJSON[HCConstants.HAXIS][index]);\n    };\n\n    HighChartsFramework.prototype.updateMaxValue = function (max, index) {\n      index = Number(index);\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      highchartsJSON[HCConstants.HAXIS][index][HCConstants.MAX] = max;\n      this.highchartsInstance[HCConstants.HAXIS][index].update(highchartsJSON[HCConstants.HAXIS][index]);\n    };\n\n    HighChartsFramework.prototype.updateHAxisTitle = function (hTitle, index) {\n      index = Number(index);\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      highchartsJSON[HCConstants.HAXIS][index][HCConstants.TITLE][HCConstants.TEXT] = hTitle;\n      this.highchartsInstance[HCConstants.HAXIS][index].update(highchartsJSON[HCConstants.HAXIS][index]); //Cant Update htitle text alone. It will update xtitle in xaxis object, but doesnot globally\n      //this.highchartsInstance[HCConstants.HAXIS][index].update({title : {text : hTitle}})\n    };\n\n    HighChartsFramework.prototype.updateHtitleFontSize = function (size, index) {\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      highchartsJSON[HCConstants.HAXIS][index][HCConstants.TITLE][HCConstants.STYLE][HCConstants.FONT_SIZE] = size;\n      this.highchartsInstance[HCConstants.HAXIS][index].update(highchartsJSON[HCConstants.HAXIS][index]);\n    };\n\n    HighChartsFramework.prototype.updateHtitleFontColor = function (color, index) {\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      highchartsJSON[HCConstants.HAXIS][index][HCConstants.TITLE][HCConstants.STYLE][HCConstants.FONT_COLOR] = color;\n      this.highchartsInstance[HCConstants.HAXIS][index].update(highchartsJSON[HCConstants.HAXIS][index]);\n    };\n\n    HighChartsFramework.prototype.updateHtitleFontWeight = function (fontWeight, index) {\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      highchartsJSON[HCConstants.HAXIS][index][HCConstants.TITLE][HCConstants.STYLE][HCConstants.FONT_WEIGHT] = fontWeight;\n      this.highchartsInstance[HCConstants.HAXIS][index].update(highchartsJSON[HCConstants.HAXIS][index]);\n    };\n\n    HighChartsFramework.prototype.updateHtitleFontStyle = function (fontStyle, index) {\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      highchartsJSON[HCConstants.HAXIS][index][HCConstants.TITLE][HCConstants.STYLE][HCConstants.FONT_STYLE] = fontStyle;\n      this.highchartsInstance[HCConstants.HAXIS][index].update(highchartsJSON[HCConstants.HAXIS][index]);\n    }; //Y Axis\n\n\n    HighChartsFramework.prototype.updateVAxisTitle = function (vTitle, index) {\n      index = Number(index);\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      highchartsJSON[HCConstants.VAXIS][index][HCConstants.TITLE][HCConstants.TEXT] = vTitle;\n      this.highchartsInstance[HCConstants.VAXIS][index].update(highchartsJSON[HCConstants.VAXIS][index]); //Cant Update vtitle text alone. It will update ytitle in yaxis object, but doesnot globally\n      // this.highchartsInstance[HCConstants.VAXIS][index].update({title : {text : vTitle}}) \n    };\n\n    HighChartsFramework.prototype.updateVtitleFontSize = function (size, index) {\n      index = Number(index);\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      highchartsJSON[HCConstants.VAXIS][index][HCConstants.TITLE][HCConstants.STYLE][HCConstants.FONT_SIZE] = size;\n      this.highchartsInstance[HCConstants.VAXIS][index].update(highchartsJSON[HCConstants.VAXIS][index]);\n    };\n\n    HighChartsFramework.prototype.updateVtitleFontColor = function (color, index) {\n      index = Number(index);\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      highchartsJSON[HCConstants.VAXIS][index][HCConstants.TITLE][HCConstants.STYLE][HCConstants.FONT_COLOR] = color;\n      this.highchartsInstance[HCConstants.VAXIS][index].update(highchartsJSON[HCConstants.VAXIS][index]);\n    };\n\n    HighChartsFramework.prototype.updateVtitleFontWeight = function (fontWeight, index) {\n      index = Number(index);\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      highchartsJSON[HCConstants.VAXIS][index][HCConstants.TITLE][HCConstants.STYLE][HCConstants.FONT_WEIGHT] = fontWeight;\n      this.highchartsInstance[HCConstants.VAXIS][index].update(highchartsJSON[HCConstants.VAXIS][index]);\n    };\n\n    HighChartsFramework.prototype.updateVtitleFontStyle = function (fontStyle, index) {\n      index = Number(index);\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      highchartsJSON[HCConstants.VAXIS][index][HCConstants.TITLE][HCConstants.STYLE][HCConstants.FONT_STYLE] = fontStyle;\n      this.highchartsInstance[HCConstants.VAXIS][index].update(highchartsJSON[HCConstants.VAXIS][index]);\n    };\n\n    HighChartsFramework.prototype.updateVAxisLabelsEnbaled = function (isEnabled, index) {\n      index = Number(index);\n      this.highchartsInstance[HCConstants.VAXIS][index].update({\n        labels: {\n          enabled: isEnabled\n        }\n      });\n    };\n\n    HighChartsFramework.prototype.updateVLabelsFontSize = function (size, index) {\n      index = Number(index);\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      highchartsJSON[HCConstants.VAXIS][index][HCConstants.LABELS][HCConstants.STYLE][HCConstants.FONT_SIZE] = size;\n      this.highchartsInstance[HCConstants.VAXIS][index].update(highchartsJSON[HCConstants.VAXIS][index]);\n    };\n\n    HighChartsFramework.prototype.updateVLabelsFontColor = function (color, index) {\n      index = Number(index);\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      highchartsJSON[HCConstants.VAXIS][index][HCConstants.LABELS][HCConstants.STYLE][HCConstants.FONT_COLOR] = color;\n      this.highchartsInstance[HCConstants.VAXIS][index].update(highchartsJSON[HCConstants.VAXIS][index]);\n    };\n\n    HighChartsFramework.prototype.updateVLabelsFontWeight = function (fontWeight, index) {\n      index = Number(index);\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      highchartsJSON[HCConstants.VAXIS][index][HCConstants.LABELS][HCConstants.STYLE][HCConstants.FONT_WEIGHT] = fontWeight;\n      this.highchartsInstance[HCConstants.VAXIS][index].update(highchartsJSON[HCConstants.VAXIS][index]);\n    };\n\n    HighChartsFramework.prototype.updateVLabelsFontStyle = function (fontStyle, index) {\n      index = Number(index);\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      highchartsJSON[HCConstants.VAXIS][index][HCConstants.LABELS][HCConstants.STYLE][HCConstants.FONT_STYLE] = fontStyle;\n      this.highchartsInstance[HCConstants.VAXIS][index].update(highchartsJSON[HCConstants.VAXIS][index]);\n    }; //stack labels\n\n\n    HighChartsFramework.prototype.updateVStackLabelsEnbaled = function (isEnabled, index) {\n      index = Number(index);\n      var obj = {};\n      obj[HCConstants.STACK_LABELS] = {};\n      obj[HCConstants.STACK_LABELS][HCConstants.ENABLED] = isEnabled;\n      this.highchartsInstance[HCConstants.VAXIS][index].update(obj); //this.highchartsInstance[HCConstants.VAXIS][index].update({labels : {enabled : isEnabled}})\n    };\n\n    HighChartsFramework.prototype.updateVStackLabelsFontSize = function (size, index) {\n      index = Number(index);\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      highchartsJSON[HCConstants.VAXIS][index][HCConstants.STACK_LABELS][HCConstants.STYLE][HCConstants.FONT_SIZE] = size;\n      this.highchartsInstance[HCConstants.VAXIS][index].update(highchartsJSON[HCConstants.VAXIS][index]);\n    };\n\n    HighChartsFramework.prototype.updateVStackLabelsFontColor = function (color, index) {\n      index = Number(index);\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      highchartsJSON[HCConstants.VAXIS][index][HCConstants.STACK_LABELS][HCConstants.STYLE][HCConstants.FONT_COLOR] = color;\n      this.highchartsInstance[HCConstants.VAXIS][index].update(highchartsJSON[HCConstants.VAXIS][index]);\n    };\n\n    HighChartsFramework.prototype.updateVStackLabelsFontWeight = function (fontWeight, index) {\n      index = Number(index);\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      highchartsJSON[HCConstants.VAXIS][index][HCConstants.STACK_LABELS][HCConstants.STYLE][HCConstants.FONT_WEIGHT] = fontWeight;\n      this.highchartsInstance[HCConstants.VAXIS][index].update(highchartsJSON[HCConstants.VAXIS][index]);\n    };\n\n    HighChartsFramework.prototype.updateVStackLabelsFontStyle = function (fontStyle, index) {\n      index = Number(index);\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      highchartsJSON[HCConstants.VAXIS][index][HCConstants.STACK_LABELS][HCConstants.STYLE][HCConstants.FONT_STYLE] = fontStyle;\n      this.highchartsInstance[HCConstants.VAXIS][index].update(highchartsJSON[HCConstants.VAXIS][index]);\n    };\n\n    HighChartsFramework.prototype.updateVAxisType = function (type, index) {\n      index = Number(index);\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      highchartsJSON[HCConstants.VAXIS][index][HCConstants.SCALE_TYPE] = type;\n      this.highchartsInstance[HCConstants.VAXIS][index].update(highchartsJSON[HCConstants.VAXIS][index]);\n    };\n\n    HighChartsFramework.prototype.updateVAxisPrefix = function (prefix, index) {\n      index = Number(index);\n      var hJSON = this.highchartsInstance.userOptions;\n      HCPropHandler.handleYAxisPrefix(this.type, index, prefix, hJSON);\n      this.highchartsInstance[HCConstants.VAXIS][index].update(hJSON[HCConstants.VAXIS][index]);\n    };\n\n    HighChartsFramework.prototype.updateVAxisSuffix = function (suffix, index) {\n      index = Number(index);\n      var hJSON = this.highchartsInstance.userOptions;\n      HCPropHandler.handleYAxisSuffix(this.type, index, suffix, hJSON);\n      this.highchartsInstance[HCConstants.VAXIS][index].update(hJSON[HCConstants.VAXIS][index]);\n    };\n\n    HighChartsFramework.prototype.updateVAxisMin = function (min, index) {\n      index = Number(index);\n      var hJSON = this.highchartsInstance.userOptions;\n      HCPropHandler.handleYAxisMin(index, min, hJSON);\n      this.highchartsInstance[HCConstants.VAXIS][index].update(hJSON[HCConstants.VAXIS][index]);\n    };\n\n    HighChartsFramework.prototype.updateVAxisMax = function (max, index) {\n      index = Number(index);\n      var hJSON = this.highchartsInstance.userOptions;\n      HCPropHandler.handleYAxisMax(index, max, hJSON);\n      this.highchartsInstance[HCConstants.VAXIS][index].update(hJSON[HCConstants.VAXIS][index]);\n    };\n\n    HighChartsFramework.prototype.updateVAxisInterval = function (interval, index) {\n      index = Number(index);\n      var hJSON = this.highchartsInstance.userOptions;\n      HCPropHandler.handleYAxisInterval(index, interval, hJSON);\n      this.highchartsInstance[HCConstants.VAXIS][index].update(hJSON[HCConstants.VAXIS][index]);\n    };\n\n    HighChartsFramework.prototype.updateVAxisBaseValue = function (baseValue, index) {\n      index = Number(index);\n      var hJSON = this.highchartsInstance.userOptions;\n      HCPropHandler.handleYAxisBaseValue(baseValue, index, hJSON);\n      this.highchartsInstance.update(hJSON);\n    };\n\n    HighChartsFramework.prototype.updateVAxisPLValue = function (value, vIndex, plIndex) {\n      vIndex = Number(vIndex);\n      var hJSON = this.highchartsInstance.userOptions;\n      HCPropHandler.handleYAxisPLValue(value, vIndex, plIndex, hJSON);\n      this.highchartsInstance[HCConstants.VAXIS][vIndex].update(hJSON[HCConstants.VAXIS][vIndex]);\n    };\n\n    HighChartsFramework.prototype.updateVAxisPLText = function (text, vIndex, plIndex) {\n      vIndex = Number(vIndex);\n      var hJSON = this.highchartsInstance.userOptions;\n      HCPropHandler.handleYAxisPLText(text, vIndex, plIndex, hJSON);\n      this.highchartsInstance[HCConstants.VAXIS][vIndex].update(hJSON[HCConstants.VAXIS][vIndex]);\n    };\n\n    HighChartsFramework.prototype.updateVAxisPLFontWeight = function (weight, vIndex, plIndex) {\n      vIndex = Number(vIndex);\n      var hJSON = this.highchartsInstance.userOptions;\n      HCPropHandler.handleYAxisPLFontWeight(weight, vIndex, plIndex, hJSON);\n      this.highchartsInstance[HCConstants.VAXIS][vIndex].update(hJSON[HCConstants.VAXIS][vIndex]);\n    };\n\n    HighChartsFramework.prototype.updateVAxisPLFontStyle = function (style, vIndex, plIndex) {\n      vIndex = Number(vIndex);\n      var hJSON = this.highchartsInstance.userOptions;\n      HCPropHandler.handleYAxisPLFontStyle(style, vIndex, plIndex, hJSON);\n      this.highchartsInstance[HCConstants.VAXIS][vIndex].update(hJSON[HCConstants.VAXIS][vIndex]);\n    };\n\n    HighChartsFramework.prototype.updateVAxisPLFontSize = function (size, vIndex, plIndex) {\n      vIndex = Number(vIndex);\n      var hJSON = this.highchartsInstance.userOptions;\n      HCPropHandler.handleYAxisPLFontSize(size, vIndex, plIndex, hJSON);\n      this.highchartsInstance[HCConstants.VAXIS][vIndex].update(hJSON[HCConstants.VAXIS][vIndex]);\n    };\n\n    HighChartsFramework.prototype.updateVAxisPLFontColor = function (color, vIndex, plIndex) {\n      vIndex = Number(vIndex);\n      var hJSON = this.highchartsInstance.userOptions;\n      HCPropHandler.handleYAxisPLFontColor(color, vIndex, plIndex, hJSON);\n      this.highchartsInstance[HCConstants.VAXIS][vIndex].update(hJSON[HCConstants.VAXIS][vIndex]);\n    };\n\n    HighChartsFramework.prototype.updateVAxisPLColor = function (color, vIndex, plIndex) {\n      vIndex = Number(vIndex);\n      var hJSON = this.highchartsInstance.userOptions;\n      HCPropHandler.handleYAxisPLColor(color, vIndex, plIndex, hJSON);\n      this.highchartsInstance[HCConstants.VAXIS][vIndex].update(hJSON[HCConstants.VAXIS][vIndex]);\n    };\n\n    HighChartsFramework.prototype.updateVAxisPLType = function (type, vIndex, plIndex) {\n      vIndex = Number(vIndex);\n      var hJSON = this.highchartsInstance.userOptions;\n      HCPropHandler.handleYAxisPLType(type, vIndex, plIndex, hJSON);\n      this.highchartsInstance[HCConstants.VAXIS][vIndex].update(hJSON[HCConstants.VAXIS][vIndex]);\n    };\n\n    HighChartsFramework.prototype.addVAxisPlotLine = function (index, plOptions) {\n      index = Number(index);\n      var hJSON = this.highchartsInstance.userOptions;\n      HCPropHandler.addVAxisPlotline(index, plOptions, hJSON, this.chartType);\n      this.highchartsInstance[HCConstants.VAXIS][index].update(hJSON[HCConstants.VAXIS][index]);\n    };\n\n    HighChartsFramework.prototype.removeVAxisPlotLine = function (vIndex, plIndex) {\n      vIndex = Number(vIndex);\n      var hJSON = this.highchartsInstance.userOptions;\n      HCPropHandler.removeVAxisPlotLine(vIndex, plIndex, hJSON);\n      this.highchartsInstance[HCConstants.VAXIS][vIndex].update(hJSON[HCConstants.VAXIS][vIndex]);\n    };\n\n    HighChartsFramework.prototype.updateMultipleYAxisStatus = function (status, vAxisProperties) {\n      var hJSON = this.highchartsInstance.userOptions;\n      HCPropHandler.handleMultipleVAxis(status, vAxisProperties, hJSON, this.chartType); //this.highchartsInstance.update(hJSON);\n\n      this.renderChart(hJSON); // var vAxisLen = hJSON[HCConstants.VAXIS] ? hJSON[HCConstants.VAXIS].length : 0;\n      // for(var i =0; i < vAxisLen; i++) {\n      //     this.highchartsInstance[HCConstants.VAXIS][i].update(hJSON[HCConstants.VAXIS][i]);\n      // }\n    }; // H Axis GridLines - No getter need to add if needed\n\n\n    HighChartsFramework.prototype.updateHAxisMajorGLStatus = function (index, status) {\n      index = Number(index);\n      var hJSON = this.highchartsInstance.userOptions;\n      HCPropHandler.handleHAxisMajorGLStatus(index, status, hJSON);\n      this.highchartsInstance[HCConstants.HAXIS][index].update(hJSON[HCConstants.HAXIS][index]);\n    };\n\n    HighChartsFramework.prototype.updateHAxisMajorGLCount = function (index, count) {\n      index = Number(index);\n      var hJSON = this.highchartsInstance.userOptions;\n      HCPropHandler.handleHAxisMajorGLCount(index, count, hJSON);\n      this.highchartsInstance[HCConstants.HAXIS][index].update(hJSON[HCConstants.HAXIS][index]);\n    };\n\n    HighChartsFramework.prototype.updateHAxisMajorGLType = function (index, type) {\n      index = Number(index);\n      var hJSON = this.highchartsInstance.userOptions;\n      HCPropHandler.handleHAxisMajorGLType(index, type, hJSON);\n      this.highchartsInstance[HCConstants.HAXIS][index].update(hJSON[HCConstants.HAXIS][index]);\n    };\n\n    HighChartsFramework.prototype.updateHAxisMajorGLColor = function (index, color) {\n      index = Number(index);\n      var hJSON = this.highchartsInstance.userOptions;\n      HCPropHandler.handleHAxisMajorGLColor(index, color, hJSON);\n      this.highchartsInstance[HCConstants.HAXIS][index].update(hJSON[HCConstants.HAXIS][index]);\n    };\n\n    HighChartsFramework.prototype.updateHAxisMinorGLStatus = function (index, status) {\n      index = Number(index);\n      var hJSON = this.highchartsInstance.userOptions;\n      HCPropHandler.handleHAxisMinorGLStatus(index, status, hJSON);\n      this.highchartsInstance[HCConstants.HAXIS][index].update(hJSON[HCConstants.HAXIS][index]);\n    };\n\n    HighChartsFramework.prototype.updateHAxisMinorGLType = function (index, type) {\n      index = Number(index);\n      var hJSON = this.highchartsInstance.userOptions;\n      HCPropHandler.handleHAxisMinorGLType(index, type, hJSON);\n      this.highchartsInstance[HCConstants.HAXIS][index].update(hJSON[HCConstants.HAXIS][index]);\n    };\n\n    HighChartsFramework.prototype.updateHAxisMinorGLColor = function (index, color) {\n      index = Number(index);\n      var hJSON = this.highchartsInstance.userOptions;\n      HCPropHandler.handleHAxisMinorGLColor(index, color, hJSON);\n      this.highchartsInstance[HCConstants.HAXIS][index].update(hJSON[HCConstants.HAXIS][index]);\n    }; //V Axis GridLines\n\n\n    HighChartsFramework.prototype.updateVAxisMajorGLStatus = function (index, status) {\n      index = Number(index);\n      var hJSON = this.highchartsInstance.userOptions;\n      HCPropHandler.handleVAxisMajorGLStatus(index, status, hJSON);\n      this.highchartsInstance[HCConstants.VAXIS][index].update(hJSON[HCConstants.VAXIS][index]);\n    };\n\n    HighChartsFramework.prototype.updateVAxisMajorGLCount = function (index, count) {\n      index = Number(index);\n      var hJSON = this.highchartsInstance.userOptions;\n      HCPropHandler.handleVAxisMajorGLCount(index, count, hJSON);\n      this.highchartsInstance[HCConstants.VAXIS][index].update(hJSON[HCConstants.VAXIS][index]);\n    };\n\n    HighChartsFramework.prototype.updateVAxisMajorGLType = function (index, type) {\n      index = Number(index);\n      var hJSON = this.highchartsInstance.userOptions;\n      HCPropHandler.handleVAxisMajorGLType(index, type, hJSON);\n      this.highchartsInstance[HCConstants.VAXIS][index].update(hJSON[HCConstants.VAXIS][index]);\n    };\n\n    HighChartsFramework.prototype.updateVAxisMajorGLColor = function (index, color) {\n      index = Number(index);\n      var hJSON = this.highchartsInstance.userOptions;\n      HCPropHandler.handleVAxisMajorGLColor(index, color, hJSON);\n      this.highchartsInstance[HCConstants.VAXIS][index].update(hJSON[HCConstants.VAXIS][index]);\n    };\n\n    HighChartsFramework.prototype.updateVAxisMinorGLStatus = function (index, status) {\n      index = Number(index);\n      var hJSON = this.highchartsInstance.userOptions;\n      HCPropHandler.handleVAxisMinorGLStatus(index, status, hJSON);\n      this.highchartsInstance[HCConstants.VAXIS][index].update(hJSON[HCConstants.VAXIS][index]);\n    };\n\n    HighChartsFramework.prototype.updateVAxisMinorGLType = function (index, type) {\n      index = Number(index);\n      var hJSON = this.highchartsInstance.userOptions;\n      HCPropHandler.handleVAxisMinorGLType(index, type, hJSON);\n      this.highchartsInstance[HCConstants.VAXIS][index].update(hJSON[HCConstants.VAXIS][index]);\n    };\n\n    HighChartsFramework.prototype.updateVAxisMinorGLColor = function (index, color) {\n      index = Number(index);\n      var hJSON = this.highchartsInstance.userOptions;\n      HCPropHandler.handleVAxisMinorGLColor(index, color, hJSON);\n      this.highchartsInstance[HCConstants.VAXIS][index].update(hJSON[HCConstants.VAXIS][index]);\n    };\n\n    HighChartsFramework.prototype.updateBackgroundColor = function (chartJSON, bg_color) {\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      HCPropHandler.handleBackgroundColor(bg_color, highchartsJSON);\n      HCJSONConvertor.convert(this.type, this.chartType, chartJSON, highchartsJSON); // Converts the input chart meta to highcharts format\n\n      HCCustomHandler.handle(this.type, this.chartType, highchartsJSON); //Handles Default Behaviour that are not exposed to users\n\n      HCSeriesPropertiesHandler.handle(this.type, chartJSON, highchartsJSON, this.chartType); // Set all the properties specific to series\n\n      this.highchartsInstance.update(highchartsJSON); // var highchartsJSON = this.highchartsInstance.userOptions;\n      // HCPropHandler.handleBackgroundColor(bg_color, highchartsJSON);\n      // this.highchartsInstance.update({chart:{backgroundColor : highchartsJSON[HCConstants.CHART][HCConstants.BACKGROUND_COLOR]}});\n    };\n\n    HighChartsFramework.prototype.updateBorderColor = function (border_color) {\n      this.highchartsInstance.update({\n        chart: {\n          borderColor: border_color\n        }\n      });\n    };\n\n    HighChartsFramework.prototype.updateGradientStatus = function (isEnabled) {\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      HCPropHandler.handleGradient(this.type, isEnabled, highchartsJSON);\n      this.highchartsInstance.update({\n        chart: {\n          backgroundColor: highchartsJSON[HCConstants.CHART][HCConstants.BACKGROUND_COLOR]\n        }\n      });\n    }; //Series properties\n\n\n    HighChartsFramework.prototype.updateDecimalsValue = function (index, decimals, dataMeta, chartMeta) {\n      var highchartsJSON = this.highchartsInstance.userOptions; //Update particular series alone - need to change\n\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      HCSeriesConstructor.construct(this.type, this.chartType, dataMeta, highchartsJSON, chartMeta);\n      this.highchartsInstance.update(highchartsJSON);\n    };\n\n    HighChartsFramework.prototype.updateSeriesColor = function (index, color) {\n      var highchartsJSON = this.highchartsInstance.userOptions; // var idx = this.type.indexOf(HCConstants.PIE) != -1 ? 0 : index;\n\n      HCPropHandler.handleSeriesColor(this.type, index, color, highchartsJSON, this.chartType);\n\n      if (this.type.indexOf(HCConstants.PIE) != -1) {\n        var seriesLen = highchartsJSON[HCConstants.SERIES] ? highchartsJSON[HCConstants.SERIES].length : 0;\n\n        for (var i = 0; i < seriesLen; i++) {\n          this.updateSeries(i, highchartsJSON[HCConstants.SERIES][i]);\n        }\n      } else {\n        this.updateSeries(index, highchartsJSON[HCConstants.SERIES][index]);\n      }\n    };\n\n    HighChartsFramework.prototype.updateDataColor = function (color, seriesIndex, dataIndex) {\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      HCPropHandler.handleDataColor(this.type, color, seriesIndex, dataIndex, highchartsJSON, this.chartType);\n\n      if (this.chartType.indexOf(ChartConstants.WEIGHTED_FUNNEL) != -1) {\n        this.updateSeries(dataIndex, highchartsJSON[HCConstants.SERIES][dataIndex]);\n      } else {\n        this.updateSeries(seriesIndex, highchartsJSON[HCConstants.SERIES][seriesIndex]);\n      }\n    };\n\n    HighChartsFramework.prototype.updateDataBorderColor = function (color, seriesIndex, dataIndex) {\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      HCPropHandler.handleDataBorderColor(this.type, color, seriesIndex, dataIndex, highchartsJSON, this.chartType);\n\n      if (this.chartType.indexOf(ChartConstants.WEIGHTED_FUNNEL) != -1) {\n        this.updateSeries(dataIndex, highchartsJSON[HCConstants.SERIES][dataIndex]);\n      } else {\n        this.updateSeries(seriesIndex, highchartsJSON[HCConstants.SERIES][seriesIndex]);\n      }\n    };\n\n    HighChartsFramework.prototype.updateTargetColor = function (index, color) {\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      HCPropHandler.handleTargetColor(this.type, index, color, highchartsJSON, this.chartType);\n      this.updateSeries(index, highchartsJSON[HCConstants.SERIES][index]);\n    };\n\n    HighChartsFramework.prototype.updateBorderColors = function (index, color) {\n      var highchartsJSON = this.highchartsInstance.userOptions; //var idx = this.type.indexOf(HCConstants.PIE) != -1 ? 0 : index;\n\n      HCPropHandler.handleBorderColor(this.type, index, color, highchartsJSON, this.chartType); // this.updateSeries(idx, highchartsJSON[HCConstants.SERIES][idx]);\n\n      if (this.type.indexOf(HCConstants.PIE) != -1) {\n        var seriesLen = highchartsJSON[HCConstants.SERIES] ? highchartsJSON[HCConstants.SERIES].length : 0;\n\n        for (var i = 0; i < seriesLen; i++) {\n          this.updateSeries(i, highchartsJSON[HCConstants.SERIES][i]);\n        }\n      } else {\n        this.updateSeries(index, highchartsJSON[HCConstants.SERIES][index]);\n      }\n    };\n\n    HighChartsFramework.prototype.updateMarkerStatus = function (index, status) {\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      HCPropHandler.handleMarkerStatus(this.type, index, status, highchartsJSON);\n      this.updateSeries(index, highchartsJSON[HCConstants.SERIES][index]);\n    };\n\n    HighChartsFramework.prototype.updateMarkerShape = function (index, shape) {\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      HCPropHandler.handleMarkerShape(this.type, index, shape, highchartsJSON);\n      this.updateSeries(index, highchartsJSON[HCConstants.SERIES][index]);\n    };\n\n    HighChartsFramework.prototype.updateMarkerSize = function (index, size) {\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      HCPropHandler.handleMarkerSize(this.type, index, size, highchartsJSON);\n      this.updateSeries(index, highchartsJSON[HCConstants.SERIES][index]);\n    };\n\n    HighChartsFramework.prototype.updateMarkerColor = function (index, color) {\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      HCPropHandler.handleMarkerColor(this.type, index, color, highchartsJSON);\n      this.updateSeries(index, highchartsJSON[HCConstants.SERIES][index]);\n    };\n\n    HighChartsFramework.prototype.upateMarkerBorderColor = function (index, borderColor) {\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      HCPropHandler.handleMarkerBorderColor(this.type, index, borderColor, highchartsJSON);\n      this.updateSeries(index, highchartsJSON[HCConstants.SERIES][index]);\n    };\n\n    HighChartsFramework.prototype.updateLineType = function (index, lineType) {\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      HCPropHandler.handleSeriesLineType(this.type, index, lineType, highchartsJSON);\n      this.updateSeries(index, highchartsJSON[HCConstants.SERIES][index]);\n    };\n\n    HighChartsFramework.prototype.updateAreaOpacity = function (index, fillOpacity) {\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      HCPropHandler.handleAreaOpacity(this.type, index, fillOpacity, highchartsJSON, this.chartType);\n      this.updateSeries(index, highchartsJSON[HCConstants.SERIES][index]);\n    };\n\n    HighChartsFramework.prototype.updateThresholdValue = function (index, value) {\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      HCPropHandler.handleSeriesThresholdValue(this.type, index, value, highchartsJSON);\n      this.updateSeries(index, highchartsJSON[HCConstants.SERIES][index]);\n    };\n\n    HighChartsFramework.prototype.updateNegativeColor = function (index, color) {\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      HCPropHandler.handleSeriesNegativeColor(this.type, index, color, highchartsJSON);\n      this.updateSeries(index, highchartsJSON[HCConstants.SERIES][index]);\n    };\n\n    HighChartsFramework.prototype.updateSortingOrder = function (index, order) {\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      HCPropHandler.handleSeriesSortingOrder(this.type, index, order, highchartsJSON); // this.updateSeries(index, highchartsJSON[HCConstants.SERIES][index]);\n\n      this.highchartsInstance.update(highchartsJSON);\n    };\n\n    HighChartsFramework.prototype.updateStartAngle = function (angle) {\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      HCPropHandler.handleStartAngle(this.type, angle, highchartsJSON, this.chartType); //Pie charts\n\n      var seriesLen = highchartsJSON[HCConstants.SERIES] ? highchartsJSON[HCConstants.SERIES].length : 0;\n\n      for (var i = 0; i < seriesLen; i++) {\n        this.updateSeries(i, highchartsJSON[HCConstants.SERIES][i]);\n      } // this.updateSeries(index, highchartsJSON[HCConstants.SERIES][index]);\n\n    };\n\n    HighChartsFramework.prototype.updateSeries = function (index, seriesObj) {\n      this.highchartsInstance[HCConstants.SERIES][index] && this.highchartsInstance[HCConstants.SERIES][index].update(seriesObj);\n    }; //Trendline\n\n\n    HighChartsFramework.prototype.updateTrendlineStatus = function (isEnabled, index) {\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      HCPropHandler.handleTrendlineStatus(this.type, index, isEnabled, highchartsJSON);\n\n      for (var i = 0; i < this.highchartsInstance[HCConstants.SERIES].length; i++) {\n        this.highchartsInstance[HCConstants.SERIES][i].remove();\n      }\n\n      for (var i = 0; i < highchartsJSON[HCConstants.SERIES].length; i++) {\n        this.highchartsInstance[HCConstants.SERIES].addSeries(highchartsJSON[HCConstants.SERIES][i]);\n      } // this.highchartsInstance.update(highchartsJSON);\n\n    };\n\n    HighChartsFramework.prototype.updateTrendlineType = function (type, index) {\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      HCPropHandler.handleTrendlineType(this.type, index, type, highchartsJSON);\n      this.highchartsInstance.update(highchartsJSON);\n    };\n\n    HighChartsFramework.prototype.updateTrendlineOrder = function (order, index) {\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      HCPropHandler.handleTrendlineOrder(this.type, index, order, highchartsJSON); // this.updateSeries(index, highchartsJSON[HCConstants.SERIES][index]);\n\n      this.highchartsInstance.update(highchartsJSON); // this.renderChart(highchartsJSON);\n    };\n\n    HighChartsFramework.prototype.updateChartSize = function (width, height) {\n      this.highchartsInstance.setSize(width, height, true);\n    }; // Tooltip\n\n\n    HighChartsFramework.prototype.updateTooltipStatus = function (isEnabled) {\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      HCPropHandler.handleTooltipStatus(this.type, isEnabled, highchartsJSON);\n      this.highchartsInstance[HCConstants.TOOLTIP].update(highchartsJSON[HCConstants.TOOLTIP]);\n    };\n\n    HighChartsFramework.prototype.updateColorTheme = function (chartJSON, theme) {\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      highchartsJSON[HCConstants.COLORS] = theme;\n      HCSeriesPropertiesHandler.handle(this.type, chartJSON, highchartsJSON, this.chartType); // Set all the properties specific to series\n      //this.highchartsInstance.update({colors: theme});\n\n      this.highchartsInstance.update(highchartsJSON);\n    };\n\n    HighChartsFramework.prototype.updateData = function (dataMeta, chartMeta) {\n      var highchartsJSON = this.highchartsInstance.userOptions;\n      var chartId = highchartsJSON[HCConstants.CHART][HCConstants.RENDER_TO];\n\n      if (this.chartType.indexOf(ChartConstants.RACEBAR) != -1) {\n        this.stop(chartId);\n      }\n\n      HCSeriesConstructor.construct(this.type, this.chartType, dataMeta, highchartsJSON, chartMeta);\n      this.highchartsInstance.update(highchartsJSON);\n    };\n\n    function getHighchartsSkeleton(type, chartType) {\n      return HCSkeletonConstructor.construct(type, chartType);\n    }\n\n    return HighChartsFramework;\n  }();\n\n  ctx.HighChartsFramework = HighChartsFramework;\n})(window || this);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/MultiFramework/HighChartsFramework.js\n");

/***/ }),

/***/ "./js/MultiFramework/ZohoFramework.js":
/*!********************************************!*\
  !*** ./js/MultiFramework/ZohoFramework.js ***!
  \********************************************/
/***/ (function() {

"use strict";
eval("/*$Id$*/\n //No I18N\n\n(function (ctx) {\n  var chartTypeToZCType = ctx.ZCMaps.chartTypeToZCType;\n  var ZCSkeletonConstructor = ctx.ZCSkeletonConstructor;\n  var ZCSeriesConstructor = ctx.ZCSeriesConstructor;\n  var ZCJSONConvertor = ctx.ZCJSONConvertor;\n  var ZCConstants = ctx.ZCConstants;\n  var C = ctx.ChartConstants;\n  var ZCCustomHandler = ctx.ZCCustomHandler;\n  var ZCPropHandler = ctx.ZCPropHandler;\n  var ZCSeriesPropertiesHandler = ctx.ZCSeriesPropertiesHandler;\n\n  var ZohoChartsFramework = function () {\n    function ZohoChartsFramework(type) {\n      this.chartType = type;\n      this.type = chartTypeToZCType[type];\n      this.zohochartsInstance = {};\n    }\n\n    ZohoChartsFramework.prototype.createChart = function (chartJSON, dataJSON) {\n      var zohochartsJSON = getZohochartsSkeleton(this.type, this.chartType); //ZCCustomHandler.handle(this.type, zohochartsJSON); //Handles Default Behaviour\n\n      ZCJSONConvertor.convert(this.type, this.chartType, chartJSON, zohochartsJSON); // Converts the input chart meta to highcharts format\n\n      ZCSeriesConstructor.construct(this.type, this.chartType, dataJSON, chartJSON, zohochartsJSON); // Constructs the series\n      //ZCSeriesPropertiesHandler.handle(this.type, chartJSON, zohochartsJSON, this.chartType); // Set all the properties specific to series\n\n      this.renderChart(chartJSON[C.CHART][C.RENDER_ID], zohochartsJSON);\n      this.afterRenderTasks(chartJSON, dataJSON, zohochartsJSON);\n    };\n\n    ZohoChartsFramework.prototype.afterRenderTasks = function (chartJSON, dataJSON, zohochartsJSON) {\n      if (this.chartType.indexOf(ChartConstants.RACEBAR) != -1) {\n        var chartId = chartJSON.chart.renderId;\n        var type = this.type; //Add play btn and slider\n\n        var img = document.createElement(\"img\");\n        var chartDiv = document.getElementById(chartId);\n        img.src = \"./images/play_button.png\";\n        img.classList.add(\"play_btn\"); //No I18N\n\n        var self = this;\n        var firstTime = true;\n        img.addEventListener('click', function (e) {\n          // console.log(\"clicked\");\n          //Play the chart\n          var chartId = chartJSON.chart.renderId;\n          var rcData = ZCRaceBarSeriesConstructor.raceChartData[chartId];\n\n          if (rcData.animating) {\n            //If animating clear the timer\n            img.src = \"./images/resume_button.png\";\n            rcData.animating = false;\n            clearInterval(rcData.timer);\n          } else {\n            rcData.animating = true;\n            rcData.timer = setInterval(function () {\n              if (rcData.currentIndex == 0) {\n                if (firstTime == true) {\n                  firstTime = false;\n                  img.src = \"./images/pause_button.png\";\n                  ZCRaceBarSeriesConstructor.updateSeries(rcData, zohochartsJSON, self.zohochartsInstance, type);\n                } else {\n                  img.src = \"./images/play_button.png\";\n                  firstTime = true;\n                  rcData.animating = false;\n                  clearInterval(rcData.timer);\n                }\n              } else {\n                img.src = \"./images/pause_button.png\";\n                ZCRaceBarSeriesConstructor.updateSeries(rcData, zohochartsJSON, self.zohochartsInstance, type);\n              }\n            }, 500);\n          }\n        });\n        setTimeout(function () {\n          chartDiv.appendChild(img);\n        }, 500);\n      }\n    };\n\n    ZohoChartsFramework.prototype.renderChart = function (id, json) {\n      try {\n        this.zohochartsInstance = new $ZC.charts(document.getElementById(id), json);\n      } catch (error) {\n        var self = this;\n        setTimeout(function () {\n          // console.log(json);\n          self.renderChart(id, json);\n        }, 100);\n      }\n    }; //Updation Code\n\n\n    ZohoChartsFramework.prototype.update = function (json) {\n      this.zohochartsInstance.update(json);\n    };\n\n    ZohoChartsFramework.prototype.updateChartType = function (type) {\n      this.type = chartTypeToZCType[type];\n    };\n\n    ZohoChartsFramework.prototype.updateTitle = function (title) {\n      var zohochartsJSON = this.zohochartsInstance.userdata;\n      zohochartsJSON[ZCConstants.CANVAS][ZCConstants.TITLE][ZCConstants.TEXT] = title;\n      this.zohochartsInstance.redraw();\n    };\n\n    ZohoChartsFramework.prototype.updateTitleFontSize = function (size) {\n      var zohochartsJSON = this.zohochartsInstance.userdata;\n      zohochartsJSON[ZCConstants.CANVAS][ZCConstants.TITLE][ZCConstants.FONT_SIZE] = size;\n      this.zohochartsInstance.redraw();\n    };\n\n    ZohoChartsFramework.prototype.updateTitleFontColor = function (color) {\n      var zohochartsJSON = this.zohochartsInstance.userdata;\n      zohochartsJSON[ZCConstants.CANVAS][ZCConstants.TITLE][ZCConstants.FONT_COLOR] = color;\n      this.zohochartsInstance.redraw();\n    };\n\n    ZohoChartsFramework.prototype.updateTitleFontWeight = function (fontWeight) {\n      var zohochartsJSON = this.zohochartsInstance.userdata;\n      zohochartsJSON[ZCConstants.CANVAS][ZCConstants.TITLE][ZCConstants.FONT_WEIGHT] = fontWeight;\n      this.zohochartsInstance.redraw();\n    };\n\n    ZohoChartsFramework.prototype.updateTitleFontStyle = function (fontStyle) {\n      var zohochartsJSON = this.zohochartsInstance.userdata;\n      zohochartsJSON[ZCConstants.CANVAS][ZCConstants.TITLE][ZCConstants.FONT_STYLE] = fontStyle;\n      this.zohochartsInstance.redraw();\n    };\n\n    ZohoChartsFramework.prototype.updateSubTitle = function (subtitle) {\n      var zohochartsJSON = this.zohochartsInstance.userdata;\n      zohochartsJSON[ZCConstants.CANVAS][ZCConstants.SUBTITLE][ZCConstants.TEXT] = subtitle;\n      this.zohochartsInstance.redraw();\n    };\n\n    ZohoChartsFramework.prototype.updateSubtitleFontSize = function (size) {\n      var zohochartsJSON = this.zohochartsInstance.userdata;\n      zohochartsJSON[ZCConstants.CANVAS][ZCConstants.SUBTITLE][ZCConstants.FONT_SIZE] = size;\n      this.zohochartsInstance.redraw();\n    };\n\n    ZohoChartsFramework.prototype.updateSubtitleFontColor = function (color) {\n      var zohochartsJSON = this.zohochartsInstance.userdata;\n      zohochartsJSON[ZCConstants.CANVAS][ZCConstants.SUBTITLE][ZCConstants.FONT_COLOR] = color;\n      this.zohochartsInstance.redraw();\n    };\n\n    ZohoChartsFramework.prototype.updateSubtitleFontWeight = function (fontWeight) {\n      var zohochartsJSON = this.zohochartsInstance.userdata;\n      zohochartsJSON[ZCConstants.CANVAS][ZCConstants.SUBTITLE][ZCConstants.FONT_WEIGHT] = fontWeight;\n      this.zohochartsInstance.redraw();\n    };\n\n    ZohoChartsFramework.prototype.updateSubtitleFontStyle = function (fontStyle) {\n      var zohochartsJSON = this.zohochartsInstance.userdata;\n      zohochartsJSON[ZCConstants.CANVAS][ZCConstants.SUBTITLE][ZCConstants.FONT_STYLE] = fontStyle;\n      this.zohochartsInstance.redraw();\n    };\n\n    ZohoChartsFramework.prototype.updateData = function (dataMeta, chartMeta) {\n      var zohochartsJSON = this.zohochartsInstance.userdata;\n      ZCSeriesConstructor.construct(this.type, this.chartType, dataMeta, chartMeta, zohochartsJSON);\n      this.zohochartsInstance.redraw();\n    };\n\n    function getZohochartsSkeleton(type, chartType) {\n      return ZCSkeletonConstructor.construct(type, chartType);\n    }\n\n    return ZohoChartsFramework;\n  }();\n\n  ctx.ZohoChartsFramework = ZohoChartsFramework;\n})(window || this);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/MultiFramework/ZohoFramework.js\n");

/***/ }),

/***/ "./js/Utils/ArraySkeletonConstructor.js":
/*!**********************************************!*\
  !*** ./js/Utils/ArraySkeletonConstructor.js ***!
  \**********************************************/
/***/ (function() {

"use strict";
eval("/*$Id$*/\n //No I18N\n\n(function (ctx) {\n  var C = ctx.ChartConstants;\n  var KL = ctx.ChartKeyList;\n  var DEFAULTS = ctx.ChartDefaults.DEFAULTS;\n  var GUtils = ctx.GeneralUtilities;\n  var ChartMaps = ctx.ChartMaps;\n\n  var ArraySkeletonConstructor = function () {\n    function getVAxisSkeleton(json, chartType) {\n      if (chartType.indexOf(C.STACKED_COL) != -1 || chartType.indexOf(C.STACKED_BAR) != -1) {\n        json[C.STACK_LABELS] = {};\n        json[C.STACK_LABELS][C.TEXT] = DEFAULTS.V_STACK_LABELS_TEXT;\n        json[C.STACK_LABELS][C.FONT_SIZE] = DEFAULTS.V_STACK_LABELS_FONT_SIZE;\n        json[C.STACK_LABELS][C.FONT_COLOR] = DEFAULTS.V_STACK_LABELS_FONT_COLOR;\n        json[C.STACK_LABELS][C.FONT_WEIGHT] = DEFAULTS.V_STACK_LABELS_FONT_WEIGHT;\n        json[C.STACK_LABELS][C.FONT_STYLE] = DEFAULTS.V_STACK_LABELS_FONT_STYLE;\n      }\n\n      json[C.SCALE_TYPE] = DEFAULTS.V_AXIS_LOG_SCALE_STATUS;\n      json[C.BASE_VALUE] = DEFAULTS.V_AXIS_LOG_SCALE_BASE;\n      json[C.PLOT_LINES] = [];\n      /* Labels */\n\n      json[C.LABELS] = {};\n      json[C.LABELS][C.ENABLED] = DEFAULTS.V_LABELS_STATUS;\n      json[C.LABELS][C.FONT_SIZE] = DEFAULTS.V_LABELS_FONT_SIZE;\n      json[C.LABELS][C.FONT_COLOR] = DEFAULTS.V_LABELS_FONT_COLOR;\n      json[C.LABELS][C.FONT_WEIGHT] = DEFAULTS.V_LABELS_FONT_WEIGHT;\n      json[C.LABELS][C.FONT_STYLE] = DEFAULTS.V_LABELS_FONT_STYLE;\n      /* Title */\n\n      json[C.TITLE] = {};\n      json[C.TITLE][C.TEXT] = DEFAULTS.V_TITLE_TEXT;\n      json[C.TITLE][C.FONT_SIZE] = DEFAULTS.V_TITLE_FONT_SIZE;\n      json[C.TITLE][C.FONT_COLOR] = DEFAULTS.V_TITLE_FONT_COLOR;\n      json[C.TITLE][C.FONT_WEIGHT] = DEFAULTS.V_TITLE_FONT_WEIGHT;\n      json[C.TITLE][C.FONT_STYLE] = DEFAULTS.V_TITLE_FONT_STYLE;\n      /* Gridlines */\n\n      json[C.GRIDLINES] = {};\n      json[C.GRIDLINES][C.MAJOR_GRIDLINE_ENABLED] = DEFAULTS.V_MAJOR_GL_STATUS;\n      json[C.GRIDLINES][C.MAJOR_GRIDLINE_COUNT] = DEFAULTS.V_MAJOR_GL_COUNT;\n      json[C.GRIDLINES][C.MAJOR_GRIDLINE_LINE_TYPE] = DEFAULTS.V_MAJOR_GL_LINE_TYPE;\n      json[C.GRIDLINES][C.MAJOR_GRIDLINE_LINE_COLOR] = DEFAULTS.V_MAJOR_GL_LINE_COLOR;\n      json[C.GRIDLINES][C.MINOR_GRIDLINE_ENABLED] = DEFAULTS.V_MINOR_GL_STATUS;\n      json[C.GRIDLINES][C.MINOR_GRIDLINE_LINE_TYPE] = DEFAULTS.V_MINOR_GL_LINE_TYPE;\n      json[C.GRIDLINES][C.MINOR_GRIDLINE_LINE_COLOR] = DEFAULTS.V_MINOR_GL_LINE_COLOR;\n      return json;\n    }\n\n    function getHAxisSkeleton(json, chartType) {\n      json[C.REVERSED] = DEFAULTS.REVERSE_HAXIS_ORDER;\n      /* Labels */\n\n      json[C.LABELS] = {};\n      json[C.LABELS][C.ENABLED] = DEFAULTS.H_LABELS_STATUS;\n      json[C.LABELS][C.FONT_SIZE] = DEFAULTS.H_LABELS_FONT_SIZE;\n      json[C.LABELS][C.FONT_COLOR] = DEFAULTS.H_LABELS_FONT_COLOR;\n      json[C.LABELS][C.FONT_WEIGHT] = DEFAULTS.H_LABELS_FONT_WEIGHT;\n      json[C.LABELS][C.FONT_STYLE] = DEFAULTS.H_LABELS_FONT_STYLE;\n      json[C.LABELS][C.STAGGER_LINES] = DEFAULTS.H_LABELS_STAGGER_LINES;\n      json[C.LABELS][C.ROTATION] = DEFAULTS.H_LABELS_ROTATION;\n      /* Title */\n\n      json[C.TITLE] = {};\n      json[C.TITLE][C.FONT_SIZE] = DEFAULTS.H_TITLE_FONT_SIZE;\n      json[C.TITLE][C.FONT_COLOR] = DEFAULTS.H_TITLE_FONT_COLOR;\n      json[C.TITLE][C.FONT_WEIGHT] = DEFAULTS.H_TITLE_FONT_WEIGHT;\n      json[C.TITLE][C.FONT_STYLE] = DEFAULTS.H_TITLE_FONT_STYLE;\n      /* Gridlines */\n\n      json[C.GRIDLINES] = {};\n\n      if (chartType.indexOf(C.SCATTER) != -1) {\n        json[C.GRIDLINES][C.MAJOR_GRIDLINE_ENABLED] = DEFAULTS.SCATTER_H_MAJOR_GL_STATUS;\n      } else {\n        json[C.GRIDLINES][C.MAJOR_GRIDLINE_ENABLED] = DEFAULTS.H_MAJOR_GL_STATUS;\n      }\n\n      json[C.GRIDLINES][C.MAJOR_GRIDLINE_COUNT] = DEFAULTS.H_MAJOR_GL_COUNT;\n      json[C.GRIDLINES][C.MAJOR_GRIDLINE_LINE_TYPE] = DEFAULTS.H_MAJOR_GL_LINE_TYPE;\n      json[C.GRIDLINES][C.MAJOR_GRIDLINE_LINE_COLOR] = DEFAULTS.H_MAJOR_GL_LINE_COLOR;\n      json[C.GRIDLINES][C.MINOR_GRIDLINE_ENABLED] = DEFAULTS.H_MINOR_GL_STATUS;\n      json[C.GRIDLINES][C.MINOR_GRIDLINE_LINE_TYPE] = DEFAULTS.H_MINOR_GL_LINE_TYPE;\n      json[C.GRIDLINES][C.MINOR_GRIDLINE_LINE_COLOR] = DEFAULTS.H_MINOR_GL_LINE_COLOR;\n      return json;\n    }\n\n    function getPlotLinesSkeleton(json, chartType) {\n      /* Labels */\n      json[C.LABEL] = {};\n      json[C.LABEL][C.FONT_SIZE] = DEFAULTS.PLOTLINES_FONT_SIZE;\n      json[C.LABEL][C.FONT_COLOR] = DEFAULTS.PLOTLINES_FONT_COLOR;\n      json[C.LABEL][C.FONT_WEIGHT] = DEFAULTS.PLOTLINES_FONT_WEIGHT;\n      json[C.LABEL][C.FONT_STYLE] = DEFAULTS.PLOTLINES_FONT_STYLE;\n      json[C.LABEL][C.LINE_COLOR] = DEFAULTS.PLOTLINES_LINE_COLOR; // Set First Series Color. Should be handled in Highcharts side\n\n      json[C.LABEL][C.LINE_TYPE] = DEFAULTS.PLOTLINES_LINE_TYPE;\n      return json;\n    }\n\n    function setDatalabel(json, chartType) {\n      json[C.DATALABELS] || (json[C.DATALABELS] = {});\n    }\n\n    function setDatalabelStatus(json, chartType) {\n      setDatalabel(json, chartType);\n\n      if (GUtils.isPieSeries(chartType)) {\n        json[C.DATALABELS][C.ENABLED] = DEFAULTS.PIE_DATALABEL_STATUS;\n      } else {\n        json[C.DATALABELS][C.ENABLED] = DEFAULTS.DATALABEL_STATUS;\n      }\n    }\n\n    function setDatalabelFontSize(json, chartType) {\n      setDatalabel(json, chartType);\n      json[C.DATALABELS][C.FONT_SIZE] = DEFAULTS.DATALABEL_FONT_SIZE;\n    }\n\n    function setDatalabelFontStyle(json, chartType) {\n      setDatalabel(json, chartType);\n      json[C.DATALABELS][C.FONT_STYLE] = DEFAULTS.DATALABEL_FONT_STYLE;\n    }\n\n    function setDatalabelFontWeight(json, chartType) {\n      setDatalabel(json, chartType);\n      json[C.DATALABELS][C.FONT_WEIGHT] = DEFAULTS.DATALABEL_FONT_WEIGHT;\n    }\n\n    function setDatalabelFontColor(json, chartType) {\n      setDatalabel(json, chartType);\n      json[C.DATALABELS][C.FONT_COLOR] = DEFAULTS.DATALABEL_FONT_COLOR;\n    }\n\n    function setDatalabelPosition(json, chartType) {\n      setDatalabel(json, chartType);\n      json[C.DATALABELS][C.POSITION] = DEFAULTS.DATALABEL_POSITION;\n    }\n\n    function setDatalabelFormat(json, chartType) {\n      setDatalabel(json, chartType);\n\n      if (GUtils.isPieSeries(chartType)) {\n        json[C.DATALABELS][C.FORMAT] = DEFAULTS.PIE_DATALABEL_FORMAT;\n      } else {\n        json[C.DATALABELS][C.FORMAT] = DEFAULTS.DATALABEL_FORMAT;\n      }\n    }\n\n    function setBorderColor(json, chartType) {\n      json[C.BORDER_COLOR] = DEFAULTS.DEFAULT_BORDER;\n    }\n\n    function setNegativeColor(json, chartType) {\n      json[C.NEGATIVE_COLOR] = DEFAULTS.NEGATIVE_COLOR;\n    }\n\n    function setMarkerStatus(json, chartType) {\n      json[C.MARKER_STATUS] = DEFAULTS.MARKER_STATUS;\n    }\n\n    function setMarkerSize(json, chartType) {\n      json[C.MARKER_SIZE] = DEFAULTS.MARKER_SIZE;\n    }\n\n    function setMarkerShape(json, chartType) {\n      json[C.MARKER_SHAPE] = DEFAULTS.MARKER_SHAPE;\n    }\n\n    function setMarkerColor(json, chartType) {\n      json[C.MARKER_COLOR] = DEFAULTS.MARKER_FILL_COLOR;\n    }\n\n    function setMarkerLineColor(json, chartType) {\n      json[C.MARKER_BORDER_COLOR] = DEFAULTS.MARKER_LINE_COLOR;\n    }\n\n    function setLineType(json, chartType) {\n      json[C.LINE_TYPE] = DEFAULTS.LINE_TYPE;\n    }\n\n    function setStartAngle(json, chartType) {\n      if (GUtils.isSemiType(chartType)) {\n        json[C.START_ANGLE] = DEFAULTS.SEMI_PIE_START_ANGLE;\n      } else {\n        json[C.START_ANGLE] = DEFAULTS.PIE_START_ANGLE;\n      }\n    }\n\n    function setAreaOpacity(json, chartType) {\n      json[C.AREA_OPACITY] = DEFAULTS.FILL_OPACITY;\n    }\n\n    function setSortOrder(json, chartType) {\n      json[C.SORT_ORDER] = DEFAULTS.SORT_ORDER;\n    }\n\n    function setDataProperties(json, chartType) {\n      json[C.DATA_PROPERTIES] = [];\n    }\n\n    function setTargetOptions(json, chartType) {\n      json[C.TARGET_OPTIONS] || (json[C.TARGET_OPTIONS] = {});\n    }\n\n    function setTargetColor(json, chartType) {\n      setTargetOptions(json, chartType);\n      json[C.TARGET_OPTIONS][C.COLOR] = DEFAULTS.DEFAULT_TARGET_COLOR;\n    }\n\n    function getSeriesPropertiesSkeleton(json, chartType) {\n      json[C.TRENDLINE] = {};\n      var keys = ChartMaps.chartTypeToSeriesKeys[chartType];\n\n      for (var i = 0; i < keys.length; i++) {\n        if (keyToFunction[keys[i]]) {\n          keyToFunction[keys[i]](json, chartType);\n        }\n      }\n\n      return json;\n    }\n\n    var keyToFunction = {};\n    keyToFunction[KL.VAXIS] = getVAxisSkeleton;\n    keyToFunction[KL.HAXIS] = getHAxisSkeleton;\n    keyToFunction[KL.PLOT_LINES] = getPlotLinesSkeleton;\n    keyToFunction[KL.SERIES_PROPERTIES] = getSeriesPropertiesSkeleton;\n    keyToFunction[KL.DATALABEL] = setDatalabel;\n    keyToFunction[KL.DATALABEL_ENABLED] = setDatalabelStatus;\n    keyToFunction[KL.DATALABEL_FONT_STYLE] = setDatalabelFontStyle;\n    keyToFunction[KL.DATALABEL_FONT_WEIGHT] = setDatalabelFontWeight;\n    keyToFunction[KL.DATALABEL_FONT_SIZE] = setDatalabelFontSize;\n    keyToFunction[KL.DATALABEL_FONT_COLOR] = setDatalabelFontColor;\n    keyToFunction[KL.DATALABEL_POSITION] = setDatalabelPosition;\n    keyToFunction[KL.DATALABEL_FORMAT] = setDatalabelFormat;\n    keyToFunction[KL.NEGATIVE_COLOR] = setNegativeColor;\n    keyToFunction[KL.SERIES_BORDER_COLOR] = setBorderColor;\n    keyToFunction[KL.MARKER_STATUS] = setMarkerStatus;\n    keyToFunction[KL.MARKER_SHAPE] = setMarkerShape;\n    keyToFunction[KL.MARKER_SIZE] = setMarkerSize;\n    keyToFunction[KL.MARKER_COLOR] = setMarkerColor;\n    keyToFunction[KL.MARKER_BORDER_COLOR] = setMarkerLineColor;\n    keyToFunction[KL.LINE_TYPE] = setLineType;\n    keyToFunction[KL.AREA_OPACITY] = setAreaOpacity;\n    keyToFunction[KL.START_ANGLE] = setStartAngle;\n    keyToFunction[KL.SORT_ORDER] = setSortOrder;\n    keyToFunction[KL.DATA_PROPERTIES] = setDataProperties;\n    keyToFunction[KL.TARGET_OPTIONS] = setTargetOptions;\n    keyToFunction[KL.TARGET_COLOR] = setTargetColor;\n    return {\n      get: function get(key, chartType) {\n        return keyToFunction[key]({}, chartType);\n      }\n    };\n  }();\n\n  ctx.ArraySkeletonConstructor = ArraySkeletonConstructor;\n})(window || this);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/Utils/ArraySkeletonConstructor.js\n");

/***/ }),

/***/ "./js/Utils/ChartConstants.js":
/*!************************************!*\
  !*** ./js/Utils/ChartConstants.js ***!
  \************************************/
/***/ (function() {

"use strict";
eval("/*$Id$*/\n //No I18N\n\n(function (ctx) {\n  var ChartConstants = ctx.ChartConstants = {}; //Chart Controller Chart Map keys\n\n  ChartConstants.CHART_META_OBJECT = \"meta\"; //No I18N\n\n  ChartConstants.FRAMEWORK_OBJECT = \"framework\"; //No I18N\n  //Data Meta JSON keys\n\n  ChartConstants.DATA = \"data\"; //No I18N\n\n  ChartConstants.IS_CONSTRUCTED = \"isConstructed\"; //No I18N\n\n  ChartConstants.SERIES_DATA = \"seriesData\"; //No I18N\n\n  ChartConstants.CATEGORIES = \"categories\"; //No I18N\n\n  ChartConstants.FRAMEWORK_TYPE = \"frameworkType\"; //No I18N\n\n  ChartConstants.PARSE_DIRECTION = \"parse\"; //No I18N\n\n  ChartConstants.HAS_HEADER_COL = \"hasHeaderCol\"; //No I18N\n\n  ChartConstants.HAS_HEADER_ROW = \"hasHeaderRow\"; //No I18N\n\n  ChartConstants.PARSE_DIRECTION_HORIZONTAL = \"horizontal\"; //No I18N\n\n  ChartConstants.PARSE_DIRECTION_VERTICAL = \"vertical\"; //No I18N\n\n  ChartConstants.SERIES_INFO = \"series_info\"; //No I18N\n\n  ChartConstants.HEADER_ROW_TYPE = \"headerRowType\"; //No I18N\n\n  ChartConstants.HEADER_COL_TYPE = \"headerColType\"; //No I18N\n\n  ChartConstants.DATA_SERIES_TYPES = \"dataSeriesTypes\"; //No I18N\n\n  ChartConstants.DATA_SERIES_PROPERTIES = \"dataSeriesProperties\"; //No I18N\n\n  ChartConstants.SERIES_INDICES = \"series_indices\"; //No I18N\n\n  ChartConstants.BUBBLE_GROUPING = \"bubbleGrouping\"; //No I18N\n\n  ChartConstants.ACTUAL_INDEX = \"actual_index\"; //No I18N\n\n  ChartConstants.TARGET_INDEX = \"target_index\"; //No I18N\n\n  ChartConstants.MILLI_SECONDS = \"milli_seconds\"; //No I18N\n\n  ChartConstants.FORMAT = \"format\"; //No I18N\n\n  ChartConstants.HEADER_COLUMNS = \"headerColumns\"; //No I18N\n\n  ChartConstants.HEADER_ROWS = \"headerRows\"; //No I18N\n\n  ChartConstants.HAS_HEADER = \"hasHeader\"; // No I18N\n\n  ChartConstants.HEADERS = \"headers\"; //No I18N\n\n  ChartConstants.DATA_ARRAY_INFO = \"dataArrayInfo\"; //No I18N\n\n  ChartConstants.DATA_TYPE = \"type\"; //No I18N\n\n  ChartConstants.AUTO_FILL = \"autofill\"; //No I18N\n  //Supported Datatypes\n\n  ChartConstants.STRING = \"string\"; //No I18N\n\n  ChartConstants.NUMBER = \"number\"; //No I18N\n\n  ChartConstants.INTEGER = \"integer\"; //No I18N\n\n  ChartConstants.DATE = \"date\"; //No I18N\n  //Chart Meta JSON\n\n  ChartConstants.CHART = \"chart\"; //No I18N\n\n  ChartConstants.WIDTH = \"width\"; //No I18N\n\n  ChartConstants.HEIGHT = \"height\"; //No I18N\n\n  ChartConstants.RENDER_ID = \"renderId\"; //No I18N\n\n  ChartConstants.TYPE = \"type\"; //No I18N\n\n  ChartConstants.INVERTED = \"inverted\"; //No I18N\n\n  ChartConstants.BORDER_COLOR = \"border_color\"; //No I18N\n\n  ChartConstants.BACKGROUND_COLOR = \"bg_color\"; //No I18N\n\n  ChartConstants.GRADIENT = \"gradient\"; //No I18N\n\n  ChartConstants.CAPTION = \"caption\"; //No I18N\n\n  ChartConstants.TITLE = \"title\"; //No I18N\n\n  ChartConstants.TEXT = \"text\"; //No I18N\n\n  ChartConstants.FONT_FAMILY = \"fontFamily\"; //No I18N\n\n  ChartConstants.FONT_STYLE = \"fontStyle\"; //No I18N\n\n  ChartConstants.FONT_COLOR = \"fontColor\"; //No I18N\n\n  ChartConstants.FONT_SIZE = \"fontSize\"; //No I18N\n\n  ChartConstants.FONT_WEIGHT = \"fontWeight\"; //No I18N\n\n  ChartConstants.SUBTITLE = \"subtitle\"; //No I18N\n\n  ChartConstants.LEGEND = \"legend\"; //No I18N\n\n  ChartConstants.LEGEND_HALIGN = \"hAlign\"; //No I18N\n\n  ChartConstants.LEGEND_VALIGN = \"vAlign\"; //No I18N\n\n  ChartConstants.DATALABELS = \"datalabels\"; //No I18N\n\n  ChartConstants.FORMAT = \"format\"; //No I18N\n\n  ChartConstants.POSITION = \"position\"; //No I18N\n\n  ChartConstants.ENABLED = \"enabled\"; //No I18N\n\n  ChartConstants.HAXIS = \"h_axis\"; //No I18N\n\n  ChartConstants.VAXIS = \"v_axis\"; //No I18N\n\n  ChartConstants.LABELS = \"labels\"; //No I18N\n\n  ChartConstants.COLORS = \"colors\"; //No I18N\n\n  ChartConstants.LINE_COLOR = \"line_color\"; //No I18N\n\n  ChartConstants.MARKERS = \"markers\"; //No I18N\n\n  ChartConstants.PLOTOPTIONS = \"plotOptions\"; //No I18N\n\n  ChartConstants.ANIMATION = \"animation\"; //No I18N\n\n  ChartConstants.SERIES_PROPERTIES = \"series_properties\"; //No I18N\n\n  ChartConstants.THRESHOLD = \"threshold\"; //No I18N\n\n  ChartConstants.NEGATIVE_COLOR = \"negativeColor\"; //No I18N\n\n  ChartConstants.SERIES_COLOR = \"color\"; //No I18N\n\n  ChartConstants.BORDER_COLOR = \"border_color\"; //No I18N\n\n  ChartConstants.MARKER_STATUS = \"marker_status\"; //No I18N\n\n  ChartConstants.MARKER_SHAPE = \"marker_shape\"; //No I18N\n\n  ChartConstants.MARKER_SIZE = \"marker_size\"; //No I18N\n\n  ChartConstants.MARKER_COLOR = \"marker_color\"; //No I18N\n\n  ChartConstants.MARKER_BORDER_COLOR = \"marker_border_color\"; //No I18N\n\n  ChartConstants.LINE_TYPE = \"line_type\"; //No I18N\n\n  ChartConstants.SCALE_TYPE = \"type\"; //No I18N\n\n  ChartConstants.PREFIX = \"prefix\"; //No I18N\n\n  ChartConstants.SUFFIX = \"suffix\"; //No I18N\n\n  ChartConstants.PLOT_LINES = \"plotLines\"; //No I18N\n\n  ChartConstants.LABEL = \"label\"; //No I18N\n\n  ChartConstants.VALUE = \"value\"; //No I18N\n\n  ChartConstants.MIN = \"min\"; //No I18N\n\n  ChartConstants.MAX = \"max\"; //No I18N\n\n  ChartConstants.TICK_INTERVAL = \"tick_interval\"; //No I18N\n\n  ChartConstants.BASE_VALUE = \"base_value\"; //No I18N\n\n  ChartConstants.STAGGER_LINES = \"stagger_lines\"; //No I18N\n\n  ChartConstants.ROTATION = \"rotation\"; //No I18N\n\n  ChartConstants.REVERSED = \"reversed\"; //No I18N\n\n  ChartConstants.VISIBLE = \"visible\"; //No I18N\n\n  ChartConstants.OPPOSITE = \"opposite\"; //No I18N\n\n  ChartConstants.GRIDLINES = \"gridLines\"; //No I18N\n\n  ChartConstants.MAJOR_GRIDLINE_ENABLED = \"majorGridLineEnabled\"; //No I18N\n\n  ChartConstants.MAJOR_GRIDLINE_COUNT = \"majorGridLineCount\"; //No I18N\n\n  ChartConstants.MAJOR_GRIDLINE_LINE_TYPE = \"majorGridLineLineType\"; //No I18N\n\n  ChartConstants.MAJOR_GRIDLINE_LINE_COLOR = \"majorGridLineLineColor\"; //No I18N\n\n  ChartConstants.MINOR_GRIDLINE_ENABLED = \"minorGridLineEnabled\"; //No I18N\n\n  ChartConstants.MINOR_GRIDLINE_LINE_TYPE = \"minorGridLineLineType\"; //No I18N\n\n  ChartConstants.MINOR_GRIDLINE_LINE_COLOR = \"minorGridLineLineColor\"; //No I18N\n\n  ChartConstants.START_ANGLE = \"startAngle\"; //No I18N\n\n  ChartConstants.STACK_LABELS = \"stackLabels\"; //No I18N\n\n  ChartConstants.AREA_OPACITY = \"area_opacity\"; //No I18N\n\n  ChartConstants.DONUT_TOTAL_DATALABELS = \"donutTotalDatalabels\"; //No I18N\n\n  ChartConstants.TARGET_OPTIONS = \"targetOptions\"; //No I18N\n\n  ChartConstants.COLOR = \"color\"; //No I18N\n\n  ChartConstants.BINNING_INTERVAL = \"binningInterval\"; //No I18N\n\n  ChartConstants.SORT_ORDER = \"sortOrder\"; //No I18N\n\n  ChartConstants.DURATION = \"duration\"; //No I18N\n\n  ChartConstants.DECIMALS = \"decimals\"; //No I18N\n\n  ChartConstants.DATA_INDEX = \"dataIndex\"; //No I18N\n\n  ChartConstants.ROW_HEADER_INDEX = \"row_header_index\"; //No I18N\n\n  ChartConstants.COL_HEADER_INDEX = \"col_header_index\"; //No I18N\n\n  ChartConstants.BUBBLE_GROUP = \"bubbleGroup\"; //No I18N\n\n  ChartConstants.WORDCLOUD_INDICES = \"wordCloudIndices\"; //No I18N\n\n  ChartConstants.HISTOGRAM_INDICES = \"histogramIndices\"; //No I18N\n\n  ChartConstants.RACE_CHART_INDICES = \"raceChartIndices\"; //No I18N\n\n  ChartConstants.ENABLE_CUMULATION = \"enableCumulation\"; //No I18N\n  //Tooltip\n\n  ChartConstants.TOOLTIP = \"tooltip\"; //No I18N\n  //Trendline\n\n  ChartConstants.TRENDLINE = \"trendline\"; //No I18N\n\n  ChartConstants.ORDER = \"order\"; //No I18N\n  //Chart types\n\n  ChartConstants.COL = \"col\"; //No I18N\n\n  ChartConstants.LINE = \"line\"; //No I18N\n\n  ChartConstants.SPLINE = \"spline\"; //No I18N\n\n  ChartConstants.STEP_LINE = \"stepLine\"; //No I18N\n\n  ChartConstants.PIE = \"pie\"; //No I18N\n\n  ChartConstants.SEMI_PIE = \"semiPie\"; //No I18N\n\n  ChartConstants.DONUT = \"donut\"; //No I18N\n\n  ChartConstants.SEMI_DONUT = \"semiDonut\"; //No I18N\n\n  ChartConstants.AREA = \"area\"; //No I18N\n\n  ChartConstants.AREA_SPLINE = \"areaSpline\"; //No I18N\n\n  ChartConstants.STACKED_AREA = \"stackedArea\"; //No I18N\n\n  ChartConstants.STACKED_PERCENT_AREA = \"stackedPercentArea\"; //No I18N\n\n  ChartConstants.BAR = \"bar\"; //No I18N\n\n  ChartConstants.SCATTER = \"scatter\"; //No I18N\n\n  ChartConstants.WORDCLOUD = \"wordcloud\"; //No I18N\n\n  ChartConstants.RACEBAR = \"racebar\"; //No I18N\n\n  ChartConstants.STACKED_COL = \"stackedColumn\"; //No I18N\n\n  ChartConstants.STACKED_BAR = \"stackedBar\"; //No I18N\n\n  ChartConstants.STACKED_PERCENT_COL = \"stackedPercentColumn\"; //No I18N\n\n  ChartConstants.STACKED_PERCENT_BAR = \"stackedPercentBar\"; //No I18N\n\n  ChartConstants.GROUPED_COL = \"groupedColumn\"; //No I18N\n\n  ChartConstants.GROUPED_BAR = \"groupedBar\"; //No I18N\n\n  ChartConstants.SCATTER = \"scatter\"; //No I18N\n\n  ChartConstants.SCATTER_LINE = \"scatterLine\"; //No I18N\n\n  ChartConstants.SCATTER_LINE_MARKERS = \"scatterLineMarkers\"; //No I18N\n\n  ChartConstants.BUBBLE = \"bubble\"; //No I18N\n\n  ChartConstants.FUNNEL = \"funnel\"; //No I18N\n\n  ChartConstants.WEIGHTED_FUNNEL = \"weightedFunnel\"; //No I18N\n\n  ChartConstants.BULLET_COL = \"bulletColumn\"; //No I18N\n\n  ChartConstants.BULLET_BAR = \"bulletBar\"; //No I18N\n\n  ChartConstants.HISTOGRAM = \"histogram\"; //No I18N\n\n  ChartConstants.LINE_TIME_SERIES = \"lineTimeSeries\"; //No I18N\n\n  ChartConstants.AREA_TIME_SERIES = \"areaTimeSeries\"; //No I18N\n\n  ChartConstants.COMBO = \"combo\"; //No I18N\n\n  ChartConstants.REQUIRED_FORMAT = \"requiredFormat\"; //No I18N\n\n  ChartConstants.DATA_PROPERTIES = \"dataProperties\"; //No I18N\n\n  ChartConstants.DATA_COLOR = \"color\"; //No I18N\n  //Supported Frameworks\n\n  ChartConstants.HIGHCHARTS = \"Highcharts\"; //No I18N\n\n  ChartConstants.ZOHOCHARTS = \"Zohocharts\"; //No I18N\n  //Input Type\n\n  ChartConstants.JSON = \"json\"; //No I18N\n  //Color Options\n\n  ChartConstants.NONE = \"none\"; //No I18N\n\n  ChartConstants.DEFAULT = \"default\"; //No I18N\n  //Chart Line Types\n\n  ChartConstants.DASH = \"Dash\"; //No I18N\n\n  ChartConstants.DASH_DOT = \"DashDot\"; //No I18N\n\n  ChartConstants.DOT = \"Dot\"; //No I18N\n\n  ChartConstants.LONG_DASH = \"LongDash\"; //No I18N\n\n  ChartConstants.LONG_DASH_DOT = \"LongDashDot\"; //No I18N\n\n  ChartConstants.LONG_DASH_DOT_DOT = \"LongDashDotDot\"; //No I18N\n\n  ChartConstants.SHORT_DASH = \"ShortDash\"; //No I18N\n\n  ChartConstants.SHORT_DASH_DOT = \"ShortDashDot\"; //No I18N\n\n  ChartConstants.SHORT_DASH_DOT_DOT = \"ShortDashDotDot\"; //No I18N\n\n  ChartConstants.SHORT_DOT = \"ShortDot\"; //No I18N\n\n  ChartConstants.SOLID = \"Solid\"; //No I18N\n  //Chart Markers\n\n  ChartConstants.CIRCLE = \"circle\"; //No I18N\n\n  ChartConstants.SQUARE = \"square\"; //No I18N\n\n  ChartConstants.TRIANGLE = \"triangle\"; //No I18N\n\n  ChartConstants.TRIANGLE_DOWN = \"triangle-down\"; //No I18N\n\n  ChartConstants.DIAMOND = \"diamond\"; //No I18N\n  //Datalabels\n\n  ChartConstants.AUTO = \"auto\"; //No I18N\n  //Datalabel Positon - Funnel Chart\n\n  ChartConstants.OUTSIDE = \"outside\"; //No I18N\n\n  ChartConstants.INSIDE = \"inside\"; //No I18N\n  //Datalabel Positon - Bar\n\n  ChartConstants.OUTSIDE_END = \"outside_end\"; //No I18N\n\n  ChartConstants.INSIDE_END = \"inside_end\"; //No I18N\n\n  ChartConstants.INSIDE_MIDDLE = \"inside_middle\"; //No I18N\n\n  ChartConstants.INSIDE_BASE = \"inside_base\"; //No I18N\n  //Datalabel Positon - Line\n\n  ChartConstants.TOP = \"top\"; //No I18N\n\n  ChartConstants.BOTTOM = \"bottom\"; //No I18N\n\n  ChartConstants.CENTER = \"center\"; //No I18N\n\n  ChartConstants.LEFT = \"left\"; //No I18N\n\n  ChartConstants.RIGHT = \"right\"; //No I18N\n  //Chart Formating\n\n  ChartConstants.NORMAL = \"normal\"; //No I18N\n\n  ChartConstants.BOLD = \"bold\"; //No I18N\n\n  ChartConstants.ITALIC = \"italic\"; //No I18N\n\n  ChartConstants.AUTO_COLOR = \"auto\"; //No I18N\n\n  ChartConstants.TITLE_LEFT = \"left\"; //No I18N\n\n  ChartConstants.TITLE_RIGHT = \"right\"; //No I18N\n\n  ChartConstants.TITLE_CENTER = \"center\"; //No I18N\n  //Vertical Align\n\n  ChartConstants.V_ALIGN_TOP = \"top\"; //No I18N\n\n  ChartConstants.V_ALIGN_MIDDLE = \"middle\"; //No I18N\n\n  ChartConstants.V_ALIGN_BOTTOM = \"bottom\"; //No I18N\n  //Align\n\n  ChartConstants.ALIGN_CENTER = \"center\"; //No I18N\n\n  ChartConstants.ALIGN_RIGHT = \"right\"; //No I18N\n\n  ChartConstants.ALIGN_LEFT = \"left\"; //No I18N\n  //Datalabel Fomat\n\n  ChartConstants.V = \"V\"; //No I18N\n\n  ChartConstants.L = \"L\"; //No I18N\n\n  ChartConstants.S = \"S\"; //No I18N\n\n  ChartConstants.L_V = \"L_V\"; //No I18N\n\n  ChartConstants.S_V = \"S_V\"; //No I18N\n\n  ChartConstants.L_P = \"L_P\"; //No I18N\n\n  ChartConstants.V_P = \"L_P\"; //No I18N\n\n  ChartConstants.S_P = \"S_P\"; //No I18N\n  //Trendlines\n\n  ChartConstants.LINEAR = \"linear\"; //No I18N\n\n  ChartConstants.POWER = \"power\"; //No I18N\n\n  ChartConstants.EXPONENTIAL = \"exponential\"; //No I18N\n\n  ChartConstants.LOGARITHMIC = \"logarithmic\"; //No I18N\n\n  ChartConstants.POLYNOMIAL = \"polynomial\"; //No I18N\n\n  ChartConstants.MOVING_AVERAGE = \"moving_average\"; //No I18N\n  //Sorting Types\n\n  ChartConstants.DESC = \"descending\"; //No I18N\n\n  ChartConstants.ASC = \"ascending\"; //No I18N\n  //Autofill Data\n\n  ChartConstants.INTERPOLATE = \"interpolate\"; //No I18N\n\n  ChartConstants.LAST_VALID = \"lastValid\"; //No I18N\n\n  ChartConstants.ZERO = \"zero\"; //No I18N\n\n  ChartConstants.EMPTY = \"empty\"; //No I18N\n  //Date Format\n\n  ChartConstants.AUTO_DATE = \"auto\"; //No I18N\n\n  ChartConstants.DATE = \"date\"; //No I18N\n\n  ChartConstants.MONTH = \"month\"; //No I18N\n\n  ChartConstants.YEAR = \"year\"; //No I18N\n\n  ChartConstants.MONTH_YEAR = \"month_year\"; //No I18N\n\n  ChartConstants.QUARTER_YEAR = \"quarter_year\"; //No I18N\n})(window || this);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/Utils/ChartConstants.js\n");

/***/ }),

/***/ "./js/Utils/ChartDefaults.js":
/*!***********************************!*\
  !*** ./js/Utils/ChartDefaults.js ***!
  \***********************************/
/***/ (function() {

"use strict";
eval("/*$Id$*/\n //No I18N\n\n(function (ctx) {\n  var ChartConstants = ctx.ChartConstants;\n\n  var ChartDefaults = function () {\n    var _chartDefaults = {\n      CHART_TYPE: ChartConstants.LINE,\n      //Gradient\n      BG_BRIGHTNESS: 1.10,\n      BG_CX: 0.5,\n      BG_CY: 0.5,\n      BG_RADIUS: 0.7,\n      GROUPED_COL_SERIES_LIMIT: 5,\n      PIE_SERIES_LIMIT: 1,\n      DONUT_SERIES_LIMIT: 5,\n      FUNNEL_SERIES_LIMIT: 1,\n      TOTAL_DATALABELS_STATUS: false,\n      FUNNEL_NECK_HEIGHT: '12%',\n      //No I18N\n      FUNNEL_NECK_WIDTH: '12%',\n      //No I18N\n      FUNNEL_DATALABEL_DISTANCE: 10,\n      RACE_BAR_ANIMATION_DURATION: 500,\n      DEFAULT_HEADER_TYPE: ChartConstants.STRING,\n      DEFAULT_TARGET_COLOR: \"#ff0000\",\n      //No I18N\n      SORT_ORDER: ChartConstants.DESC,\n\n      /* Caption */\n      CAPTION_ENABLED: false,\n      CAPTION_FONT_SIZE: 20,\n      CAPTION_FONT_WEIGHT: ChartConstants.NORMAL,\n      CAPTION_FONT_STYLE: ChartConstants.NORMAL,\n      CAPTION_FONT_COLOR: ChartConstants.AUTO_COLOR,\n\n      /* Race Chart Caption */\n      RACEBAR_CAPTION_ENABLED: true,\n      RACEBAR_CAPTION_FONT_SIZE: 40,\n      RACEBAR_CAPTION_FONT_WEIGHT: ChartConstants.BOLD,\n\n      /* Chart Title Format */\n      TITLE_FONT_SIZE: 20,\n      TITLE_FONT_WEIGHT: ChartConstants.NORMAL,\n      TITLE_FONT_STYLE: ChartConstants.NORMAL,\n      TITLE_FONT_COLOR: ChartConstants.AUTO_COLOR,\n      TITLE_ALIGNMENT: ChartConstants.TITLE_CENTER,\n\n      /* Chart Sub Title Format */\n      SUBTITLE_FONT_SIZE: 14,\n      SUBTITLE_FONT_WEIGHT: ChartConstants.NORMAL,\n      SUBTITLE_FONT_STYLE: ChartConstants.NORMAL,\n      SUBTITLE_FONT_COLOR: ChartConstants.AUTO_COLOR,\n\n      /* Chart H Title Format */\n      H_TITLE_FONT_SIZE: 14,\n      H_TITLE_FONT_WEIGHT: ChartConstants.NORMAL,\n      H_TITLE_FONT_STYLE: ChartConstants.NORMAL,\n      H_TITLE_FONT_COLOR: ChartConstants.AUTO_COLOR,\n\n      /* Chart V Title Format*/\n      V_TITLE_TEXT: \"\",\n      V_TITLE_FONT_SIZE: 14,\n      V_TITLE_FONT_WEIGHT: ChartConstants.NORMAL,\n      V_TITLE_FONT_STYLE: ChartConstants.NORMAL,\n      V_TITLE_FONT_COLOR: ChartConstants.AUTO_COLOR,\n\n      /* Donut Total Datalabel Format */\n      DONUT_TOTAL_DATALABELS_FONT_SIZE: 36,\n      DONUT_TOTAL_DATALABELS_FONT_WEIGHT: ChartConstants.NORMAL,\n      DONUT_TOTAL_DATALABELS_FONT_STYLE: ChartConstants.NORMAL,\n      DONUT_TOTAL_DATALABELS_FONT_COLOR: ChartConstants.AUTO_COLOR,\n      DONUT_TOTAL_DATALABELS_ALIGNMENT: ChartConstants.TITLE_CENTER,\n\n      /* Chart V Stack Labels Format*/\n      V_STACK_LABELS_TEXT: \"\",\n      V_STACK_LABELS_FONT_SIZE: 12,\n      V_STACK_LABELS_FONT_WEIGHT: ChartConstants.NORMAL,\n      V_STACK_LABELS_FONT_STYLE: ChartConstants.NORMAL,\n      V_STACK_LABELS_FONT_COLOR: ChartConstants.AUTO_COLOR,\n\n      /* Legend Defaults */\n      PIE_LEGEND_STATUS: false,\n      LEGEND_STATUS: true,\n      LEGEND_HALIGN: ChartConstants.ALIGN_CENTER,\n      LEGEND_VALIGN: ChartConstants.V_ALIGN_BOTTOM,\n      LEGEND_FONT_SIZE: 12,\n      LEGEND_FONT_WEIGHT: ChartConstants.NORMAL,\n      LEGEND_FONT_STYLE: ChartConstants.NORMAL,\n      LEGEND_FONT_COLOR: ChartConstants.AUTO_COLOR,\n\n      /* Datalabels Defaults */\n      PIE_DATALABEL_STATUS: true,\n      DATALABEL_STATUS: false,\n      PIE_DATALABEL_FORMAT: ChartConstants.L_P,\n      DATALABEL_FORMAT: ChartConstants.V,\n      DATALABEL_POSITION: ChartConstants.AUTO,\n      DATALABEL_FONT_SIZE: 12,\n      DATALABEL_FONT_WEIGHT: ChartConstants.NORMAL,\n      DATALABEL_FONT_STYLE: ChartConstants.NORMAL,\n      DATALABEL_FONT_COLOR: ChartConstants.AUTO_COLOR,\n\n      /* H Axis Defaults */\n      REVERSE_HAXIS_ORDER: false,\n      H_LABELS_STATUS: true,\n      H_LABELS_FONT_SIZE: 12,\n      H_LABELS_FONT_WEIGHT: ChartConstants.NORMAL,\n      H_LABELS_FONT_STYLE: ChartConstants.NORMAL,\n      H_LABELS_FONT_COLOR: ChartConstants.AUTO_COLOR,\n      H_LABELS_ROTATION: ChartConstants.AUTO,\n      H_LABELS_STAGGER_LINES: ChartConstants.AUTO,\n\n      /* V Axis Defaults */\n      V_LABELS_STATUS: true,\n      V_LABELS_FONT_SIZE: 12,\n      V_LABELS_FONT_WEIGHT: ChartConstants.NORMAL,\n      V_LABELS_FONT_STYLE: ChartConstants.NORMAL,\n      V_LABELS_FONT_COLOR: ChartConstants.AUTO_COLOR,\n      V_AXIS_LOG_SCALE_STATUS: false,\n      V_AXIS_LOG_SCALE_BASE: 10,\n\n      /* Plot Line Defaults */\n      PLOTLINES_FONT_SIZE: 12,\n      PLOTLINES_FONT_WEIGHT: ChartConstants.NORMAL,\n      PLOTLINES_FONT_STYLE: ChartConstants.NORMAL,\n      PLOTLINES_FONT_COLOR: ChartConstants.AUTO_COLOR,\n      PLOTLINES_LINE_TYPE: ChartConstants.SOLID,\n      PLOTLINES_LINE_COLOR: ChartConstants.AUTO_COLOR,\n\n      /* Gridlines Default */\n      V_MAJOR_GL_STATUS: true,\n      V_MAJOR_GL_COUNT: ChartConstants.AUTO,\n      V_MAJOR_GL_LINE_TYPE: ChartConstants.SOLID,\n      V_MAJOR_GL_LINE_COLOR: ChartConstants.AUTO_COLOR,\n      V_MINOR_GL_STATUS: false,\n      V_MINOR_GL_LINE_TYPE: ChartConstants.SOLID,\n      V_MINOR_GL_LINE_COLOR: ChartConstants.AUTO_COLOR,\n      H_MAJOR_GL_STATUS: false,\n      SCATTER_H_MAJOR_GL_STATUS: true,\n      H_MAJOR_GL_COUNT: ChartConstants.AUTO,\n      H_MAJOR_GL_LINE_TYPE: ChartConstants.SOLID,\n      H_MAJOR_GL_LINE_COLOR: ChartConstants.AUTO_COLOR,\n      H_MINOR_GL_STATUS: false,\n      H_MINOR_GL_LINE_TYPE: ChartConstants.SOLID,\n      H_MINOR_GL_LINE_COLOR: ChartConstants.AUTO_COLOR,\n\n      /* Styles Defaults */\n      COLOR_THEME: [\"#003f5c\", \"#444e86\", \"#955196\", \"#dd5182\", \"#ff6e54\", \"#ffa600\"],\n      //No I18N\n      // COLOR_THEME                 : [\"#98DBC6\", \"#5BC8AC\", \"#E6D72A\", \"#F18D9E\"], //No I18N\n      // COLOR_THEME                 : [\"#E53467\", \"#A1E43D\", \"#23A1B6\", \"#1A6D9D\", \"#F2D137\", \"#FA6D54\"],//No I18N\n      // COLOR_THEME                 : [\"#A5D6AF\", \"#A691DB\",  \"#F591CD\",  \"#FFC894\", \"#ffa750\"],\n      CHART_FONT_FAMILY: \"Arial\",\n      //No I18N\n      CHART_BG_COLOR: \"#ffffff\",\n      //No I18N\n      CHART_BORDER_COLOR: \"#cccccc\",\n      //No I18N\n      CHART_BORDER_WIDTH: 1,\n      CHART_GRADIENT_STATUS: false,\n      TOOLTIP_STATUS: true,\n      CHART_INVERTED_STATUS: false,\n      CHART_HEIGHT: 380,\n      CHART_WIDTH: 615,\n      NEGATIVE_COLOR: \"#ff0000\",\n      //No I18N\n\n      /* Series Defaults - Line Chart */\n      //Marker\n      MARKER_STATUS: false,\n      MARKER_SHAPE: ChartConstants.CIRCLE,\n      MARKER_SIZE: 5,\n      LINE_TYPE: ChartConstants.SOLID,\n      LINE_TRANSPARENCY: 0,\n      FILL_OPACITY: 0.5,\n      MARKER_LINE_COLOR: ChartConstants.AUTO_COLOR,\n      MARKER_FILL_COLOR: ChartConstants.AUTO_COLOR,\n\n      /* Series Defaults - Bar Chart */\n      //Border\n      DEFAULT_BORDER: ChartConstants.NONE,\n      BORDER_WIDTH: 1,\n      BORDER_NONE: 0,\n      BORDER_BRIGHTNESS: 1.25,\n      BORDER_COLOR: ChartConstants.AUTO_COLOR,\n\n      /* Series Defaults - Pie Chart */\n      PIE_START_ANGLE: 0,\n      SEMI_PIE_START_ANGLE: 270,\n\n      /* Trendline Defaults */\n      TRENDLINE_STATUS: false,\n      DEFAULT_TRENDLINE: ChartConstants.LINEAR,\n      POLYNOMIAL_ORDER: 2,\n      MOVING_AVERAGE_PERIOD: 2,\n      TRENDLINE_LINE_TYPE: ChartConstants.SOLID,\n\n      /* Auto Color Handler */\n      WHITE_BG_TITLE_FONT_COLOR: \"#1D1D1D\",\n      //No I18N\n      WHITE_BG_SUBTITLE_FONT_COLOR: \"#616261\",\n      //No I18N\n      WHITE_BG_HTITLE_FONT_COLOR: \"#8D8D8D\",\n      //No I18N\n      WHITE_BG_VTITLE_FONT_COLOR: \"#8D8D8D\",\n      //No I18N\n      WHITE_BG_LEGEND_FONT_COLOR: \"#1D1D1D\",\n      //No I18N\n      WHITE_BG_H_LABELS_FONT_COLOR: \"#1D1D1D\",\n      //No I18N\n      WHITE_BG_V_LABELS_FONT_COLOR: \"#1D1D1D\",\n      //No I18N\n      WHITE_BG_V_STACK_LABELS_FONT_COLOR: \"#1D1D1D\",\n      //No I18N\n      WHITE_BG_DATALABEL_FONT_COLOR: \"#1D1D1D\",\n      //No I18N\n      WHITE_BG_TOTAL_DATALABEL_FONT_COLOR: \"#1D1D1D\",\n      //No I18N\n      WHITE_BG_H_MAJOR_GRIDLINE_LINE_COLOR: \"rgba(157, 157, 157, 0.3)\",\n      //No I18N\n      WHITE_BG_H_MINOR_GRIDLINE_LINE_COLOR: \"rgba(157, 157, 157 ,0.2)\",\n      //No I18N\n      WHITE_BG_V_MAJOR_GRIDLINE_LINE_COLOR: \"rgba(157, 157, 157, 0.3)\",\n      //No I18N\n      WHITE_BG_V_MINOR_GRIDLINE_LINE_COLOR: \"rgba(157, 157, 157 ,0.2)\",\n      //No I18N\n      WHITE_BG_CAPTION_FONT_COLOR: \"#a9a9a9\",\n      //No I18N\n      WHITE_BG_PLOTLINES_LABELS_FONT_COLOR: \"#1D1D1D\",\n      //No I18N\n      WHITE_BG_BASELINE_COLOR: \"rgba(0, 0, 0, 0.75)\",\n      //No I18N\n      DARK_BG_TITLE_FONT_COLOR: \"rgba(255, 255, 255, 0.8)\",\n      //No I18N\n      DARK_BG_SUBTITLE_FONT_COLOR: \"#919291\",\n      //No I18N\n      DARK_BG_HTITLE_FONT_COLOR: \"rgba(255, 255, 255, 0.75)\",\n      //No I18N\n      DARK_BG_VTITLE_FONT_COLOR: \"rgba(255, 255, 255, 0.75)\",\n      //No I18N\n      DARK_BG_LEGEND_FONT_COLOR: \"rgba(255, 255, 255, 0.75)\",\n      //No I18N\n      DARK_BG_H_LABELS_FONT_COLOR: \"rgba(255, 255, 255, 0.75)\",\n      //No I18N\n      DARK_BG_V_LABELS_FONT_COLOR: \"rgba(255, 255, 255, 0.75)\",\n      //No I18N\n      DARK_BG_V_STACK_LABELS_FONT_COLOR: \"rgba(255, 255, 255, 0.75)\",\n      //No I18N\n      DARK_BG_DATALABEL_FONT_COLOR: \"rgba(255, 255, 255, 0.75)\",\n      //No I18N\n      DARK_BG_TOTAL_DATALABEL_FONT_COLOR: \"rgba(255, 255, 255, 0.75)\",\n      //No I18N\n      DARK_BG_H_MAJOR_GRIDLINE_LINE_COLOR: \"rgba(255, 255, 255, 0.3)\",\n      //No I18N\n      DARK_BG_H_MINOR_GRIDLINE_LINE_COLOR: \"rgba(255, 255, 255 ,0.2)\",\n      //No I18N\n      DARK_BG_V_MAJOR_GRIDLINE_LINE_COLOR: \"rgba(255, 255, 255, 0.3)\",\n      //No I18N\n      DARK_BG_V_MINOR_GRIDLINE_LINE_COLOR: \"rgba(255, 255, 255 ,0.2)\",\n      //No I18N\n      DARK_BG_CAPTION_FONT_COLOR: \"rgba(255, 255, 255, 0.75)\",\n      //No I18N\n      DARK_BG_PLOTLINES_LABELS_FONT_COLOR: \"rgba(255, 255, 255, 0.75)\",\n      //No I18N\n      DARK_BG_BASELINE_COLOR: \"rgba(255, 255, 255, 0.75)\",\n      //No I18N\n      LIGHT_BG_TITLE_FONT_COLOR: \"rgba(0, 0, 0, 0.8)\",\n      //No I18N\n      LIGHT_BG_SUBTITLE_FONT_COLOR: \"#919291\",\n      //No I18N\n      LIGHT_BG_HTITLE_FONT_COLOR: \"rgba(0, 0, 0, 0.75)\",\n      //No I18N\n      LIGHT_BG_VTITLE_FONT_COLOR: \"rgba(0, 0, 0, 0.75)\",\n      //No I18N\n      LIGHT_BG_LEGEND_FONT_COLOR: \"rgba(0, 0, 0, 0.75)\",\n      //No I18N\n      LIGHT_BG_H_LABELS_FONT_COLOR: \"rgba(0, 0, 0, 0.75)\",\n      //No I18N\n      LIGHT_BG_V_LABELS_FONT_COLOR: \"rgba(0, 0, 0, 0.75)\",\n      //No I18N\n      LIGHT_BG_V_STACK_LABELS_FONT_COLOR: \"rgba(0, 0, 0, 0.75)\",\n      //No I18N\n      LIGHT_BG_DATALABEL_FONT_COLOR: \"rgba(0, 0, 0, 0.75)\",\n      //No I18N\n      LIGHT_BG_TOTAL_DATALABEL_FONT_COLOR: \"rgba(0, 0, 0, 0.75)\",\n      //No I18N\n      LIGHT_BG_H_MAJOR_GRIDLINE_LINE_COLOR: \"rgba(157, 157, 157, 0.3)\",\n      //No I18N\n      LIGHT_BG_H_MINOR_GRIDLINE_LINE_COLOR: \"rgba(157, 157, 157, 0.2)\",\n      //No I18N\n      LIGHT_BG_V_MAJOR_GRIDLINE_LINE_COLOR: \"rgba(157, 157, 157, 0.3)\",\n      //No I18N\n      LIGHT_BG_V_MINOR_GRIDLINE_LINE_COLOR: \"rgba(157, 157, 157, 0.2)\",\n      //No I18N\n      LIGHT_BG_CAPTION_FONT_COLOR: \"rgba(0, 0, 0, 0.75)\",\n      //No I18N\n      LIGHT_PLOTLINES_LABELS_FONT_COLOR: \"rgba(0, 0, 0, 0.75)\",\n      //No I18N\n      LIGHT_BG_BASELINE_COLOR: \"rgba(0, 0, 0, 0.75)\" //No I18N\n\n    };\n\n    function setProperty(name, value) {\n      if (_chartDefaults[name] != undefined) {\n        _chartDefaults[name] = value;\n      }\n    }\n\n    return {\n      set: function set(defaults) {\n        var keys = Object.keys(defaults);\n\n        for (var i = 0; i < keys.length; i++) {\n          var key = keys[i];\n          setProperty(key, defaults[key]);\n        }\n      },\n      DEFAULTS: _chartDefaults\n    };\n  }();\n\n  ctx.ChartDefaults = ChartDefaults;\n})(window || this);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/Utils/ChartDefaults.js\n");

/***/ }),

/***/ "./js/Utils/ChartJSONConvertor.js":
/*!****************************************!*\
  !*** ./js/Utils/ChartJSONConvertor.js ***!
  \****************************************/
/***/ (function() {

"use strict";
eval("/*$Id$*/\n //No I18N\n\n(function (ctx) {\n  var C = ctx.ChartConstants;\n  var ChartKeyList = ctx.ChartKeyList;\n  var chartTypeToKeys = ctx.ChartMaps.chartTypeToKeys;\n  var ArraySkeletonConstructor = ctx.ArraySkeletonConstructor;\n  var DEFAULTS = ctx.ChartDefaults.DEFAULTS;\n\n  var ChartJSONConvertor = function () {\n    function setChartType(chartJSON, input, type, inputType) {\n      if (inputType.indexOf(C.JSON) != -1) {\n        if (input[C.CHART] && input[C.CHART][C.TYPE] != null) {\n          chartJSON[C.CHART][C.TYPE] = input[C.CHART][C.TYPE];\n        } else {\n          chartJSON[C.CHART][C.TYPE] = DEFAULTS.CHART_TYPE;\n        }\n      }\n    }\n\n    function setGradientStatus(chartJSON, input, type, inputType) {\n      if (inputType.indexOf(C.JSON) != -1) {\n        if (input[C.CHART] && input[C.CHART][C.GRADIENT] && input[C.CHART][C.GRADIENT][C.ENABLED] != null) {\n          chartJSON[C.CHART][C.GRADIENT][C.ENABLED] = input[C.CHART][C.GRADIENT][C.ENABLED];\n        } else {\n          chartJSON[C.CHART][C.GRADIENT][C.ENABLED] = DEFAULTS.CHART_GRADIENT_STATUS;\n        }\n      }\n    }\n\n    function setAnimationDuration(chartJSON, input, type, inputType) {\n      if (inputType.indexOf(C.JSON) != -1) {\n        if (input[C.CHART] && input[C.CHART][C.ANIMATION] && input[C.CHART][C.ANIMATION][C.DURATION] != null) {\n          chartJSON[C.CHART][C.ANIMATION][C.DURATION] = input[C.CHART][C.ANIMATION][C.DURATION];\n        } else {\n          chartJSON[C.CHART][C.ANIMATION][C.DURATION] = DEFAULTS.RACE_BAR_ANIMATION_DURATION;\n        }\n      }\n    }\n\n    function setChartFontFamily(chartJSON, input, type, inputType) {\n      if (inputType.indexOf(C.JSON) != -1) {\n        if (input[C.CHART] && input[C.CHART][C.FONT_FAMILY] != null) {\n          chartJSON[C.CHART][C.FONT_FAMILY] = input[C.CHART][C.FONT_FAMILY];\n        } else {\n          chartJSON[C.CHART][C.FONT_FAMILY] = DEFAULTS.CHART_FONT_FAMILY;\n        }\n      }\n    }\n\n    function setChartWidth(chartJSON, input, type, inputType) {\n      if (inputType.indexOf(C.JSON) != -1) {\n        if (input[C.CHART] && input[C.CHART][C.WIDTH] != null) {\n          chartJSON[C.CHART][C.WIDTH] = input[C.CHART][C.WIDTH];\n        } else {\n          chartJSON[C.CHART][C.WIDTH] = DEFAULTS.CHART_WIDTH;\n        }\n      }\n    }\n\n    function setChartHeight(chartJSON, input, type, inputType) {\n      if (inputType.indexOf(C.JSON) != -1) {\n        if (input[C.CHART] && input[C.CHART][C.HEIGHT] != null) {\n          chartJSON[C.CHART][C.HEIGHT] = input[C.CHART][C.HEIGHT];\n        } else {\n          chartJSON[C.CHART][C.HEIGHT] = DEFAULTS.CHART_HEIGHT;\n        }\n      }\n    }\n\n    function setChartRenderId(chartJSON, input, type, inputType) {\n      if (inputType.indexOf(C.JSON) != -1) {\n        input[C.CHART] && input[C.CHART][C.RENDER_ID] && (chartJSON[C.CHART][C.RENDER_ID] = input[C.CHART][C.RENDER_ID]);\n      }\n    }\n\n    function setInverted(chartJSON, input, type, inputType) {\n      if (inputType.indexOf(C.JSON) != -1) {\n        if (input[C.CHART] && input[C.CHART][C.INVERTED] != null) {\n          chartJSON[C.CHART][C.INVERTED] = input[C.CHART][C.INVERTED];\n        } else {\n          chartJSON[C.CHART][C.INVERTED] = DEFAULTS.CHART_INVERTED_STATUS;\n        }\n      }\n    }\n\n    function setBorderColor(chartJSON, input, type, inputType) {\n      if (inputType.indexOf(C.JSON) != -1) {\n        input[C.CHART] && input[C.CHART][C.BORDER_COLOR] && (chartJSON[C.CHART][C.BORDER_COLOR] = input[C.CHART][C.BORDER_COLOR]);\n      }\n    }\n\n    function setBackGroundColor(chartJSON, input, type, inputType) {\n      if (inputType.indexOf(C.JSON) != -1) {\n        if (input[C.CHART] && input[C.CHART][C.BACKGROUND_COLOR]) {\n          chartJSON[C.CHART][C.BACKGROUND_COLOR] = input[C.CHART][C.BACKGROUND_COLOR];\n        } else {\n          chartJSON[C.CHART][C.BACKGROUND_COLOR] = DEFAULTS.CHART_BG_COLOR;\n        }\n      }\n    }\n\n    function setColors(chartJSON, input, type, inputType) {\n      if (inputType.indexOf(C.JSON) != -1) {\n        if (input[C.CHART] && input[C.CHART][C.COLORS]) {\n          chartJSON[C.CHART][C.COLORS] = input[C.CHART][C.COLORS];\n        } else {\n          chartJSON[C.CHART][C.COLORS] = DEFAULTS.COLOR_THEME;\n        }\n      }\n    }\n\n    function setCaptionEnabled(chartJSON, input, type, inputType) {\n      if (inputType.indexOf(C.JSON) != -1) {\n        if (input[C.CAPTION] && input[C.CAPTION][C.ENABLED] != null) {\n          chartJSON[C.CAPTION][C.ENABLED] = input[C.CAPTION][C.ENABLED];\n        } else {\n          if (type.indexOf(C.RACEBAR) != -1) {\n            chartJSON[C.CAPTION][C.ENABLED] = DEFAULTS.RACEBAR_CAPTION_ENABLED;\n          } else {\n            chartJSON[C.CAPTION][C.ENABLED] = DEFAULTS.CAPTION_ENABLED;\n          }\n        }\n      }\n    }\n\n    function setCaptionFontSize(chartJSON, input, type, inputType) {\n      if (inputType.indexOf(C.JSON) != -1) {\n        if (input[C.CAPTION] && input[C.CAPTION][C.FONT_SIZE] != null) {\n          chartJSON[C.CAPTION][C.FONT_SIZE] = input[C.CAPTION][C.FONT_SIZE];\n        } else {\n          if (type.indexOf(C.RACEBAR) != -1) {\n            chartJSON[C.CAPTION][C.FONT_SIZE] = DEFAULTS.RACEBAR_CAPTION_FONT_SIZE;\n          } else {\n            chartJSON[C.CAPTION][C.FONT_SIZE] = DEFAULTS.CAPTION_FONT_SIZE;\n          }\n        }\n      }\n    }\n\n    function setCaptionFontColor(chartJSON, input, type, inputType) {\n      if (inputType.indexOf(C.JSON) != -1) {\n        if (input[C.CAPTION] && input[C.CAPTION][C.FONT_COLOR] != null) {\n          chartJSON[C.CAPTION][C.FONT_COLOR] = input[C.CAPTION][C.FONT_COLOR];\n        } else {\n          chartJSON[C.CAPTION][C.FONT_COLOR] = DEFAULTS.CAPTION_FONT_COLOR;\n        }\n      }\n    }\n\n    function setCaptionFontWeight(chartJSON, input, type, inputType) {\n      if (inputType.indexOf(C.JSON) != -1) {\n        if (input[C.CAPTION] && input[C.CAPTION][C.FONT_WEIGHT] != null) {\n          chartJSON[C.CAPTION][C.FONT_WEIGHT] = input[C.CAPTION][C.FONT_WEIGHT];\n        } else {\n          if (type.indexOf(C.RACEBAR) != -1) {\n            chartJSON[C.CAPTION][C.FONT_WEIGHT] = DEFAULTS.RACEBAR_CAPTION_FONT_WEIGHT;\n          } else {\n            chartJSON[C.CAPTION][C.FONT_WEIGHT] = DEFAULTS.CAPTION_FONT_WEIGHT;\n          }\n        }\n      }\n    }\n\n    function setCaptionFontStyle(chartJSON, input, type, inputType) {\n      if (inputType.indexOf(C.JSON) != -1) {\n        if (input[C.CAPTION] && input[C.CAPTION][C.FONT_STYLE]) {\n          chartJSON[C.CAPTION][C.FONT_STYLE] = input[C.CAPTION][C.FONT_STYLE];\n        } else {\n          chartJSON[C.CAPTION][C.FONT_STYLE] = DEFAULTS.CAPTION_FONT_STYLE;\n        }\n      }\n    }\n\n    function setTitleText(chartJSON, input, type, inputType) {\n      if (inputType.indexOf(C.JSON) != -1) {\n        chartJSON[C.TITLE][C.TEXT] = \" \";\n        input[C.TITLE] && input[C.TITLE][C.TEXT] && (chartJSON[C.TITLE][C.TEXT] = input[C.TITLE][C.TEXT]);\n      }\n    }\n\n    function setTitleFontSize(chartJSON, input, type, inputType) {\n      if (inputType.indexOf(C.JSON) != -1) {\n        if (input[C.TITLE] && input[C.TITLE][C.FONT_SIZE] != null) {\n          chartJSON[C.TITLE][C.FONT_SIZE] = input[C.TITLE][C.FONT_SIZE];\n        } else {\n          chartJSON[C.TITLE][C.FONT_SIZE] = DEFAULTS.TITLE_FONT_SIZE;\n        }\n      }\n    }\n\n    function setTitleFontColor(chartJSON, input, type, inputType) {\n      if (inputType.indexOf(C.JSON) != -1) {\n        if (input[C.TITLE] && input[C.TITLE][C.FONT_COLOR] != null) {\n          chartJSON[C.TITLE][C.FONT_COLOR] = input[C.TITLE][C.FONT_COLOR];\n        } else {\n          chartJSON[C.TITLE][C.FONT_COLOR] = DEFAULTS.TITLE_FONT_COLOR;\n        }\n      }\n    }\n\n    function setTitleFontWeight(chartJSON, input, type, inputType) {\n      if (inputType.indexOf(C.JSON) != -1) {\n        if (input[C.TITLE] && input[C.TITLE][C.FONT_WEIGHT] != null) {\n          chartJSON[C.TITLE][C.FONT_WEIGHT] = input[C.TITLE][C.FONT_WEIGHT];\n        } else {\n          chartJSON[C.TITLE][C.FONT_WEIGHT] = DEFAULTS.TITLE_FONT_WEIGHT;\n        }\n      }\n    }\n\n    function setTitleFontStyle(chartJSON, input, type, inputType) {\n      if (inputType.indexOf(C.JSON) != -1) {\n        if (input[C.TITLE] && input[C.TITLE][C.FONT_STYLE]) {\n          chartJSON[C.TITLE][C.FONT_STYLE] = input[C.TITLE][C.FONT_STYLE];\n        } else {\n          chartJSON[C.TITLE][C.FONT_STYLE] = DEFAULTS.TITLE_FONT_STYLE;\n        }\n      }\n    }\n\n    function setSubTitleText(chartJSON, input, type, inputType) {\n      if (inputType.indexOf(C.JSON) != -1) {\n        input[C.SUBTITLE] && input[C.SUBTITLE][C.TEXT] && (chartJSON[C.SUBTITLE][C.TEXT] = input[C.SUBTITLE][C.TEXT]);\n      }\n    }\n\n    function setSubtitleFontSize(chartJSON, input, type, inputType) {\n      if (inputType.indexOf(C.JSON) != -1) {\n        if (input[C.SUBTITLE] && input[C.SUBTITLE][C.FONT_SIZE] != null) {\n          chartJSON[C.SUBTITLE][C.FONT_SIZE] = input[C.SUBTITLE][C.FONT_SIZE];\n        } else {\n          chartJSON[C.SUBTITLE][C.FONT_SIZE] = DEFAULTS.SUBTITLE_FONT_SIZE;\n        }\n      }\n    }\n\n    function setSubtitleFontColor(chartJSON, input, type, inputType) {\n      if (inputType.indexOf(C.JSON) != -1) {\n        if (input[C.SUBTITLE] && input[C.SUBTITLE][C.FONT_COLOR] != null) {\n          chartJSON[C.SUBTITLE][C.FONT_COLOR] = input[C.SUBTITLE][C.FONT_COLOR];\n        } else {\n          chartJSON[C.SUBTITLE][C.FONT_COLOR] = DEFAULTS.SUBTITLE_FONT_COLOR;\n        }\n      }\n    }\n\n    function setSubtitleFontWeight(chartJSON, input, type, inputType) {\n      if (inputType.indexOf(C.JSON) != -1) {\n        if (input[C.SUBTITLE] && input[C.SUBTITLE][C.FONT_WEIGHT]) {\n          chartJSON[C.SUBTITLE][C.FONT_WEIGHT] = input[C.SUBTITLE][C.FONT_WEIGHT];\n        } else {\n          chartJSON[C.SUBTITLE][C.FONT_WEIGHT] = DEFAULTS.SUBTITLE_FONT_WEIGHT;\n        }\n      }\n    }\n\n    function setSubtitleFontStyle(chartJSON, input, type, inputType) {\n      if (inputType.indexOf(C.JSON) != -1) {\n        if (input[C.SUBTITLE] && input[C.SUBTITLE][C.FONT_STYLE]) {\n          chartJSON[C.SUBTITLE][C.FONT_STYLE] = input[C.SUBTITLE][C.FONT_STYLE];\n        } else {\n          chartJSON[C.SUBTITLE][C.FONT_STYLE] = DEFAULTS.SUBTITLE_FONT_STYLE;\n        }\n      }\n    }\n\n    function setDonutTotalDatalabelsStatus(chartJSON, input, type, inputType) {\n      if (inputType.indexOf(C.JSON) != -1) {\n        input[C.DONUT_TOTAL_DATALABELS] && input[C.DONUT_TOTAL_DATALABELS][C.ENABLED] != null && (chartJSON[C.DONUT_TOTAL_DATALABELS][C.ENABLED] = input[C.DONUT_TOTAL_DATALABELS][C.ENABLED]);\n      }\n    }\n\n    function setDonutTotalDatalabelsFontSize(chartJSON, input, type, inputType) {\n      if (inputType.indexOf(C.JSON) != -1) {\n        if (input[C.DONUT_TOTAL_DATALABELS] && input[C.DONUT_TOTAL_DATALABELS][C.FONT_SIZE] != null) {\n          chartJSON[C.DONUT_TOTAL_DATALABELS][C.FONT_SIZE] = input[C.DONUT_TOTAL_DATALABELS][C.FONT_SIZE];\n        } else {\n          chartJSON[C.DONUT_TOTAL_DATALABELS][C.FONT_SIZE] = DEFAULTS.DONUT_TOTAL_DATALABELS_FONT_SIZE;\n        }\n      }\n    }\n\n    function setDonutTotalDatalabelsFontColor(chartJSON, input, type, inputType) {\n      if (inputType.indexOf(C.JSON) != -1) {\n        if (input[C.DONUT_TOTAL_DATALABELS] && input[C.DONUT_TOTAL_DATALABELS][C.FONT_COLOR] != null) {\n          chartJSON[C.DONUT_TOTAL_DATALABELS][C.FONT_COLOR] = input[C.DONUT_TOTAL_DATALABELS][C.FONT_COLOR];\n        } else {\n          chartJSON[C.DONUT_TOTAL_DATALABELS][C.FONT_COLOR] = DEFAULTS.DONUT_TOTAL_DATALABELS_FONT_COLOR;\n        }\n      }\n    }\n\n    function setDonutTotalDatalabelsFontWeight(chartJSON, input, type, inputType) {\n      if (inputType.indexOf(C.JSON) != -1) {\n        if (input[C.DONUT_TOTAL_DATALABELS] && input[C.DONUT_TOTAL_DATALABELS][C.FONT_WEIGHT] != null) {\n          chartJSON[C.DONUT_TOTAL_DATALABELS][C.FONT_WEIGHT] = input[C.DONUT_TOTAL_DATALABELS][C.FONT_WEIGHT];\n        } else {\n          chartJSON[C.DONUT_TOTAL_DATALABELS][C.FONT_WEIGHT] = DEFAULTS.DONUT_TOTAL_DATALABELS_FONT_WEIGHT;\n        }\n      }\n    }\n\n    function setDonutTotalDatalabelsFontStyle(chartJSON, input, type, inputType) {\n      if (inputType.indexOf(C.JSON) != -1) {\n        if (input[C.DONUT_TOTAL_DATALABELS] && input[C.DONUT_TOTAL_DATALABELS][C.FONT_STYLE]) {\n          chartJSON[C.DONUT_TOTAL_DATALABELS][C.FONT_STYLE] = input[C.DONUT_TOTAL_DATALABELS][C.FONT_STYLE];\n        } else {\n          chartJSON[C.DONUT_TOTAL_DATALABELS][C.FONT_STYLE] = DEFAULTS.DONUT_TOTAL_DATALABELS_FONT_STYLE;\n        }\n      }\n    } //Legend\n\n\n    function setLegendHAlign(chartJSON, input, type, inputType) {\n      if (inputType.indexOf(C.JSON) != -1) {\n        if (input[C.LEGEND] && input[C.LEGEND][C.LEGEND_HALIGN] != null) {\n          chartJSON[C.LEGEND][C.LEGEND_HALIGN] = input[C.LEGEND][C.LEGEND_HALIGN];\n        } else {\n          chartJSON[C.LEGEND][C.LEGEND_HALIGN] = DEFAULTS.LEGEND_HALIGN;\n        }\n      }\n    }\n\n    function setLegendVAlign(chartJSON, input, type, inputType) {\n      if (inputType.indexOf(C.JSON) != -1) {\n        if (input[C.LEGEND] && input[C.LEGEND][C.LEGEND_VALIGN] != null) {\n          chartJSON[C.LEGEND][C.LEGEND_VALIGN] = input[C.LEGEND][C.LEGEND_VALIGN];\n        } else {\n          chartJSON[C.LEGEND][C.LEGEND_VALIGN] = DEFAULTS.LEGEND_VALIGN;\n        }\n      }\n    }\n\n    function setLegendStatus(chartJSON, input, type, inputType) {\n      if (inputType.indexOf(C.JSON) != -1) {\n        if (input[C.LEGEND] && input[C.LEGEND][C.ENABLED] != null) {\n          chartJSON[C.LEGEND][C.ENABLED] = input[C.LEGEND][C.ENABLED];\n        } else {\n          if (type.indexOf(C.PIE) != -1 || type.indexOf(C.SEMI_PIE) != -1) {\n            chartJSON[C.LEGEND][C.ENABLED] = DEFAULTS.PIE_LEGEND_STATUS;\n          } else {\n            chartJSON[C.LEGEND][C.ENABLED] = DEFAULTS.LEGEND_STATUS;\n          }\n        }\n      }\n    }\n\n    function setLegendFontSize(chartJSON, input, type, inputType) {\n      if (inputType.indexOf(C.JSON) != -1) {\n        if (input[C.LEGEND] && input[C.LEGEND][C.FONT_SIZE] != null) {\n          chartJSON[C.LEGEND][C.FONT_SIZE] = input[C.LEGEND][C.FONT_SIZE];\n        } else {\n          chartJSON[C.LEGEND][C.FONT_SIZE] = DEFAULTS.LEGEND_FONT_SIZE;\n        }\n      }\n    }\n\n    function setLegendFontColor(chartJSON, input, type, inputType) {\n      if (inputType.indexOf(C.JSON) != -1) {\n        if (input[C.LEGEND] && input[C.LEGEND][C.FONT_COLOR] != null) {\n          chartJSON[C.LEGEND][C.FONT_COLOR] = input[C.LEGEND][C.FONT_COLOR];\n        } else {\n          chartJSON[C.LEGEND][C.FONT_COLOR] = DEFAULTS.LEGEND_FONT_COLOR;\n        }\n      }\n    }\n\n    function setLegendFontWeight(chartJSON, input, type, inputType) {\n      if (inputType.indexOf(C.JSON) != -1) {\n        if (input[C.LEGEND] && input[C.LEGEND][C.FONT_WEIGHT] != null) {\n          chartJSON[C.LEGEND][C.FONT_WEIGHT] = input[C.LEGEND][C.FONT_WEIGHT];\n        } else {\n          chartJSON[C.LEGEND][C.FONT_WEIGHT] = DEFAULTS.LEGEND_FONT_WEIGHT;\n        }\n      }\n    }\n\n    function setLegendFontStyle(chartJSON, input, type, inputType) {\n      if (inputType.indexOf(C.JSON) != -1) {\n        if (input[C.LEGEND] && input[C.LEGEND][C.FONT_STYLE] != null) {\n          chartJSON[C.LEGEND][C.FONT_STYLE] = input[C.LEGEND][C.FONT_STYLE];\n        } else {\n          chartJSON[C.LEGEND][C.FONT_STYLE] = DEFAULTS.LEGEND_FONT_STYLE;\n        }\n      }\n    }\n\n    function setDatalabelEnabled(chartJSON, input, type, inputType) {\n      if (inputType.indexOf(C.JSON) != -1) {\n        if (input[C.DATALABEL] && input[C.DATALABEL][C.ENABLED] != null) {\n          chartJSON[C.DATALABEL][C.ENABLED] = input[C.DATALABEL][C.ENABLED];\n        } else {\n          if (type.indexOf(C.PIE) != -1 || type.indexOf(C.SEMI_PIE) != -1) {\n            input[C.DATALABEL][C.ENABLED] = DEFAULTS.PIE_DATALABEL_STATUS;\n          } else {\n            input[C.DATALABEL][C.ENABLED] = DEFAULTS.DATALABEL_STATUS;\n          }\n        }\n      }\n    }\n\n    function setHAxisGridlines(chartJSON, input, type, inputType, hIndex) {\n      if (inputType.indexOf(C.JSON) != -1) {\n        input[C.HAXIS][hIndex][C.GRIDLINES] && input[C.HAXIS][hIndex][C.GRIDLINES][C.MAJOR_GRIDLINE_ENABLED] != null && (chartJSON[C.HAXIS][hIndex][C.GRIDLINES][C.MAJOR_GRIDLINE_ENABLED] = input[C.HAXIS][hIndex][C.GRIDLINES][C.MAJOR_GRIDLINE_ENABLED]);\n        input[C.HAXIS][hIndex][C.GRIDLINES] && input[C.HAXIS][hIndex][C.GRIDLINES][C.MAJOR_GRIDLINE_COUNT] != null && (chartJSON[C.HAXIS][hIndex][C.GRIDLINES][C.MAJOR_GRIDLINE_COUNT] = input[C.HAXIS][hIndex][C.GRIDLINES][C.MAJOR_GRIDLINE_COUNT]);\n        input[C.HAXIS][hIndex][C.GRIDLINES] && input[C.HAXIS][hIndex][C.GRIDLINES][C.MAJOR_GRIDLINE_LINE_TYPE] != null && (chartJSON[C.HAXIS][hIndex][C.GRIDLINES][C.MAJOR_GRIDLINE_LINE_TYPE] = input[C.HAXIS][hIndex][C.GRIDLINES][C.MAJOR_GRIDLINE_LINE_TYPE]);\n        input[C.HAXIS][hIndex][C.GRIDLINES] && input[C.HAXIS][hIndex][C.GRIDLINES][C.MAJOR_GRIDLINE_LINE_COLOR] != null && (chartJSON[C.HAXIS][hIndex][C.GRIDLINES][C.MAJOR_GRIDLINE_LINE_COLOR] = input[C.HAXIS][hIndex][C.GRIDLINES][C.MAJOR_GRIDLINE_LINE_COLOR]);\n        input[C.HAXIS][hIndex][C.GRIDLINES] && input[C.HAXIS][hIndex][C.GRIDLINES][C.MINOR_GRIDLINE_ENABLED] != null && (chartJSON[C.HAXIS][hIndex][C.GRIDLINES][C.MINOR_GRIDLINE_ENABLED] = input[C.HAXIS][hIndex][C.GRIDLINES][C.MINOR_GRIDLINE_ENABLED]);\n        input[C.HAXIS][hIndex][C.GRIDLINES] && input[C.HAXIS][hIndex][C.GRIDLINES][C.MINOR_GRIDLINE_LINE_TYPE] != null && (chartJSON[C.HAXIS][hIndex][C.GRIDLINES][C.MINOR_GRIDLINE_LINE_TYPE] = input[C.HAXIS][hIndex][C.GRIDLINES][C.MINOR_GRIDLINE_LINE_TYPE]);\n        input[C.HAXIS][hIndex][C.GRIDLINES] && input[C.HAXIS][hIndex][C.GRIDLINES][C.MINOR_GRIDLINE_LINE_COLOR] != null && (chartJSON[C.HAXIS][hIndex][C.GRIDLINES][C.MINOR_GRIDLINE_LINE_COLOR] = input[C.HAXIS][hIndex][C.GRIDLINES][C.MINOR_GRIDLINE_LINE_COLOR]);\n      }\n    }\n\n    function setHAxisProperties(chartJSON, input, type, inputType) {\n      if (inputType.indexOf(C.JSON) != -1) {\n        //Issue in HighCharts - Must have atleast one object in x axis and y axis\n        chartJSON[C.HAXIS][0] = ArraySkeletonConstructor.get(ChartKeyList.HAXIS, type);\n        var h_axis_length = input[C.HAXIS] ? input[C.HAXIS].length : 0;\n\n        for (var i = 0; i < h_axis_length; i++) {\n          chartJSON[C.HAXIS][i] = ArraySkeletonConstructor.get(ChartKeyList.HAXIS, type);\n          input[C.HAXIS][i] && input[C.HAXIS][i][C.MIN] != null && (chartJSON[C.HAXIS][i][C.MIN] = input[C.HAXIS][i][C.MIN]);\n          input[C.HAXIS][i] && input[C.HAXIS][i][C.MAX] != null && (chartJSON[C.HAXIS][i][C.MAX] = input[C.HAXIS][i][C.MAX]);\n          input[C.HAXIS][i] && input[C.HAXIS][i][C.BINNING_INTERVAL] != null && (chartJSON[C.HAXIS][i][C.BINNING_INTERVAL] = input[C.HAXIS][i][C.BINNING_INTERVAL]);\n          input[C.HAXIS][i] && input[C.HAXIS][i][C.REVERSED] != null && (chartJSON[C.HAXIS][i][C.REVERSED] = input[C.HAXIS][i][C.REVERSED]);\n          input[C.HAXIS][i] && input[C.HAXIS][i][C.TITLE] && input[C.HAXIS][i][C.TITLE][C.TEXT] && (chartJSON[C.HAXIS][i][C.TITLE][C.TEXT] = input[C.HAXIS][i][C.TITLE][C.TEXT]);\n          input[C.HAXIS][i] && input[C.HAXIS][i][C.TITLE] && input[C.HAXIS][i][C.TITLE][C.FONT_SIZE] && (chartJSON[C.HAXIS][i][C.TITLE][C.FONT_SIZE] = input[C.HAXIS][i][C.TITLE][C.FONT_SIZE]);\n          input[C.HAXIS][i] && input[C.HAXIS][i][C.TITLE] && input[C.HAXIS][i][C.TITLE][C.FONT_COLOR] && (chartJSON[C.HAXIS][i][C.TITLE][C.FONT_COLOR] = input[C.HAXIS][i][C.TITLE][C.FONT_COLOR]);\n          input[C.HAXIS][i] && input[C.HAXIS][i][C.TITLE] && input[C.HAXIS][i][C.TITLE][C.FONT_WEIGHT] && (chartJSON[C.HAXIS][i][C.TITLE][C.FONT_WEIGHT] = input[C.HAXIS][i][C.TITLE][C.FONT_WEIGHT]);\n          input[C.HAXIS][i] && input[C.HAXIS][i][C.TITLE] && input[C.HAXIS][i][C.TITLE][C.FONT_STYLE] && (chartJSON[C.HAXIS][i][C.TITLE][C.FONT_STYLE] = input[C.HAXIS][i][C.TITLE][C.FONT_STYLE]);\n          input[C.HAXIS][i] && input[C.HAXIS][i][C.LABELS] && input[C.HAXIS][i][C.LABELS][C.ENABLED] != null && (chartJSON[C.HAXIS][i][C.LABELS][C.ENABLED] = input[C.HAXIS][i][C.LABELS][C.ENABLED]);\n          input[C.HAXIS][i] && input[C.HAXIS][i][C.LABELS] && input[C.HAXIS][i][C.LABELS][C.FONT_SIZE] && (chartJSON[C.HAXIS][i][C.LABELS][C.FONT_SIZE] = input[C.HAXIS][i][C.LABELS][C.FONT_SIZE]);\n          input[C.HAXIS][i] && input[C.HAXIS][i][C.LABELS] && input[C.HAXIS][i][C.LABELS][C.FONT_COLOR] && (chartJSON[C.HAXIS][i][C.LABELS][C.FONT_COLOR] = input[C.HAXIS][i][C.LABELS][C.FONT_COLOR]);\n          input[C.HAXIS][i] && input[C.HAXIS][i][C.LABELS] && input[C.HAXIS][i][C.LABELS][C.FONT_WEIGHT] && (chartJSON[C.HAXIS][i][C.LABELS][C.FONT_WEIGHT] = input[C.HAXIS][i][C.LABELS][C.FONT_WEIGHT]);\n          input[C.HAXIS][i] && input[C.HAXIS][i][C.LABELS] && input[C.HAXIS][i][C.LABELS][C.FONT_STYLE] && (chartJSON[C.HAXIS][i][C.LABELS][C.FONT_STYLE] = input[C.HAXIS][i][C.LABELS][C.FONT_STYLE]);\n          input[C.HAXIS][i] && input[C.HAXIS][i][C.LABELS] && input[C.HAXIS][i][C.LABELS][C.STAGGER_LINES] != null && (chartJSON[C.HAXIS][i][C.LABELS][C.STAGGER_LINES] = input[C.HAXIS][i][C.LABELS][C.STAGGER_LINES]);\n          input[C.HAXIS][i] && input[C.HAXIS][i][C.LABELS] && input[C.HAXIS][i][C.LABELS][C.ROTATION] != null && (chartJSON[C.HAXIS][i][C.LABELS][C.ROTATION] = input[C.HAXIS][i][C.LABELS][C.ROTATION]);\n          keyToFunction[ChartKeyList.H_GRIDLINE](chartJSON, input, type, inputType, i);\n        }\n      }\n    }\n\n    function setVAxisPlotLines(chartJSON, input, type, inputType, vIndex) {\n      if (inputType.indexOf(C.JSON) != -1) {\n        var plotLinesLength = input[C.VAXIS][vIndex][C.PLOT_LINES] ? input[C.VAXIS][vIndex][C.PLOT_LINES].length : 0;\n\n        for (var i = 0; i < plotLinesLength; i++) {\n          chartJSON[C.VAXIS][vIndex][C.PLOT_LINES][i] = ArraySkeletonConstructor.get(ChartKeyList.PLOT_LINES, type);\n          input[C.VAXIS][vIndex][C.PLOT_LINES][i] && input[C.VAXIS][vIndex][C.PLOT_LINES][i][C.VALUE] != null && (chartJSON[C.VAXIS][vIndex][C.PLOT_LINES][i][C.VALUE] = input[C.VAXIS][vIndex][C.PLOT_LINES][i][C.VALUE]);\n          input[C.VAXIS][vIndex][C.PLOT_LINES][i] && input[C.VAXIS][vIndex][C.PLOT_LINES][i][C.LINE_COLOR] != null && (chartJSON[C.VAXIS][vIndex][C.PLOT_LINES][i][C.LINE_COLOR] = input[C.VAXIS][vIndex][C.PLOT_LINES][i][C.LINE_COLOR]);\n          input[C.VAXIS][vIndex][C.PLOT_LINES][i] && input[C.VAXIS][vIndex][C.PLOT_LINES][i][C.LINE_TYPE] != null && (chartJSON[C.VAXIS][vIndex][C.PLOT_LINES][i][C.LINE_TYPE] = input[C.VAXIS][vIndex][C.PLOT_LINES][i][C.LINE_TYPE]);\n          input[C.VAXIS][vIndex][C.PLOT_LINES][i] && input[C.VAXIS][vIndex][C.PLOT_LINES][i][C.LABEL] && input[C.VAXIS][vIndex][C.PLOT_LINES][i][C.LABEL][C.TEXT] != null && (chartJSON[C.VAXIS][vIndex][C.PLOT_LINES][i][C.LABEL][C.TEXT] = input[C.VAXIS][vIndex][C.PLOT_LINES][i][C.LABEL][C.TEXT]);\n          input[C.VAXIS][vIndex][C.PLOT_LINES][i] && input[C.VAXIS][vIndex][C.PLOT_LINES][i][C.LABEL] && input[C.VAXIS][vIndex][C.PLOT_LINES][i][C.LABEL][C.FONT_SIZE] != null && (chartJSON[C.VAXIS][vIndex][C.PLOT_LINES][i][C.LABEL][C.FONT_SIZE] = input[C.VAXIS][vIndex][C.PLOT_LINES][i][C.LABEL][C.FONT_SIZE]);\n          input[C.VAXIS][vIndex][C.PLOT_LINES][i] && input[C.VAXIS][vIndex][C.PLOT_LINES][i][C.LABEL] && input[C.VAXIS][vIndex][C.PLOT_LINES][i][C.LABEL][C.FONT_COLOR] != null && (chartJSON[C.VAXIS][vIndex][C.PLOT_LINES][i][C.LABEL][C.FONT_COLOR] = input[C.VAXIS][vIndex][C.PLOT_LINES][i][C.LABEL][C.FONT_COLOR]);\n          input[C.VAXIS][vIndex][C.PLOT_LINES][i] && input[C.VAXIS][vIndex][C.PLOT_LINES][i][C.LABEL] && input[C.VAXIS][vIndex][C.PLOT_LINES][i][C.LABEL][C.FONT_WEIGHT] != null && (chartJSON[C.VAXIS][vIndex][C.PLOT_LINES][i][C.LABEL][C.FONT_WEIGHT] = input[C.VAXIS][vIndex][C.PLOT_LINES][i][C.LABEL][C.FONT_WEIGHT]);\n          input[C.VAXIS][vIndex][C.PLOT_LINES][i] && input[C.VAXIS][vIndex][C.PLOT_LINES][i][C.LABEL] && input[C.VAXIS][vIndex][C.PLOT_LINES][i][C.LABEL][C.FONT_STYLE] != null && (chartJSON[C.VAXIS][vIndex][C.PLOT_LINES][i][C.LABEL][C.FONT_STYLE] = input[C.VAXIS][vIndex][C.PLOT_LINES][i][C.LABEL][C.FONT_STYLE]);\n        }\n      }\n    }\n\n    function setVAxisGridlines(chartJSON, input, type, inputType, vIndex) {\n      if (inputType.indexOf(C.JSON) != -1) {\n        input[C.VAXIS][vIndex][C.GRIDLINES] && input[C.VAXIS][vIndex][C.GRIDLINES][C.MAJOR_GRIDLINE_ENABLED] != null && (chartJSON[C.VAXIS][vIndex][C.GRIDLINES][C.MAJOR_GRIDLINE_ENABLED] = input[C.VAXIS][vIndex][C.GRIDLINES][C.MAJOR_GRIDLINE_ENABLED]);\n        input[C.VAXIS][vIndex][C.GRIDLINES] && input[C.VAXIS][vIndex][C.GRIDLINES][C.MAJOR_GRIDLINE_COUNT] != null && (chartJSON[C.VAXIS][vIndex][C.GRIDLINES][C.MAJOR_GRIDLINE_COUNT] = input[C.VAXIS][vIndex][C.GRIDLINES][C.MAJOR_GRIDLINE_COUNT]);\n        input[C.VAXIS][vIndex][C.GRIDLINES] && input[C.VAXIS][vIndex][C.GRIDLINES][C.MAJOR_GRIDLINE_LINE_TYPE] != null && (chartJSON[C.VAXIS][vIndex][C.GRIDLINES][C.MAJOR_GRIDLINE_LINE_TYPE] = input[C.VAXIS][vIndex][C.GRIDLINES][C.MAJOR_GRIDLINE_LINE_TYPE]);\n        input[C.VAXIS][vIndex][C.GRIDLINES] && input[C.VAXIS][vIndex][C.GRIDLINES][C.MAJOR_GRIDLINE_LINE_COLOR] != null && (chartJSON[C.VAXIS][vIndex][C.GRIDLINES][C.MAJOR_GRIDLINE_LINE_COLOR] = input[C.VAXIS][vIndex][C.GRIDLINES][C.MAJOR_GRIDLINE_LINE_COLOR]);\n        input[C.VAXIS][vIndex][C.GRIDLINES] && input[C.VAXIS][vIndex][C.GRIDLINES][C.MINOR_GRIDLINE_ENABLED] != null && (chartJSON[C.VAXIS][vIndex][C.GRIDLINES][C.MINOR_GRIDLINE_ENABLED] = input[C.VAXIS][vIndex][C.GRIDLINES][C.MINOR_GRIDLINE_ENABLED]);\n        input[C.VAXIS][vIndex][C.GRIDLINES] && input[C.VAXIS][vIndex][C.GRIDLINES][C.MINOR_GRIDLINE_LINE_TYPE] != null && (chartJSON[C.VAXIS][vIndex][C.GRIDLINES][C.MINOR_GRIDLINE_LINE_TYPE] = input[C.VAXIS][vIndex][C.GRIDLINES][C.MINOR_GRIDLINE_LINE_TYPE]);\n        input[C.VAXIS][vIndex][C.GRIDLINES] && input[C.VAXIS][vIndex][C.GRIDLINES][C.MINOR_GRIDLINE_LINE_COLOR] != null && (chartJSON[C.VAXIS][vIndex][C.GRIDLINES][C.MINOR_GRIDLINE_LINE_COLOR] = input[C.VAXIS][vIndex][C.GRIDLINES][C.MINOR_GRIDLINE_LINE_COLOR]);\n      }\n    }\n\n    function setVAxisProperties(chartJSON, input, type, inputType) {\n      //Issue in HighCharts - Must have atleast one object in x axis and y axis\n      chartJSON[C.VAXIS][0] = ArraySkeletonConstructor.get(ChartKeyList.VAXIS, type);\n\n      if (inputType.indexOf(C.JSON) != -1) {\n        var v_axis_length = input[C.VAXIS] ? input[C.VAXIS].length : 0;\n\n        for (var i = 0; i < v_axis_length; i++) {\n          chartJSON[C.VAXIS][i] = ArraySkeletonConstructor.get(ChartKeyList.VAXIS, type);\n\n          if (type.indexOf(C.STACKED_COL) != -1 || type.indexOf(C.STACKED_BAR) != -1) {\n            input[C.VAXIS][i] && input[C.VAXIS][i][C.STACK_LABELS] && input[C.VAXIS][i][C.STACK_LABELS][C.ENABLED] != null && (chartJSON[C.VAXIS][i][C.STACK_LABELS][C.ENABLED] = input[C.VAXIS][i][C.STACK_LABELS][C.ENABLED]);\n            input[C.VAXIS][i] && input[C.VAXIS][i][C.STACK_LABELS] && input[C.VAXIS][i][C.STACK_LABELS][C.FONT_SIZE] && (chartJSON[C.VAXIS][i][C.STACK_LABELS][C.FONT_SIZE] = input[C.VAXIS][i][C.STACK_LABELS][C.FONT_SIZE]);\n            input[C.VAXIS][i] && input[C.VAXIS][i][C.STACK_LABELS] && input[C.VAXIS][i][C.STACK_LABELS][C.FONT_COLOR] && (chartJSON[C.VAXIS][i][C.STACK_LABELS][C.FONT_COLOR] = input[C.VAXIS][i][C.STACK_LABELS][C.FONT_COLOR]);\n            input[C.VAXIS][i] && input[C.VAXIS][i][C.STACK_LABELS] && input[C.VAXIS][i][C.STACK_LABELS][C.FONT_WEIGHT] && (chartJSON[C.VAXIS][i][C.STACK_LABELS][C.FONT_WEIGHT] = input[C.VAXIS][i][C.STACK_LABELS][C.FONT_WEIGHT]);\n            input[C.VAXIS][i] && input[C.VAXIS][i][C.STACK_LABELS] && input[C.VAXIS][i][C.STACK_LABELS][C.FONT_STYLE] && (chartJSON[C.VAXIS][i][C.STACK_LABELS][C.FONT_STYLE] = input[C.VAXIS][i][C.STACK_LABELS][C.FONT_STYLE]);\n          }\n\n          input[C.VAXIS][i] && input[C.VAXIS][i][C.LABELS] && input[C.VAXIS][i][C.LABELS][C.ENABLED] != null && (chartJSON[C.VAXIS][i][C.LABELS][C.ENABLED] = input[C.VAXIS][i][C.LABELS][C.ENABLED]);\n          input[C.VAXIS][i] && input[C.VAXIS][i][C.LABELS] && input[C.VAXIS][i][C.LABELS][C.FONT_SIZE] && (chartJSON[C.VAXIS][i][C.LABELS][C.FONT_SIZE] = input[C.VAXIS][i][C.LABELS][C.FONT_SIZE]);\n          input[C.VAXIS][i] && input[C.VAXIS][i][C.LABELS] && input[C.VAXIS][i][C.LABELS][C.FONT_COLOR] && (chartJSON[C.VAXIS][i][C.LABELS][C.FONT_COLOR] = input[C.VAXIS][i][C.LABELS][C.FONT_COLOR]);\n          input[C.VAXIS][i] && input[C.VAXIS][i][C.LABELS] && input[C.VAXIS][i][C.LABELS][C.FONT_WEIGHT] && (chartJSON[C.VAXIS][i][C.LABELS][C.FONT_WEIGHT] = input[C.VAXIS][i][C.LABELS][C.FONT_WEIGHT]);\n          input[C.VAXIS][i] && input[C.VAXIS][i][C.LABELS] && input[C.VAXIS][i][C.LABELS][C.FONT_STYLE] && (chartJSON[C.VAXIS][i][C.LABELS][C.FONT_STYLE] = input[C.VAXIS][i][C.LABELS][C.FONT_STYLE]);\n          input[C.VAXIS][i] && input[C.VAXIS][i][C.TITLE] && input[C.VAXIS][i][C.TITLE][C.TEXT] && (chartJSON[C.VAXIS][i][C.TITLE][C.TEXT] = input[C.VAXIS][i][C.TITLE][C.TEXT]);\n          input[C.VAXIS][i] && input[C.VAXIS][i][C.TITLE] && input[C.VAXIS][i][C.TITLE][C.FONT_SIZE] && (chartJSON[C.VAXIS][i][C.TITLE][C.FONT_SIZE] = input[C.VAXIS][i][C.TITLE][C.FONT_SIZE]);\n          input[C.VAXIS][i] && input[C.VAXIS][i][C.TITLE] && input[C.VAXIS][i][C.TITLE][C.FONT_COLOR] && (chartJSON[C.VAXIS][i][C.TITLE][C.FONT_COLOR] = input[C.VAXIS][i][C.TITLE][C.FONT_COLOR]);\n          input[C.VAXIS][i] && input[C.VAXIS][i][C.TITLE] && input[C.VAXIS][i][C.TITLE][C.FONT_WEIGHT] && (chartJSON[C.VAXIS][i][C.TITLE][C.FONT_WEIGHT] = input[C.VAXIS][i][C.TITLE][C.FONT_WEIGHT]);\n          input[C.VAXIS][i] && input[C.VAXIS][i][C.TITLE] && input[C.VAXIS][i][C.TITLE][C.FONT_STYLE] && (chartJSON[C.VAXIS][i][C.TITLE][C.FONT_STYLE] = input[C.VAXIS][i][C.TITLE][C.FONT_STYLE]);\n          input[C.VAXIS][i] && input[C.VAXIS][i][C.PREFIX] && (chartJSON[C.VAXIS][i][C.PREFIX] = input[C.VAXIS][i][C.PREFIX]);\n          input[C.VAXIS][i] && input[C.VAXIS][i][C.SUFFIX] && (chartJSON[C.VAXIS][i][C.SUFFIX] = input[C.VAXIS][i][C.SUFFIX]);\n          input[C.VAXIS][i] && input[C.VAXIS][i][C.MIN] && (chartJSON[C.VAXIS][i][C.MIN] = input[C.VAXIS][i][C.MIN]);\n          input[C.VAXIS][i] && input[C.VAXIS][i][C.MAX] && (chartJSON[C.VAXIS][i][C.MAX] = input[C.VAXIS][i][C.MAX]);\n          input[C.VAXIS][i] && input[C.VAXIS][i][C.VISIBLE] && (chartJSON[C.VAXIS][i][C.VISIBLE] = input[C.VAXIS][i][C.VISIBLE]);\n          input[C.VAXIS][i] && input[C.VAXIS][i][C.OPPOSITE] && (chartJSON[C.VAXIS][i][C.OPPOSITE] = input[C.VAXIS][i][C.OPPOSITE]);\n          input[C.VAXIS][i] && input[C.VAXIS][i][C.TICK_INTERVAL] && (chartJSON[C.VAXIS][i][C.TICK_INTERVAL] = input[C.VAXIS][i][C.TICK_INTERVAL]);\n          input[C.VAXIS][i] && input[C.VAXIS][i][C.SCALE_TYPE] && (chartJSON[C.VAXIS][i][C.SCALE_TYPE] = input[C.VAXIS][i][C.SCALE_TYPE]);\n          input[C.VAXIS][i] && input[C.VAXIS][i][C.BASE_VALUE] && (chartJSON[C.VAXIS][i][C.BASE_VALUE] = input[C.VAXIS][i][C.BASE_VALUE]);\n          keyToFunction[ChartKeyList.PLOT_LINES](chartJSON, input, type, inputType, i);\n          keyToFunction[ChartKeyList.V_GRIDLINE](chartJSON, input, type, inputType, i);\n        }\n      }\n    }\n\n    function setToolTipStatus(chartJSON, input, type, inputType) {\n      if (inputType.indexOf(C.JSON) != -1) {\n        if (input[C.TOOLTIP] && input[C.TOOLTIP][C.ENABLED] != null) {\n          chartJSON[C.TOOLTIP][C.ENABLED] = input[C.TOOLTIP][C.ENABLED];\n        } else {\n          chartJSON[C.TOOLTIP][C.ENABLED] = DEFAULTS.TOOLTIP_STATUS;\n        }\n      }\n    }\n\n    function setSeriesProperties(chartJSON, input, type, inputType) {\n      // All the series default properties must be handled in HCSeriesPropertiesHandler\n      if (inputType.indexOf(C.JSON) != -1) {\n        var series_properties_length = input[C.SERIES_PROPERTIES] ? input[C.SERIES_PROPERTIES].length : 0;\n\n        for (var i = 0; i < series_properties_length; i++) {\n          var localChartType = input[C.SERIES_PROPERTIES] && input[C.SERIES_PROPERTIES][i] && input[C.SERIES_PROPERTIES][i][C.TYPE] != null ? input[C.SERIES_PROPERTIES][i][C.TYPE] : type;\n          chartJSON[C.SERIES_PROPERTIES][i] = ArraySkeletonConstructor.get(ChartKeyList.SERIES_PROPERTIES, localChartType);\n\n          if (input[C.SERIES_PROPERTIES][i]) {\n            input[C.SERIES_PROPERTIES][i][C.DECIMALS] && (chartJSON[C.SERIES_PROPERTIES][i][C.DECIMALS] = input[C.SERIES_PROPERTIES][i][C.DECIMALS]);\n            input[C.SERIES_PROPERTIES][i][C.ENABLE_CUMULATION] && (chartJSON[C.SERIES_PROPERTIES][i][C.ENABLE_CUMULATION] = input[C.SERIES_PROPERTIES][i][C.ENABLE_CUMULATION]);\n            input[C.SERIES_PROPERTIES][i][C.SERIES_COLOR] && (chartJSON[C.SERIES_PROPERTIES][i][C.SERIES_COLOR] = input[C.SERIES_PROPERTIES][i][C.SERIES_COLOR]);\n            input[C.SERIES_PROPERTIES][i][C.TYPE] && (chartJSON[C.SERIES_PROPERTIES][i][C.TYPE] = input[C.SERIES_PROPERTIES][i][C.TYPE]);\n\n            if (input[C.SERIES_PROPERTIES][i][C.TARGET_OPTIONS]) {\n              input[C.SERIES_PROPERTIES][i][C.TARGET_OPTIONS][C.COLOR] && (chartJSON[C.SERIES_PROPERTIES][i][C.TARGET_OPTIONS][C.COLOR] = input[C.SERIES_PROPERTIES][i][C.TARGET_OPTIONS][C.COLOR]);\n            }\n\n            input[C.SERIES_PROPERTIES][i][C.BORDER_COLOR] && (chartJSON[C.SERIES_PROPERTIES][i][C.BORDER_COLOR] = input[C.SERIES_PROPERTIES][i][C.BORDER_COLOR]);\n            input[C.SERIES_PROPERTIES][i][C.MARKER_STATUS] && (chartJSON[C.SERIES_PROPERTIES][i][C.MARKER_STATUS] = input[C.SERIES_PROPERTIES][i][C.MARKER_STATUS]);\n            input[C.SERIES_PROPERTIES][i][C.MARKER_SHAPE] && (chartJSON[C.SERIES_PROPERTIES][i][C.MARKER_SHAPE] = input[C.SERIES_PROPERTIES][i][C.MARKER_SHAPE]);\n            input[C.SERIES_PROPERTIES][i][C.MARKER_SIZE] && (chartJSON[C.SERIES_PROPERTIES][i][C.MARKER_SIZE] = input[C.SERIES_PROPERTIES][i][C.MARKER_SIZE]);\n            input[C.SERIES_PROPERTIES][i][C.MARKER_COLOR] && (chartJSON[C.SERIES_PROPERTIES][i][C.MARKER_COLOR] = input[C.SERIES_PROPERTIES][i][C.MARKER_COLOR]);\n            input[C.SERIES_PROPERTIES][i][C.MARKER_BORDER_COLOR] && (chartJSON[C.SERIES_PROPERTIES][i][C.MARKER_BORDER_COLOR] = input[C.SERIES_PROPERTIES][i][C.MARKER_BORDER_COLOR]);\n            input[C.SERIES_PROPERTIES][i][C.LINE_TYPE] && (chartJSON[C.SERIES_PROPERTIES][i][C.LINE_TYPE] = input[C.SERIES_PROPERTIES][i][C.LINE_TYPE]);\n            input[C.SERIES_PROPERTIES][i][C.AREA_OPACITY] && (chartJSON[C.SERIES_PROPERTIES][i][C.AREA_OPACITY] = input[C.SERIES_PROPERTIES][i][C.AREA_OPACITY]);\n            input[C.SERIES_PROPERTIES][i][C.THRESHOLD] && (chartJSON[C.SERIES_PROPERTIES][i][C.THRESHOLD] = input[C.SERIES_PROPERTIES][i][C.THRESHOLD]);\n            input[C.SERIES_PROPERTIES][i][C.NEGATIVE_COLOR] && (chartJSON[C.SERIES_PROPERTIES][i][C.NEGATIVE_COLOR] = input[C.SERIES_PROPERTIES][i][C.NEGATIVE_COLOR]);\n            input[C.SERIES_PROPERTIES][i][C.SORT_ORDER] && (chartJSON[C.SERIES_PROPERTIES][i][C.SORT_ORDER] = input[C.SERIES_PROPERTIES][i][C.SORT_ORDER]); //Datalabels\n\n            if (input[C.SERIES_PROPERTIES][i][C.DATALABELS]) {\n              var dataLables = input[C.SERIES_PROPERTIES][i][C.DATALABELS];\n              dataLables[C.ENABLED] != null && (chartJSON[C.SERIES_PROPERTIES][i][C.DATALABELS][C.ENABLED] = dataLables[C.ENABLED]);\n              dataLables[C.FORMAT] != null && (chartJSON[C.SERIES_PROPERTIES][i][C.DATALABELS][C.FORMAT] = dataLables[C.FORMAT]);\n              dataLables[C.FONT_STYLE] != null && (chartJSON[C.SERIES_PROPERTIES][i][C.DATALABELS][C.FONT_STYLE] = dataLables[C.FONT_STYLE]);\n              dataLables[C.FONT_COLOR] != null && (chartJSON[C.SERIES_PROPERTIES][i][C.DATALABELS][C.FONT_COLOR] = dataLables[C.FONT_COLOR]);\n              dataLables[C.FONT_SIZE] != null && (chartJSON[C.SERIES_PROPERTIES][i][C.DATALABELS][C.FONT_SIZE] = dataLables[C.FONT_SIZE]);\n              dataLables[C.FONT_WEIGHT] != null && (chartJSON[C.SERIES_PROPERTIES][i][C.DATALABELS][C.FONT_WEIGHT] = dataLables[C.FONT_WEIGHT]);\n              dataLables[C.POSITION] != null && (chartJSON[C.SERIES_PROPERTIES][i][C.DATALABELS][C.POSITION] = dataLables[C.POSITION]);\n            } //Trendline\n\n\n            if (input[C.SERIES_PROPERTIES][i][C.TRENDLINE]) {\n              var trendline = input[C.SERIES_PROPERTIES][i][C.TRENDLINE];\n              trendline[C.ENABLED] != null && (chartJSON[C.SERIES_PROPERTIES][i][C.TRENDLINE][C.ENABLED] = trendline[C.ENABLED]);\n              trendline[C.TYPE] != null && (chartJSON[C.SERIES_PROPERTIES][i][C.TRENDLINE][C.TYPE] = trendline[C.TYPE]);\n              trendline[C.ORDER] != null && (chartJSON[C.SERIES_PROPERTIES][i][C.TRENDLINE][C.ORDER] = trendline[C.ORDER]);\n              trendline[C.LINE_TYPE] != null && (chartJSON[C.SERIES_PROPERTIES][i][C.TRENDLINE][C.LINE_TYPE] = trendline[C.LINE_TYPE]);\n            } //Pie Properties\n\n\n            input[C.SERIES_PROPERTIES][i][C.START_ANGLE] && (chartJSON[C.SERIES_PROPERTIES][i][C.START_ANGLE] = input[C.SERIES_PROPERTIES][i][C.START_ANGLE]); //Data Properties\n\n            if (input[C.SERIES_PROPERTIES][i][C.DATA_PROPERTIES]) {\n              var dataProperties = input[C.SERIES_PROPERTIES][i][C.DATA_PROPERTIES];\n              var dataPropertiesLen = dataProperties ? dataProperties.length : 0;\n\n              for (var j = 0; j < dataPropertiesLen; j++) {\n                chartJSON[C.SERIES_PROPERTIES][i][C.DATA_PROPERTIES][j] = {};\n                dataProperties[j] && dataProperties[j][C.DATA_COLOR] && (chartJSON[C.SERIES_PROPERTIES][i][C.DATA_PROPERTIES][j][C.DATA_COLOR] = dataProperties[j][C.DATA_COLOR]);\n                dataProperties[j] && dataProperties[j][C.BORDER_COLOR] && (chartJSON[C.SERIES_PROPERTIES][i][C.DATA_PROPERTIES][j][C.BORDER_COLOR] = dataProperties[j][C.BORDER_COLOR]);\n              }\n            }\n          }\n        }\n      }\n    }\n\n    var keyToFunction = {};\n    keyToFunction[ChartKeyList.RENDER_ID] = setChartRenderId;\n    keyToFunction[ChartKeyList.CHART_FONT_FAMILY] = setChartFontFamily;\n    keyToFunction[ChartKeyList.CHART_WIDTH] = setChartWidth;\n    keyToFunction[ChartKeyList.CHART_HEIGHT] = setChartHeight;\n    keyToFunction[ChartKeyList.TYPE] = setChartType;\n    keyToFunction[ChartKeyList.INVERTED] = setInverted;\n    keyToFunction[ChartKeyList.BORDER_COLOR] = setBorderColor;\n    keyToFunction[ChartKeyList.BACKGROUND_COLOR] = setBackGroundColor;\n    keyToFunction[ChartKeyList.GRADIENT_ENABLED] = setGradientStatus;\n    keyToFunction[ChartKeyList.ANIMATION_DURATION] = setAnimationDuration;\n    keyToFunction[ChartKeyList.COLORS] = setColors;\n    keyToFunction[ChartKeyList.CAPTION_ENABLED] = setCaptionEnabled;\n    keyToFunction[ChartKeyList.CAPTION_FONT_SIZE] = setCaptionFontSize;\n    keyToFunction[ChartKeyList.CAPTION_FONT_COLOR] = setCaptionFontColor;\n    keyToFunction[ChartKeyList.CAPTION_FONT_STYLE] = setCaptionFontStyle;\n    keyToFunction[ChartKeyList.CAPTION_FONT_WEIGHT] = setCaptionFontWeight;\n    keyToFunction[ChartKeyList.TITLE_TEXT] = setTitleText;\n    keyToFunction[ChartKeyList.TITLE_FONT_SIZE] = setTitleFontSize;\n    keyToFunction[ChartKeyList.TITLE_FONT_COLOR] = setTitleFontColor;\n    keyToFunction[ChartKeyList.TITLE_FONT_STYLE] = setTitleFontStyle;\n    keyToFunction[ChartKeyList.TITLE_FONT_WEIGHT] = setTitleFontWeight;\n    keyToFunction[ChartKeyList.SUBTITLE_TEXT] = setSubTitleText;\n    keyToFunction[ChartKeyList.SUBTITLE_FONT_SIZE] = setSubtitleFontSize;\n    keyToFunction[ChartKeyList.SUBTITLE_FONT_COLOR] = setSubtitleFontColor;\n    keyToFunction[ChartKeyList.SUBTITLE_FONT_STYLE] = setSubtitleFontStyle;\n    keyToFunction[ChartKeyList.SUBTITLE_FONT_WEIGHT] = setSubtitleFontWeight;\n    keyToFunction[ChartKeyList.LEGEND_HALIGN] = setLegendHAlign;\n    keyToFunction[ChartKeyList.LEGEND_VALIGN] = setLegendVAlign;\n    keyToFunction[ChartKeyList.LEGEND_STATUS] = setLegendStatus;\n    keyToFunction[ChartKeyList.LEGEND_FONT_SIZE] = setLegendFontSize;\n    keyToFunction[ChartKeyList.LEGEND_FONT_COLOR] = setLegendFontColor;\n    keyToFunction[ChartKeyList.LEGEND_FONT_STYLE] = setLegendFontStyle;\n    keyToFunction[ChartKeyList.LEGEND_FONT_WEIGHT] = setLegendFontWeight;\n    keyToFunction[ChartKeyList.HAXIS] = setHAxisProperties;\n    keyToFunction[ChartKeyList.H_GRIDLINE] = setHAxisGridlines;\n    keyToFunction[ChartKeyList.VAXIS] = setVAxisProperties;\n    keyToFunction[ChartKeyList.PLOT_LINES] = setVAxisPlotLines;\n    keyToFunction[ChartKeyList.V_GRIDLINE] = setVAxisGridlines;\n    keyToFunction[ChartKeyList.SERIES_PROPERTIES] = setSeriesProperties;\n    keyToFunction[ChartKeyList.TOOLTIP_ENABLED] = setToolTipStatus;\n    keyToFunction[ChartKeyList.DONUT_TOTAL_DATALABELS_ENABLED] = setDonutTotalDatalabelsStatus;\n    keyToFunction[ChartKeyList.DONUT_TOTAL_DATALABELS_FONT_SIZE] = setDonutTotalDatalabelsFontSize;\n    keyToFunction[ChartKeyList.DONUT_TOTAL_DATALABELS_FONT_COLOR] = setDonutTotalDatalabelsFontColor;\n    keyToFunction[ChartKeyList.DONUT_TOTAL_DATALABELS_FONT_STYLE] = setDonutTotalDatalabelsFontStyle;\n    keyToFunction[ChartKeyList.DONUT_TOTAL_DATALABELS_FONT_WEIGHT] = setDonutTotalDatalabelsFontWeight;\n\n    function getJSON(keyList, chartJSON, input, type, inputType) {\n      var keysLen = keyList ? keyList.length : 0;\n\n      for (var i = 0; i < keysLen; i++) {\n        if (keyToFunction[keyList[i]]) {\n          keyToFunction[keyList[i]](chartJSON, input, type, inputType);\n        }\n      }\n    }\n\n    return {\n      convert: function convert(type, chartJSON, input, inputType) {\n        var keyList = chartTypeToKeys[type];\n        return getJSON(keyList, chartJSON, input, type, inputType);\n      }\n    };\n  }();\n\n  ctx.ChartJSONConvertor = ChartJSONConvertor;\n})(window || this);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/Utils/ChartJSONConvertor.js\n");

/***/ }),

/***/ "./js/Utils/ChartKeyList.js":
/*!**********************************!*\
  !*** ./js/Utils/ChartKeyList.js ***!
  \**********************************/
/***/ (function() {

"use strict";
eval("/*$Id$*/\n //No I18N\n\n(function (ctx) {\n  var ChartKeyList = ctx.ChartKeyList = {}; //Only for skeleton construction and json parsing\n\n  ChartKeyList.CHART = \"chart\"; //No I18N\n\n  ChartKeyList.CHART_FONT_FAMILY = \"chart_font_family\"; //No I18N\n\n  ChartKeyList.CHART_WIDTH = \"chart_width\"; //No I18N\n\n  ChartKeyList.CHART_HEIGHT = \"chart_height\"; //No I18N\n\n  ChartKeyList.RENDER_ID = \"renderId\"; //No I18N\n\n  ChartKeyList.INVERTED = \"inverted\"; //No I18N\n\n  ChartKeyList.TYPE = \"type\"; //No I18N\n\n  ChartKeyList.BORDER_COLOR = \"bg_color\"; //No I18N\n\n  ChartKeyList.BACKGROUND_COLOR = \"border_color\"; //No I18N\n\n  ChartKeyList.GRADIENT = \"gradient\"; //No I18N\n\n  ChartKeyList.GRADIENT_ENABLED = \"gradient_enabled\"; //No I18N\n\n  ChartKeyList.COLORS = \"colors\"; //No I18N\n\n  ChartKeyList.TITLE = \"title\"; //No I18N\n\n  ChartKeyList.TITLE_TEXT = \"title_text\"; //No I18N\n\n  ChartKeyList.TITLE_FONT_STYLE = \"title_font_style\"; //No I18N\n\n  ChartKeyList.TITLE_FONT_WEIGHT = \"title_font_weight\"; //No I18N\n\n  ChartKeyList.TITLE_FONT_SIZE = \"title_font_size\"; //No I18N\n\n  ChartKeyList.TITLE_FONT_COLOR = \"title_font_color\"; //No I18N\n\n  ChartKeyList.SUBTITLE = \"subtitle\"; //No I18N\n\n  ChartKeyList.SUBTITLE_TEXT = \"subtitle_text\"; //No I18N\n\n  ChartKeyList.SUBTITLE_FONT_STYLE = \"subtitle_font_style\"; //No I18N\n\n  ChartKeyList.SUBTITLE_FONT_WEIGHT = \"subtitle_font_weight\"; //No I18N\n\n  ChartKeyList.SUBTITLE_FONT_SIZE = \"subtitle_font_size\"; //No I18N\n\n  ChartKeyList.SUBTITLE_FONT_COLOR = \"subtitle_font_color\"; //No I18N\n\n  ChartKeyList.LEGEND = \"legend\"; //No I18N\n\n  ChartKeyList.LEGEND_HALIGN = \"hAlign\"; //No I18N\n\n  ChartKeyList.LEGEND_VALIGN = \"vAlign\"; //No I18N\n\n  ChartKeyList.LEGEND_STATUS = \"legend_status\"; //No I18N\n\n  ChartKeyList.LEGEND_FONT_STYLE = \"legend_font_style\"; //No I18N\n\n  ChartKeyList.LEGEND_FONT_WEIGHT = \"legend_font_weight\"; //No I18N\n\n  ChartKeyList.LEGEND_FONT_SIZE = \"legend_font_size\"; //No I18N\n\n  ChartKeyList.LEGEND_FONT_COLOR = \"legend_font_color\"; //No I18N\n\n  ChartKeyList.DATALABEL = \"datalabel\"; //No I18N\n\n  ChartKeyList.DATALABEL_ENABLED = \"datalabel_enabled\"; //No I18N\n\n  ChartKeyList.DATALABEL_FONT_STYLE = \"datalabel_font_style\"; //No I18N\n\n  ChartKeyList.DATALABEL_FONT_WEIGHT = \"datalabel_font_weight\"; //No I18N\n\n  ChartKeyList.DATALABEL_FONT_SIZE = \"datalabel_font_size\"; //No I18N\n\n  ChartKeyList.DATALABEL_FONT_COLOR = \"datalabel_font_color\"; //No I18N\n\n  ChartKeyList.DATALABEL_FORMAT = \"datalabel_format\"; //No I18N\n\n  ChartKeyList.DATALABEL_POSITION = \"datalabel_position\"; //No I18N\n\n  ChartKeyList.TOTAL_DATALABEL = \"total_datalabel\"; //No I18N\n\n  ChartKeyList.TOTAL_DATALABEL_ENABLED = \"total_datalabel_enabled\"; //No I18N\n\n  ChartKeyList.TOTAL_DATALABEL_FONT_STYLE = \"total_datalabel_font_style\"; //No I18N\n\n  ChartKeyList.TOTAL_DATALABEL_FONT_WEIGHT = \"total_datalabel_font_weight\"; //No I18N\n\n  ChartKeyList.TOTAL_DATALABEL_FONT_SIZE = \"total_datalabel_font_size\"; //No I18N\n\n  ChartKeyList.TOTAL_DATALABEL_FONT_COLOR = \"total_datalabel_font_color\"; //No I18N\n\n  ChartKeyList.CAPTION = \"caption\"; //No I18N\n\n  ChartKeyList.CAPTION_ENABLED = \"caption_enabled\"; //No I18N\n\n  ChartKeyList.CAPTION_FONT_STYLE = \"caption_font_style\"; //No I18N\n\n  ChartKeyList.CAPTION_FONT_WEIGHT = \"caption_font_weight\"; //No I18N\n\n  ChartKeyList.CAPTION_FONT_SIZE = \"caption_font_size\"; //No I18N\n\n  ChartKeyList.CAPTION_FONT_COLOR = \"caption_font_color\"; //No I18N\n\n  ChartKeyList.HAXIS = \"horizontal_axis\"; //No I18N\n\n  ChartKeyList.H_LABELS = \"h_labels\"; //No I18N\n\n  ChartKeyList.H_LABELS_ENABLED = \"h_labels_enabled\"; //No I18N\n\n  ChartKeyList.H_LABELS_FONT_STYLE = \"h_labels_font_style\"; //No I18N\n\n  ChartKeyList.H_LABELS_FONT_WEIGHT = \"h_labels_font_weight\"; //No I18N\n\n  ChartKeyList.H_LABELS_FONT_SIZE = \"h_labels_font_size\"; //No I18N\n\n  ChartKeyList.H_LABELS_FONT_COLOR = \"h_labels_font_color\"; //No I18N\n\n  ChartKeyList.H_TITLE = \"h_title\"; //No I18N\n\n  ChartKeyList.H_TITLE_TEXT = \"h_title_text\"; //No I18N\n\n  ChartKeyList.HTITLE_FONT_STYLE = \"htitle_font_style\"; //No I18N\n\n  ChartKeyList.HTITLE_FONT_WEIGHT = \"htitle_font_weight\"; //No I18N\n\n  ChartKeyList.HTITLE_FONT_SIZE = \"htitle_font_size\"; //No I18N\n\n  ChartKeyList.HTITLE_FONT_COLOR = \"htitle_font_color\"; //No I18N\n\n  ChartKeyList.H_GRIDLINE = \"h_gridLine\"; //No I18N\n\n  ChartKeyList.H_MAJOR_GRIDLINE_ENABLED = \"h_majorGridLineEnabled\"; //No I18N\n\n  ChartKeyList.H_MAJOR_GRIDLINE_COUNT = \"h_majorGridLineCount\"; //No I18N\n\n  ChartKeyList.H_MAJOR_GRIDLINE_LINE_TYPE = \"h_majorGridLineLineType\"; //No I18N\n\n  ChartKeyList.H_MAJOR_GRIDLINE_LINE_COLOR = \"h_majorGridLineLineColor\"; //No I18N\n\n  ChartKeyList.H_MINOR_GRIDLINE_ENABLED = \"h_minorGridLineEnabled\"; //No I18N\n\n  ChartKeyList.H_MINOR_GRIDLINE_LINE_TYPE = \"h_minorGridLineLineType\"; //No I18N\n\n  ChartKeyList.H_MINOR_GRIDLINE_LINE_COLOR = \"h_minorGridLineLineColor\"; //No I18N\n\n  ChartKeyList.VAXIS = \"vertical_axis\"; //No I18N\n\n  ChartKeyList.V_LABELS = \"v_labels\"; //No I18N\n\n  ChartKeyList.V_LABELS_ENABLED = \"v_labels_enabled\"; //No I18N\n\n  ChartKeyList.V_LABELS_FONT_STYLE = \"v_labels_font_style\"; //No I18N\n\n  ChartKeyList.V_LABELS_FONT_WEIGHT = \"v_labels_font_weight\"; //No I18N\n\n  ChartKeyList.V_LABELS_FONT_SIZE = \"v_labels_font_size\"; //No I18N\n\n  ChartKeyList.V_LABELS_FONT_COLOR = \"v_labels_font_color\"; //No I18N\n\n  ChartKeyList.V_STACK_LABELS = \"v_stack_labels\"; //No I18N\n\n  ChartKeyList.V_STACK_LABELS_ENABLED = \"v_stack_labels_enabled\"; //No I18N\n\n  ChartKeyList.V_STACK_LABELS_FONT_STYLE = \"v_stack_labels_font_style\"; //No I18N\n\n  ChartKeyList.V_STACK_LABELS_FONT_WEIGHT = \"v_stack_labels_font_weight\"; //No I18N\n\n  ChartKeyList.V_STACK_LABELS_FONT_SIZE = \"v_stack_labels_font_size\"; //No I18N\n\n  ChartKeyList.V_STACK_LABELS_FONT_COLOR = \"v_stack_labels_font_color\"; //No I18N\n\n  ChartKeyList.V_TITLE = \"v_title\"; //No I18N\n\n  ChartKeyList.V_TITLE_TEXT = \"v_title_text\"; //No I18N\n\n  ChartKeyList.VTITLE_FONT_STYLE = \"vtitle_font_style\"; //No I18N\n\n  ChartKeyList.VTITLE_FONT_WEIGHT = \"vtitle_font_weight\"; //No I18N\n\n  ChartKeyList.VTITLE_FONT_SIZE = \"vtitle_font_size\"; //No I18N\n\n  ChartKeyList.VTITLE_FONT_COLOR = \"vtitle_font_color\"; //No I18N\n\n  ChartKeyList.V_MIN = \"v_min\"; //No I18N\n\n  ChartKeyList.V_MAX = \"v_max\"; //No I18N\n\n  ChartKeyList.V_TICK_INTERVAL = \"v_tick_interval\"; //No I18N\n\n  ChartKeyList.V_GRIDLINE = \"v_gridLine\"; //No I18N\n\n  ChartKeyList.V_MAJOR_GRIDLINE_ENABLED = \"v_majorGridLineEnabled\"; //No I18N\n\n  ChartKeyList.V_MAJOR_GRIDLINE_COUNT = \"v_majorGridLineCount\"; //No I18N\n\n  ChartKeyList.V_MAJOR_GRIDLINE_LINE_TYPE = \"v_majorGridLineLineType\"; //No I18N\n\n  ChartKeyList.V_MAJOR_GRIDLINE_LINE_COLOR = \"v_majorGridLineLineColor\"; //No I18N\n\n  ChartKeyList.V_MINOR_GRIDLINE_ENABLED = \"v_minorGridLineEnabled\"; //No I18N\n\n  ChartKeyList.V_MINOR_GRIDLINE_LINE_TYPE = \"v_minorGridLineLineType\"; //No I18N\n\n  ChartKeyList.V_MINOR_GRIDLINE_LINE_COLOR = \"v_minorGridLineLineColor\"; //No I18N\n\n  ChartKeyList.THRESHOLD = \"threshold\"; //No I18N\n\n  ChartKeyList.MARKERS = \"markers\"; //No I18N\n\n  ChartKeyList.PLOTOPTIONS = \"plotOptions\"; //No I18N\n\n  ChartKeyList.ANIMATION = \"animation\"; //No I18N\n\n  ChartKeyList.SERIES_PROPERTIES = \"series_properties\"; //No I18N\n\n  ChartKeyList.SERIES_COLORS = \"series_colors\"; //No I18N\n\n  ChartKeyList.SERIES_BORDER_COLOR = \"series_border_color\"; //No I18N\n\n  ChartKeyList.MARKER_STATUS = \"marker_status\"; //No I18N\n\n  ChartKeyList.MARKER_SHAPE = \"marker_shape\"; //No I18N\n\n  ChartKeyList.MARKER_SIZE = \"marker_size\"; //No I18N\n\n  ChartKeyList.MARKER_COLOR = \"marker_color\"; //No I18N\n\n  ChartKeyList.MARKER_BORDER_COLOR = \"marker_border_color\"; //No I18N\n\n  ChartKeyList.LINE_TYPE = \"line_type\"; //No I18N\n\n  ChartKeyList.AREA_OPACITY = \"area_opacity\"; //No I18N\n\n  ChartKeyList.PLOT_LINES = \"plotLines\"; //No I18N\n\n  ChartKeyList.PLOT_LINES_VALUE = \"plotLines_value\"; //No I18N\n\n  ChartKeyList.PLOT_LINES_TEXT = \"plotLines_text\"; //No I18N\n\n  ChartKeyList.PLOT_LINES_FONT_STYLE = \"plotLines_font_style\"; //No I18N\n\n  ChartKeyList.PLOT_LINES_FONT_WEIGHT = \"plotLines_font_weight\"; //No I18N\n\n  ChartKeyList.PLOT_LINES_FONT_SIZE = \"plotLines_font_size\"; //No I18N\n\n  ChartKeyList.PLOT_LINES_FONT_COLOR = \"plotLines_font_color\"; //No I18N\n\n  ChartKeyList.BASE_VALUE = \"base_value\"; //No I18N\n\n  ChartKeyList.NEGATIVE_COLOR = \"negative_color\"; //No I18N\n\n  ChartKeyList.TOOLTIP = \"tooltip\"; //No I18N\n\n  ChartKeyList.TOOLTIP_ENABLED = \"tooltip_enabled\"; //No I18N\n\n  ChartKeyList.TRENDLINE = \"trendline\"; //No I18N\n\n  ChartKeyList.TRENDLINE_ENABLED = \"trendline_enabled\"; //No I18N\n\n  ChartKeyList.TRENDLINE_TYPE = \"trendline_type\"; //No I18N\n\n  ChartKeyList.TRENDLINE_ORDER = \"trendline_order\"; //No I18N\n\n  ChartKeyList.TRENDLINE_LINETYPE = \"trendline_linetype\"; //No I18N\n\n  ChartKeyList.START_ANGLE = \"startAngle\"; //No I18N\n\n  ChartKeyList.BASELINE = \"baseLine\"; //No I18N\n\n  ChartKeyList.DONUT_TOTAL_DATALABELS = \"donut_total_datalabels\"; //No I18N\n\n  ChartKeyList.DONUT_TOTAL_DATALABELS_ENABLED = \"donut_total_datalabels_enabled\"; //No I18N\n\n  ChartKeyList.DONUT_TOTAL_DATALABELS_FONT_STYLE = \"donut_total_datalabels_font_style\"; //No I18N\n\n  ChartKeyList.DONUT_TOTAL_DATALABELS_FONT_WEIGHT = \"donut_total_datalabels_font_weight\"; //No I18N\n\n  ChartKeyList.DONUT_TOTAL_DATALABELS_FONT_SIZE = \"donut_total_datalabels_font_size\"; //No I18N\n\n  ChartKeyList.DONUT_TOTAL_DATALABELS_FONT_COLOR = \"donut_total_datalabels_font_color\"; //No I18N\n\n  ChartKeyList.BINNING_INTERVAL = \"binningInterval\"; //No I18N\n\n  ChartKeyList.SORT_ORDER = \"sortOrder\"; //No I18N\n\n  ChartKeyList.ANIMATION_DURATION = \"animation_duration\"; //No I18N\n\n  ChartKeyList.DATA_PROPERTIES = \"data_properties\"; //No I18N\n\n  ChartKeyList.TARGET_OPTIONS = \"target_options\"; //No I18N\n\n  ChartKeyList.TARGET_COLOR = \"target_color\"; //No I18N\n})(window || this);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/Utils/ChartKeyList.js\n");

/***/ }),

/***/ "./js/Utils/ChartMaps.js":
/*!*******************************!*\
  !*** ./js/Utils/ChartMaps.js ***!
  \*******************************/
/***/ (function() {

"use strict";
eval("/*$Id$*/\n //No I18N\n\n(function (ctx) {\n  var ChartController = ctx.ChartController;\n  var C = ctx.ChartConstants;\n  var KL = ctx.ChartKeyList;\n  var DEFAULTS = ctx.ChartDefaults.DEFAULTS;\n  var ChartMaps = ctx.ChartMaps = {};\n  /* Chart Type t0 Framework Map*/\n\n  var chartTypeToFramework = ChartMaps.chartTypeToFramework = {};\n  chartTypeToFramework[C.COL] = C.HIGHCHARTS;\n  chartTypeToFramework[C.GROUPED_COL] = C.HIGHCHARTS;\n  chartTypeToFramework[C.STACKED_COL] = C.HIGHCHARTS;\n  chartTypeToFramework[C.STACKED_PERCENT_COL] = C.HIGHCHARTS;\n  chartTypeToFramework[C.LINE] = C.HIGHCHARTS;\n  chartTypeToFramework[C.SPLINE] = C.HIGHCHARTS;\n  chartTypeToFramework[C.STEP_LINE] = C.HIGHCHARTS;\n  chartTypeToFramework[C.PIE] = C.HIGHCHARTS;\n  chartTypeToFramework[C.DONUT] = C.HIGHCHARTS;\n  chartTypeToFramework[C.SEMI_PIE] = C.HIGHCHARTS;\n  chartTypeToFramework[C.SEMI_DONUT] = C.HIGHCHARTS;\n  chartTypeToFramework[C.AREA] = C.HIGHCHARTS;\n  chartTypeToFramework[C.AREA_SPLINE] = C.HIGHCHARTS;\n  chartTypeToFramework[C.STACKED_AREA] = C.HIGHCHARTS;\n  chartTypeToFramework[C.STACKED_PERCENT_AREA] = C.HIGHCHARTS;\n  chartTypeToFramework[C.BAR] = C.HIGHCHARTS;\n  chartTypeToFramework[C.GROUPED_BAR] = C.HIGHCHARTS;\n  chartTypeToFramework[C.STACKED_BAR] = C.HIGHCHARTS;\n  chartTypeToFramework[C.STACKED_PERCENT_BAR] = C.HIGHCHARTS;\n  chartTypeToFramework[C.WORDCLOUD] = C.ZOHOCHARTS;\n  chartTypeToFramework[C.RACEBAR] = C.HIGHCHARTS;\n  chartTypeToFramework[C.SCATTER] = C.HIGHCHARTS;\n  chartTypeToFramework[C.SCATTER_LINE] = C.HIGHCHARTS;\n  chartTypeToFramework[C.SCATTER_LINE_MARKERS] = C.HIGHCHARTS;\n  chartTypeToFramework[C.BUBBLE] = C.HIGHCHARTS;\n  chartTypeToFramework[C.FUNNEL] = C.HIGHCHARTS;\n  chartTypeToFramework[C.WEIGHTED_FUNNEL] = C.HIGHCHARTS;\n  chartTypeToFramework[C.BULLET_COL] = C.HIGHCHARTS;\n  chartTypeToFramework[C.BULLET_BAR] = C.HIGHCHARTS;\n  chartTypeToFramework[C.HISTOGRAM] = C.HIGHCHARTS;\n  chartTypeToFramework[C.LINE_TIME_SERIES] = C.HIGHCHARTS;\n  chartTypeToFramework[C.AREA_TIME_SERIES] = C.HIGHCHARTS;\n  chartTypeToFramework[C.COMBO] = C.HIGHCHARTS;\n  /* Chart Type to Applicable JSON Keys Map */\n\n  var chartTypeToKeys = ChartMaps.chartTypeToKeys = {};\n  chartTypeToKeys[C.COL] = [KL.CHART, KL.CHART_WIDTH, KL.CHART_HEIGHT, KL.CHART_FONT_FAMILY, KL.RENDER_ID, KL.TYPE, KL.BORDER_COLOR, KL.BACKGROUND_COLOR, KL.GRADIENT, KL.GRADIENT_ENABLED, KL.COLORS, KL.TITLE, KL.TITLE_TEXT, KL.TITLE_FONT_SIZE, KL.TITLE_FONT_COLOR, KL.TITLE_FONT_STYLE, KL.TITLE_FONT_WEIGHT, KL.SUBTITLE, KL.SUBTITLE_TEXT, KL.SUBTITLE_FONT_SIZE, KL.SUBTITLE_FONT_COLOR, KL.SUBTITLE_FONT_STYLE, KL.SUBTITLE_FONT_WEIGHT, KL.LEGEND, KL.LEGEND_HALIGN, KL.LEGEND_VALIGN, KL.LEGEND_STATUS, KL.LEGEND_FONT_STYLE, KL.LEGEND_FONT_WEIGHT, KL.LEGEND_FONT_SIZE, KL.LEGEND_FONT_COLOR, KL.DATALABEL, KL.DATALABEL_ENABLED, KL.HAXIS, KL.VAXIS, KL.SERIES_PROPERTIES, KL.SERIES_COLORS, KL.BORDER_COLORS, KL.TOOLTIP, KL.TOOLTIP_ENABLED];\n  chartTypeToKeys[C.GROUPED_COL] = [KL.CHART, KL.CHART_WIDTH, KL.CHART_HEIGHT, KL.CHART_FONT_FAMILY, KL.RENDER_ID, KL.TYPE, KL.BORDER_COLOR, KL.BACKGROUND_COLOR, KL.GRADIENT, KL.GRADIENT_ENABLED, KL.COLORS, KL.TITLE, KL.TITLE_TEXT, KL.TITLE_FONT_SIZE, KL.TITLE_FONT_COLOR, KL.TITLE_FONT_STYLE, KL.TITLE_FONT_WEIGHT, KL.SUBTITLE, KL.SUBTITLE_TEXT, KL.SUBTITLE_FONT_SIZE, KL.SUBTITLE_FONT_COLOR, KL.SUBTITLE_FONT_STYLE, KL.SUBTITLE_FONT_WEIGHT, KL.LEGEND, KL.LEGEND_HALIGN, KL.LEGEND_VALIGN, KL.LEGEND_STATUS, KL.LEGEND_FONT_STYLE, KL.LEGEND_FONT_WEIGHT, KL.LEGEND_FONT_SIZE, KL.LEGEND_FONT_COLOR, KL.DATALABEL, KL.DATALABEL_ENABLED, KL.HAXIS, KL.VAXIS, KL.SERIES_PROPERTIES, KL.SERIES_COLORS, KL.BORDER_COLORS, KL.TOOLTIP, KL.TOOLTIP_ENABLED];\n  chartTypeToKeys[C.STACKED_COL] = [KL.CHART, KL.CHART_WIDTH, KL.CHART_HEIGHT, KL.CHART_FONT_FAMILY, KL.RENDER_ID, KL.TYPE, KL.BORDER_COLOR, KL.BACKGROUND_COLOR, KL.GRADIENT, KL.GRADIENT_ENABLED, KL.COLORS, KL.TITLE, KL.TITLE_TEXT, KL.TITLE_FONT_SIZE, KL.TITLE_FONT_COLOR, KL.TITLE_FONT_STYLE, KL.TITLE_FONT_WEIGHT, KL.SUBTITLE, KL.SUBTITLE_TEXT, KL.SUBTITLE_FONT_SIZE, KL.SUBTITLE_FONT_COLOR, KL.SUBTITLE_FONT_STYLE, KL.SUBTITLE_FONT_WEIGHT, KL.LEGEND, KL.LEGEND_HALIGN, KL.LEGEND_VALIGN, KL.LEGEND_STATUS, KL.LEGEND_FONT_STYLE, KL.LEGEND_FONT_WEIGHT, KL.LEGEND_FONT_SIZE, KL.LEGEND_FONT_COLOR, KL.DATALABEL, KL.DATALABEL_ENABLED, KL.HAXIS, KL.VAXIS, KL.SERIES_PROPERTIES, KL.SERIES_COLORS, KL.BORDER_COLORS, KL.TOOLTIP, KL.TOOLTIP_ENABLED];\n  chartTypeToKeys[C.STACKED_PERCENT_COL] = [KL.CHART, KL.CHART_WIDTH, KL.CHART_HEIGHT, KL.CHART_FONT_FAMILY, KL.RENDER_ID, KL.TYPE, KL.BORDER_COLOR, KL.BACKGROUND_COLOR, KL.GRADIENT, KL.GRADIENT_ENABLED, KL.COLORS, KL.TITLE, KL.TITLE_TEXT, KL.TITLE_FONT_SIZE, KL.TITLE_FONT_COLOR, KL.TITLE_FONT_STYLE, KL.TITLE_FONT_WEIGHT, KL.SUBTITLE, KL.SUBTITLE_TEXT, KL.SUBTITLE_FONT_SIZE, KL.SUBTITLE_FONT_COLOR, KL.SUBTITLE_FONT_STYLE, KL.SUBTITLE_FONT_WEIGHT, KL.LEGEND, KL.LEGEND_HALIGN, KL.LEGEND_VALIGN, KL.LEGEND_STATUS, KL.LEGEND_FONT_STYLE, KL.LEGEND_FONT_WEIGHT, KL.LEGEND_FONT_SIZE, KL.LEGEND_FONT_COLOR, KL.DATALABEL, KL.DATALABEL_ENABLED, KL.HAXIS, KL.VAXIS, KL.SERIES_PROPERTIES, KL.SERIES_COLORS, KL.BORDER_COLORS, KL.TOOLTIP, KL.TOOLTIP_ENABLED];\n  chartTypeToKeys[C.BAR] = [KL.CHART, KL.CHART_WIDTH, KL.CHART_HEIGHT, KL.CHART_FONT_FAMILY, KL.RENDER_ID, KL.TYPE, KL.BORDER_COLOR, KL.BACKGROUND_COLOR, KL.GRADIENT, KL.GRADIENT_ENABLED, KL.COLORS, KL.TITLE, KL.TITLE_TEXT, KL.TITLE_FONT_SIZE, KL.TITLE_FONT_COLOR, KL.TITLE_FONT_STYLE, KL.TITLE_FONT_WEIGHT, KL.SUBTITLE, KL.SUBTITLE_TEXT, KL.SUBTITLE_FONT_SIZE, KL.SUBTITLE_FONT_COLOR, KL.SUBTITLE_FONT_STYLE, KL.SUBTITLE_FONT_WEIGHT, KL.LEGEND, KL.LEGEND_HALIGN, KL.LEGEND_VALIGN, KL.LEGEND_STATUS, KL.LEGEND_FONT_STYLE, KL.LEGEND_FONT_WEIGHT, KL.LEGEND_FONT_SIZE, KL.LEGEND_FONT_COLOR, KL.DATALABEL, KL.DATALABEL_ENABLED, KL.HAXIS, KL.VAXIS, KL.SERIES_PROPERTIES, KL.SERIES_COLORS, KL.BORDER_COLORS, KL.TOOLTIP, KL.TOOLTIP_ENABLED];\n  chartTypeToKeys[C.GROUPED_BAR] = [KL.CHART, KL.CHART_WIDTH, KL.CHART_HEIGHT, KL.CHART_FONT_FAMILY, KL.RENDER_ID, KL.TYPE, KL.BORDER_COLOR, KL.BACKGROUND_COLOR, KL.GRADIENT, KL.GRADIENT_ENABLED, KL.COLORS, KL.TITLE, KL.TITLE_TEXT, KL.TITLE_FONT_SIZE, KL.TITLE_FONT_COLOR, KL.TITLE_FONT_STYLE, KL.TITLE_FONT_WEIGHT, KL.SUBTITLE, KL.SUBTITLE_TEXT, KL.SUBTITLE_FONT_SIZE, KL.SUBTITLE_FONT_COLOR, KL.SUBTITLE_FONT_STYLE, KL.SUBTITLE_FONT_WEIGHT, KL.LEGEND, KL.LEGEND_HALIGN, KL.LEGEND_VALIGN, KL.LEGEND_STATUS, KL.LEGEND_FONT_STYLE, KL.LEGEND_FONT_WEIGHT, KL.LEGEND_FONT_SIZE, KL.LEGEND_FONT_COLOR, KL.DATALABEL, KL.DATALABEL_ENABLED, KL.HAXIS, KL.VAXIS, KL.SERIES_PROPERTIES, KL.SERIES_COLORS, KL.BORDER_COLORS, KL.TOOLTIP, KL.TOOLTIP_ENABLED];\n  chartTypeToKeys[C.STACKED_BAR] = [KL.CHART, KL.CHART_WIDTH, KL.CHART_HEIGHT, KL.CHART_FONT_FAMILY, KL.RENDER_ID, KL.TYPE, KL.BORDER_COLOR, KL.BACKGROUND_COLOR, KL.GRADIENT, KL.GRADIENT_ENABLED, KL.COLORS, KL.TITLE, KL.TITLE_TEXT, KL.TITLE_FONT_SIZE, KL.TITLE_FONT_COLOR, KL.TITLE_FONT_STYLE, KL.TITLE_FONT_WEIGHT, KL.SUBTITLE, KL.SUBTITLE_TEXT, KL.SUBTITLE_FONT_SIZE, KL.SUBTITLE_FONT_COLOR, KL.SUBTITLE_FONT_STYLE, KL.SUBTITLE_FONT_WEIGHT, KL.LEGEND, KL.LEGEND_HALIGN, KL.LEGEND_VALIGN, KL.LEGEND_STATUS, KL.LEGEND_FONT_STYLE, KL.LEGEND_FONT_WEIGHT, KL.LEGEND_FONT_SIZE, KL.LEGEND_FONT_COLOR, KL.DATALABEL, KL.DATALABEL_ENABLED, KL.HAXIS, KL.VAXIS, KL.SERIES_PROPERTIES, KL.SERIES_COLORS, KL.BORDER_COLORS, KL.TOOLTIP, KL.TOOLTIP_ENABLED];\n  chartTypeToKeys[C.STACKED_PERCENT_BAR] = [KL.CHART, KL.CHART_WIDTH, KL.CHART_HEIGHT, KL.CHART_FONT_FAMILY, KL.RENDER_ID, KL.TYPE, KL.BORDER_COLOR, KL.BACKGROUND_COLOR, KL.GRADIENT, KL.GRADIENT_ENABLED, KL.COLORS, KL.TITLE, KL.TITLE_TEXT, KL.TITLE_FONT_SIZE, KL.TITLE_FONT_COLOR, KL.TITLE_FONT_STYLE, KL.TITLE_FONT_WEIGHT, KL.SUBTITLE, KL.SUBTITLE_TEXT, KL.SUBTITLE_FONT_SIZE, KL.SUBTITLE_FONT_COLOR, KL.SUBTITLE_FONT_STYLE, KL.SUBTITLE_FONT_WEIGHT, KL.LEGEND, KL.LEGEND_HALIGN, KL.LEGEND_VALIGN, KL.LEGEND_STATUS, KL.LEGEND_FONT_STYLE, KL.LEGEND_FONT_WEIGHT, KL.LEGEND_FONT_SIZE, KL.LEGEND_FONT_COLOR, KL.DATALABEL, KL.DATALABEL_ENABLED, KL.HAXIS, KL.VAXIS, KL.SERIES_PROPERTIES, KL.SERIES_COLORS, KL.BORDER_COLORS, KL.TOOLTIP, KL.TOOLTIP_ENABLED];\n  chartTypeToKeys[C.LINE] = [KL.CHART, KL.CHART_WIDTH, KL.CHART_HEIGHT, KL.CHART_FONT_FAMILY, KL.RENDER_ID, KL.TYPE, KL.BORDER_COLOR, KL.BACKGROUND_COLOR, KL.GRADIENT, KL.GRADIENT_ENABLED, KL.COLORS, KL.TITLE, KL.TITLE_TEXT, KL.TITLE_FONT_SIZE, KL.TITLE_FONT_COLOR, KL.TITLE_FONT_STYLE, KL.TITLE_FONT_WEIGHT, KL.SUBTITLE, KL.SUBTITLE_TEXT, KL.SUBTITLE_FONT_SIZE, KL.SUBTITLE_FONT_COLOR, KL.SUBTITLE_FONT_STYLE, KL.SUBTITLE_FONT_WEIGHT, KL.LEGEND, KL.LEGEND_HALIGN, KL.LEGEND_VALIGN, KL.LEGEND_STATUS, KL.LEGEND_FONT_STYLE, KL.LEGEND_FONT_WEIGHT, KL.LEGEND_FONT_SIZE, KL.LEGEND_FONT_COLOR, KL.DATALABEL, KL.DATALABEL_ENABLED, KL.HAXIS, KL.VAXIS, KL.SERIES_PROPERTIES, KL.SERIES_COLORS, KL.MARKER_STATUS, KL.MARKER_SHAPE, KL.MARKER_SIZE, KL.MARKER_COLOR, KL.MARKER_BORDER_COLOR, KL.LINE_TYPE, KL.TOOLTIP, KL.TOOLTIP_ENABLED, KL.INVERTED];\n  chartTypeToKeys[C.SPLINE] = [KL.CHART, KL.CHART_WIDTH, KL.CHART_HEIGHT, KL.CHART_FONT_FAMILY, KL.RENDER_ID, KL.TYPE, KL.BORDER_COLOR, KL.BACKGROUND_COLOR, KL.GRADIENT, KL.GRADIENT_ENABLED, KL.COLORS, KL.TITLE, KL.TITLE_TEXT, KL.TITLE_FONT_SIZE, KL.TITLE_FONT_COLOR, KL.TITLE_FONT_STYLE, KL.TITLE_FONT_WEIGHT, KL.SUBTITLE, KL.SUBTITLE_TEXT, KL.SUBTITLE_FONT_SIZE, KL.SUBTITLE_FONT_COLOR, KL.SUBTITLE_FONT_STYLE, KL.SUBTITLE_FONT_WEIGHT, KL.LEGEND, KL.LEGEND_HALIGN, KL.LEGEND_VALIGN, KL.LEGEND_STATUS, KL.LEGEND_FONT_STYLE, KL.LEGEND_FONT_WEIGHT, KL.LEGEND_FONT_SIZE, KL.LEGEND_FONT_COLOR, KL.DATALABEL, KL.DATALABEL_ENABLED, KL.HAXIS, KL.VAXIS, KL.SERIES_PROPERTIES, KL.SERIES_COLORS, KL.MARKER_STATUS, KL.MARKER_SHAPE, KL.MARKER_SIZE, KL.MARKER_COLOR, KL.MARKER_BORDER_COLOR, KL.LINE_TYPE, KL.TOOLTIP, KL.TOOLTIP_ENABLED, KL.INVERTED];\n  chartTypeToKeys[C.STEP_LINE] = [KL.CHART, KL.CHART_WIDTH, KL.CHART_HEIGHT, KL.CHART_FONT_FAMILY, KL.RENDER_ID, KL.TYPE, KL.BORDER_COLOR, KL.BACKGROUND_COLOR, KL.GRADIENT, KL.GRADIENT_ENABLED, KL.COLORS, KL.TITLE, KL.TITLE_TEXT, KL.TITLE_FONT_SIZE, KL.TITLE_FONT_COLOR, KL.TITLE_FONT_STYLE, KL.TITLE_FONT_WEIGHT, KL.SUBTITLE, KL.SUBTITLE_TEXT, KL.SUBTITLE_FONT_SIZE, KL.SUBTITLE_FONT_COLOR, KL.SUBTITLE_FONT_STYLE, KL.SUBTITLE_FONT_WEIGHT, KL.LEGEND, KL.LEGEND_HALIGN, KL.LEGEND_VALIGN, KL.LEGEND_STATUS, KL.LEGEND_FONT_STYLE, KL.LEGEND_FONT_WEIGHT, KL.LEGEND_FONT_SIZE, KL.LEGEND_FONT_COLOR, KL.DATALABEL, KL.DATALABEL_ENABLED, KL.HAXIS, KL.VAXIS, KL.SERIES_PROPERTIES, KL.SERIES_COLORS, KL.MARKER_STATUS, KL.MARKER_SHAPE, KL.MARKER_SIZE, KL.MARKER_COLOR, KL.MARKER_BORDER_COLOR, KL.LINE_TYPE, KL.TOOLTIP, KL.TOOLTIP_ENABLED, KL.INVERTED];\n  chartTypeToKeys[C.AREA] = [KL.CHART, KL.CHART_WIDTH, KL.CHART_HEIGHT, KL.CHART_FONT_FAMILY, KL.RENDER_ID, KL.TYPE, KL.BORDER_COLOR, KL.BACKGROUND_COLOR, KL.GRADIENT, KL.GRADIENT_ENABLED, KL.COLORS, KL.TITLE, KL.TITLE_TEXT, KL.TITLE_FONT_SIZE, KL.TITLE_FONT_COLOR, KL.TITLE_FONT_STYLE, KL.TITLE_FONT_WEIGHT, KL.SUBTITLE, KL.SUBTITLE_TEXT, KL.SUBTITLE_FONT_SIZE, KL.SUBTITLE_FONT_COLOR, KL.SUBTITLE_FONT_STYLE, KL.SUBTITLE_FONT_WEIGHT, KL.LEGEND, KL.LEGEND_HALIGN, KL.LEGEND_VALIGN, KL.LEGEND_STATUS, KL.LEGEND_FONT_STYLE, KL.LEGEND_FONT_WEIGHT, KL.LEGEND_FONT_SIZE, KL.LEGEND_FONT_COLOR, KL.DATALABEL, KL.DATALABEL_ENABLED, KL.HAXIS, KL.VAXIS, KL.SERIES_PROPERTIES, KL.SERIES_COLORS, KL.MARKER_STATUS, KL.MARKER_SHAPE, KL.MARKER_SIZE, KL.MARKER_COLOR, KL.MARKER_BORDER_COLOR, KL.LINE_TYPE, KL.AREA_TRANSPARENCY, KL.TOOLTIP, KL.TOOLTIP_ENABLED, KL.INVERTED];\n  chartTypeToKeys[C.AREA_SPLINE] = [KL.CHART, KL.CHART_WIDTH, KL.CHART_HEIGHT, KL.CHART_FONT_FAMILY, KL.RENDER_ID, KL.TYPE, KL.BORDER_COLOR, KL.BACKGROUND_COLOR, KL.GRADIENT, KL.GRADIENT_ENABLED, KL.COLORS, KL.TITLE, KL.TITLE_TEXT, KL.TITLE_FONT_SIZE, KL.TITLE_FONT_COLOR, KL.TITLE_FONT_STYLE, KL.TITLE_FONT_WEIGHT, KL.SUBTITLE, KL.SUBTITLE_TEXT, KL.SUBTITLE_FONT_SIZE, KL.SUBTITLE_FONT_COLOR, KL.SUBTITLE_FONT_STYLE, KL.SUBTITLE_FONT_WEIGHT, KL.LEGEND, KL.LEGEND_HALIGN, KL.LEGEND_VALIGN, KL.LEGEND_STATUS, KL.LEGEND_FONT_STYLE, KL.LEGEND_FONT_WEIGHT, KL.LEGEND_FONT_SIZE, KL.LEGEND_FONT_COLOR, KL.DATALABEL, KL.DATALABEL_ENABLED, KL.HAXIS, KL.VAXIS, KL.SERIES_PROPERTIES, KL.SERIES_COLORS, KL.MARKER_STATUS, KL.MARKER_SHAPE, KL.MARKER_SIZE, KL.MARKER_COLOR, KL.MARKER_BORDER_COLOR, KL.LINE_TYPE, KL.AREA_TRANSPARENCY, KL.TOOLTIP, KL.TOOLTIP_ENABLED, KL.INVERTED];\n  chartTypeToKeys[C.STACKED_AREA] = [KL.CHART, KL.CHART_WIDTH, KL.CHART_HEIGHT, KL.CHART_FONT_FAMILY, KL.RENDER_ID, KL.TYPE, KL.BORDER_COLOR, KL.BACKGROUND_COLOR, KL.GRADIENT, KL.GRADIENT_ENABLED, KL.COLORS, KL.TITLE, KL.TITLE_TEXT, KL.TITLE_FONT_SIZE, KL.TITLE_FONT_COLOR, KL.TITLE_FONT_STYLE, KL.TITLE_FONT_WEIGHT, KL.SUBTITLE, KL.SUBTITLE_TEXT, KL.SUBTITLE_FONT_SIZE, KL.SUBTITLE_FONT_COLOR, KL.SUBTITLE_FONT_STYLE, KL.SUBTITLE_FONT_WEIGHT, KL.LEGEND, KL.LEGEND_HALIGN, KL.LEGEND_VALIGN, KL.LEGEND_STATUS, KL.LEGEND_FONT_STYLE, KL.LEGEND_FONT_WEIGHT, KL.LEGEND_FONT_SIZE, KL.LEGEND_FONT_COLOR, KL.DATALABEL, KL.DATALABEL_ENABLED, KL.HAXIS, KL.VAXIS, KL.SERIES_PROPERTIES, KL.SERIES_COLORS, KL.MARKER_STATUS, KL.MARKER_SHAPE, KL.MARKER_SIZE, KL.MARKER_COLOR, KL.MARKER_BORDER_COLOR, KL.LINE_TYPE, KL.AREA_TRANSPARENCY, KL.TOOLTIP, KL.TOOLTIP_ENABLED, KL.INVERTED];\n  chartTypeToKeys[C.STACKED_PERCENT_AREA] = [KL.CHART, KL.CHART_WIDTH, KL.CHART_HEIGHT, KL.CHART_FONT_FAMILY, KL.RENDER_ID, KL.TYPE, KL.BORDER_COLOR, KL.BACKGROUND_COLOR, KL.GRADIENT, KL.GRADIENT_ENABLED, KL.COLORS, KL.TITLE, KL.TITLE_TEXT, KL.TITLE_FONT_SIZE, KL.TITLE_FONT_COLOR, KL.TITLE_FONT_STYLE, KL.TITLE_FONT_WEIGHT, KL.SUBTITLE, KL.SUBTITLE_TEXT, KL.SUBTITLE_FONT_SIZE, KL.SUBTITLE_FONT_COLOR, KL.SUBTITLE_FONT_STYLE, KL.SUBTITLE_FONT_WEIGHT, KL.LEGEND, KL.LEGEND_HALIGN, KL.LEGEND_VALIGN, KL.LEGEND_STATUS, KL.LEGEND_FONT_STYLE, KL.LEGEND_FONT_WEIGHT, KL.LEGEND_FONT_SIZE, KL.LEGEND_FONT_COLOR, KL.DATALABEL, KL.DATALABEL_ENABLED, KL.HAXIS, KL.VAXIS, KL.SERIES_PROPERTIES, KL.SERIES_COLORS, KL.MARKER_STATUS, KL.MARKER_SHAPE, KL.MARKER_SIZE, KL.MARKER_COLOR, KL.MARKER_BORDER_COLOR, KL.LINE_TYPE, KL.AREA_TRANSPARENCY, KL.TOOLTIP, KL.TOOLTIP_ENABLED, KL.INVERTED];\n  chartTypeToKeys[C.PIE] = [KL.CHART, KL.CHART_WIDTH, KL.CHART_HEIGHT, KL.CHART_FONT_FAMILY, KL.RENDER_ID, KL.TYPE, KL.BORDER_COLOR, KL.BACKGROUND_COLOR, KL.GRADIENT, KL.GRADIENT_ENABLED, KL.COLORS, KL.TITLE, KL.TITLE_TEXT, KL.TITLE_FONT_SIZE, KL.TITLE_FONT_COLOR, KL.TITLE_FONT_STYLE, KL.TITLE_FONT_WEIGHT, KL.SUBTITLE, KL.SUBTITLE_TEXT, KL.SUBTITLE_FONT_SIZE, KL.SUBTITLE_FONT_COLOR, KL.SUBTITLE_FONT_STYLE, KL.SUBTITLE_FONT_WEIGHT, KL.LEGEND, KL.LEGEND_HALIGN, KL.LEGEND_VALIGN, KL.LEGEND_STATUS, KL.LEGEND_FONT_STYLE, KL.LEGEND_FONT_WEIGHT, KL.LEGEND_FONT_SIZE, KL.LEGEND_FONT_COLOR, KL.DATALABEL, KL.DATALABEL_ENABLED, KL.SERIES_PROPERTIES, KL.SERIES_COLORS, KL.BORDER_COLORS, KL.TOOLTIP, KL.TOOLTIP_ENABLED];\n  chartTypeToKeys[C.SEMI_PIE] = [KL.CHART, KL.CHART_WIDTH, KL.CHART_HEIGHT, KL.CHART_FONT_FAMILY, KL.RENDER_ID, KL.TYPE, KL.BORDER_COLOR, KL.BACKGROUND_COLOR, KL.GRADIENT, KL.GRADIENT_ENABLED, KL.COLORS, KL.TITLE, KL.TITLE_TEXT, KL.TITLE_FONT_SIZE, KL.TITLE_FONT_COLOR, KL.TITLE_FONT_STYLE, KL.TITLE_FONT_WEIGHT, KL.SUBTITLE, KL.SUBTITLE_TEXT, KL.SUBTITLE_FONT_SIZE, KL.SUBTITLE_FONT_COLOR, KL.SUBTITLE_FONT_STYLE, KL.SUBTITLE_FONT_WEIGHT, KL.LEGEND, KL.LEGEND_HALIGN, KL.LEGEND_VALIGN, KL.LEGEND_STATUS, KL.LEGEND_FONT_STYLE, KL.LEGEND_FONT_WEIGHT, KL.LEGEND_FONT_SIZE, KL.LEGEND_FONT_COLOR, KL.DATALABEL, KL.DATALABEL_ENABLED, KL.SERIES_PROPERTIES, KL.SERIES_COLORS, KL.BORDER_COLORS, KL.TOOLTIP, KL.TOOLTIP_ENABLED];\n  chartTypeToKeys[C.DONUT] = [KL.CHART, KL.CHART_WIDTH, KL.CHART_HEIGHT, KL.CHART_FONT_FAMILY, KL.RENDER_ID, KL.TYPE, KL.BORDER_COLOR, KL.BACKGROUND_COLOR, KL.GRADIENT, KL.GRADIENT_ENABLED, KL.COLORS, KL.TITLE, KL.TITLE_TEXT, KL.TITLE_FONT_SIZE, KL.TITLE_FONT_COLOR, KL.TITLE_FONT_STYLE, KL.TITLE_FONT_WEIGHT, KL.SUBTITLE, KL.SUBTITLE_TEXT, KL.SUBTITLE_FONT_SIZE, KL.SUBTITLE_FONT_COLOR, KL.SUBTITLE_FONT_STYLE, KL.SUBTITLE_FONT_WEIGHT, KL.LEGEND, KL.LEGEND_HALIGN, KL.LEGEND_VALIGN, KL.LEGEND_STATUS, KL.LEGEND_FONT_STYLE, KL.LEGEND_FONT_WEIGHT, KL.LEGEND_FONT_SIZE, KL.LEGEND_FONT_COLOR, KL.DATALABEL, KL.DATALABEL_ENABLED, KL.SERIES_PROPERTIES, KL.SERIES_COLORS, KL.BORDER_COLORS, KL.TOOLTIP, KL.TOOLTIP_ENABLED, KL.DONUT_TOTAL_DATALABELS, KL.DONUT_TOTAL_DATALABELS_ENABLED, KL.DONUT_TOTAL_DATALABELS_FONT_SIZE, KL.DONUT_TOTAL_DATALABELS_FONT_COLOR, KL.DONUT_TOTAL_DATALABELS_FONT_STYLE, KL.DONUT_TOTAL_DATALABELS_FONT_WEIGHT];\n  chartTypeToKeys[C.SEMI_DONUT] = [KL.CHART, KL.CHART_WIDTH, KL.CHART_HEIGHT, KL.CHART_FONT_FAMILY, KL.RENDER_ID, KL.TYPE, KL.BORDER_COLOR, KL.BACKGROUND_COLOR, KL.GRADIENT, KL.GRADIENT_ENABLED, KL.COLORS, KL.TITLE, KL.TITLE_TEXT, KL.TITLE_FONT_SIZE, KL.TITLE_FONT_COLOR, KL.TITLE_FONT_STYLE, KL.TITLE_FONT_WEIGHT, KL.SUBTITLE, KL.SUBTITLE_TEXT, KL.SUBTITLE_FONT_SIZE, KL.SUBTITLE_FONT_COLOR, KL.SUBTITLE_FONT_STYLE, KL.SUBTITLE_FONT_WEIGHT, KL.LEGEND, KL.LEGEND_HALIGN, KL.LEGEND_VALIGN, KL.LEGEND_STATUS, KL.LEGEND_FONT_STYLE, KL.LEGEND_FONT_WEIGHT, KL.LEGEND_FONT_SIZE, KL.LEGEND_FONT_COLOR, KL.DATALABEL, KL.DATALABEL_ENABLED, KL.SERIES_PROPERTIES, KL.SERIES_COLORS, KL.BORDER_COLORS, KL.TOOLTIP, KL.TOOLTIP_ENABLED, KL.DONUT_TOTAL_DATALABELS, KL.DONUT_TOTAL_DATALABELS_ENABLED, KL.DONUT_TOTAL_DATALABELS_FONT_SIZE, KL.DONUT_TOTAL_DATALABELS_FONT_COLOR, KL.DONUT_TOTAL_DATALABELS_FONT_STYLE, KL.DONUT_TOTAL_DATALABELS_FONT_WEIGHT];\n  chartTypeToKeys[C.WORDCLOUD] = [KL.CHART, KL.CHART_WIDTH, KL.CHART_HEIGHT, KL.CHART_FONT_FAMILY, KL.RENDER_ID, KL.TYPE, KL.BORDER_COLOR, KL.BACKGROUND_COLOR, KL.GRADIENT, KL.GRADIENT_ENABLED, KL.COLORS, KL.TITLE, KL.TITLE_TEXT, KL.TITLE_FONT_SIZE, KL.TITLE_FONT_COLOR, KL.TITLE_FONT_STYLE, KL.TITLE_FONT_WEIGHT, KL.SUBTITLE, KL.SUBTITLE_TEXT, KL.SUBTITLE_FONT_SIZE, KL.SUBTITLE_FONT_COLOR, KL.SUBTITLE_FONT_STYLE, KL.SUBTITLE_FONT_WEIGHT, KL.TOOLTIP, KL.TOOLTIP_ENABLED, KL.SERIES_PROPERTIES];\n  chartTypeToKeys[C.RACEBAR] = [KL.CHART, KL.CHART_WIDTH, KL.CHART_HEIGHT, KL.CHART_FONT_FAMILY, KL.RENDER_ID, KL.TYPE, KL.BORDER_COLOR, KL.BACKGROUND_COLOR, KL.GRADIENT, KL.GRADIENT_ENABLED, KL.COLORS, KL.ANIMATION, KL.ANIMATION_DURATION, KL.CAPTION, KL.CAPTION_ENABLED, KL.CAPTION_FONT_SIZE, KL.CAPTION_FONT_COLOR, KL.CAPTION_FONT_STYLE, KL.CAPTION_FONT_WEIGHT, KL.TITLE, KL.TITLE_TEXT, KL.TITLE_FONT_SIZE, KL.TITLE_FONT_COLOR, KL.TITLE_FONT_STYLE, KL.TITLE_FONT_WEIGHT, KL.SUBTITLE, KL.SUBTITLE_TEXT, KL.SUBTITLE_FONT_SIZE, KL.SUBTITLE_FONT_COLOR, KL.SUBTITLE_FONT_STYLE, KL.SUBTITLE_FONT_WEIGHT, KL.LEGEND, KL.LEGEND_HALIGN, KL.LEGEND_VALIGN, KL.LEGEND_STATUS, KL.LEGEND_FONT_STYLE, KL.LEGEND_FONT_WEIGHT, KL.LEGEND_FONT_SIZE, KL.LEGEND_FONT_COLOR, KL.DATALABEL, KL.DATALABEL_ENABLED, KL.HAXIS, KL.VAXIS, KL.SERIES_PROPERTIES, KL.SERIES_COLORS, KL.BORDER_COLORS, KL.TOOLTIP, KL.TOOLTIP_ENABLED];\n  chartTypeToKeys[C.SCATTER] = [KL.CHART, KL.CHART_WIDTH, KL.CHART_HEIGHT, KL.CHART_FONT_FAMILY, KL.RENDER_ID, KL.TYPE, KL.BORDER_COLOR, KL.BACKGROUND_COLOR, KL.GRADIENT, KL.GRADIENT_ENABLED, KL.COLORS, KL.TITLE, KL.TITLE_TEXT, KL.TITLE_FONT_SIZE, KL.TITLE_FONT_COLOR, KL.TITLE_FONT_STYLE, KL.TITLE_FONT_WEIGHT, KL.SUBTITLE, KL.SUBTITLE_TEXT, KL.SUBTITLE_FONT_SIZE, KL.SUBTITLE_FONT_COLOR, KL.SUBTITLE_FONT_STYLE, KL.SUBTITLE_FONT_WEIGHT, KL.LEGEND, KL.LEGEND_HALIGN, KL.LEGEND_VALIGN, KL.LEGEND_STATUS, KL.LEGEND_FONT_STYLE, KL.LEGEND_FONT_WEIGHT, KL.LEGEND_FONT_SIZE, KL.LEGEND_FONT_COLOR, KL.DATALABEL, KL.DATALABEL_ENABLED, KL.HAXIS, KL.VAXIS, KL.SERIES_PROPERTIES, KL.SERIES_COLORS, KL.MARKER_STATUS, KL.MARKER_SHAPE, KL.MARKER_SIZE, KL.MARKER_COLOR, KL.MARKER_BORDER_COLOR, KL.LINE_TYPE, KL.TOOLTIP, KL.TOOLTIP_ENABLED, KL.INVERTED];\n  chartTypeToKeys[C.SCATTER_LINE] = [KL.CHART, KL.CHART_WIDTH, KL.CHART_HEIGHT, KL.CHART_FONT_FAMILY, KL.RENDER_ID, KL.TYPE, KL.BORDER_COLOR, KL.BACKGROUND_COLOR, KL.GRADIENT, KL.GRADIENT_ENABLED, KL.COLORS, KL.TITLE, KL.TITLE_TEXT, KL.TITLE_FONT_SIZE, KL.TITLE_FONT_COLOR, KL.TITLE_FONT_STYLE, KL.TITLE_FONT_WEIGHT, KL.SUBTITLE, KL.SUBTITLE_TEXT, KL.SUBTITLE_FONT_SIZE, KL.SUBTITLE_FONT_COLOR, KL.SUBTITLE_FONT_STYLE, KL.SUBTITLE_FONT_WEIGHT, KL.LEGEND, KL.LEGEND_HALIGN, KL.LEGEND_VALIGN, KL.LEGEND_STATUS, KL.LEGEND_FONT_STYLE, KL.LEGEND_FONT_WEIGHT, KL.LEGEND_FONT_SIZE, KL.LEGEND_FONT_COLOR, KL.DATALABEL, KL.DATALABEL_ENABLED, KL.HAXIS, KL.VAXIS, KL.SERIES_PROPERTIES, KL.SERIES_COLORS, KL.MARKER_STATUS, KL.MARKER_SHAPE, KL.MARKER_SIZE, KL.MARKER_COLOR, KL.MARKER_BORDER_COLOR, KL.LINE_TYPE, KL.TOOLTIP, KL.TOOLTIP_ENABLED, KL.INVERTED];\n  chartTypeToKeys[C.SCATTER_LINE_MARKERS] = [KL.CHART, KL.CHART_WIDTH, KL.CHART_HEIGHT, KL.CHART_FONT_FAMILY, KL.RENDER_ID, KL.TYPE, KL.BORDER_COLOR, KL.BACKGROUND_COLOR, KL.GRADIENT, KL.GRADIENT_ENABLED, KL.COLORS, KL.TITLE, KL.TITLE_TEXT, KL.TITLE_FONT_SIZE, KL.TITLE_FONT_COLOR, KL.TITLE_FONT_STYLE, KL.TITLE_FONT_WEIGHT, KL.SUBTITLE, KL.SUBTITLE_TEXT, KL.SUBTITLE_FONT_SIZE, KL.SUBTITLE_FONT_COLOR, KL.SUBTITLE_FONT_STYLE, KL.SUBTITLE_FONT_WEIGHT, KL.LEGEND, KL.LEGEND_HALIGN, KL.LEGEND_VALIGN, KL.LEGEND_STATUS, KL.LEGEND_FONT_STYLE, KL.LEGEND_FONT_WEIGHT, KL.LEGEND_FONT_SIZE, KL.LEGEND_FONT_COLOR, KL.DATALABEL, KL.DATALABEL_ENABLED, KL.HAXIS, KL.VAXIS, KL.SERIES_PROPERTIES, KL.SERIES_COLORS, KL.MARKER_STATUS, KL.MARKER_SHAPE, KL.MARKER_SIZE, KL.MARKER_COLOR, KL.MARKER_BORDER_COLOR, KL.LINE_TYPE, KL.TOOLTIP, KL.TOOLTIP_ENABLED, KL.INVERTED];\n  chartTypeToKeys[C.BUBBLE] = [KL.CHART, KL.CHART_WIDTH, KL.CHART_HEIGHT, KL.CHART_FONT_FAMILY, KL.RENDER_ID, KL.TYPE, KL.BORDER_COLOR, KL.BACKGROUND_COLOR, KL.GRADIENT, KL.GRADIENT_ENABLED, KL.COLORS, KL.TITLE, KL.TITLE_TEXT, KL.TITLE_FONT_SIZE, KL.TITLE_FONT_COLOR, KL.TITLE_FONT_STYLE, KL.TITLE_FONT_WEIGHT, KL.SUBTITLE, KL.SUBTITLE_TEXT, KL.SUBTITLE_FONT_SIZE, KL.SUBTITLE_FONT_COLOR, KL.SUBTITLE_FONT_STYLE, KL.SUBTITLE_FONT_WEIGHT, KL.LEGEND, KL.LEGEND_HALIGN, KL.LEGEND_VALIGN, KL.LEGEND_STATUS, KL.LEGEND_FONT_STYLE, KL.LEGEND_FONT_WEIGHT, KL.LEGEND_FONT_SIZE, KL.LEGEND_FONT_COLOR, KL.DATALABEL, KL.DATALABEL_ENABLED, KL.HAXIS, KL.VAXIS, KL.SERIES_PROPERTIES, KL.SERIES_COLORS, KL.TOOLTIP, KL.TOOLTIP_ENABLED];\n  chartTypeToKeys[C.FUNNEL] = [KL.CHART, KL.CHART_WIDTH, KL.CHART_HEIGHT, KL.CHART_FONT_FAMILY, KL.RENDER_ID, KL.TYPE, KL.BORDER_COLOR, KL.BACKGROUND_COLOR, KL.GRADIENT, KL.GRADIENT_ENABLED, KL.COLORS, KL.TITLE, KL.TITLE_TEXT, KL.TITLE_FONT_SIZE, KL.TITLE_FONT_COLOR, KL.TITLE_FONT_STYLE, KL.TITLE_FONT_WEIGHT, KL.SUBTITLE, KL.SUBTITLE_TEXT, KL.SUBTITLE_FONT_SIZE, KL.SUBTITLE_FONT_COLOR, KL.SUBTITLE_FONT_STYLE, KL.SUBTITLE_FONT_WEIGHT, KL.LEGEND, KL.LEGEND_HALIGN, KL.LEGEND_VALIGN, KL.LEGEND_STATUS, KL.LEGEND_FONT_STYLE, KL.LEGEND_FONT_WEIGHT, KL.LEGEND_FONT_SIZE, KL.LEGEND_FONT_COLOR, KL.DATALABEL, KL.DATALABEL_ENABLED, KL.SERIES_PROPERTIES, KL.SERIES_COLORS, KL.BORDER_COLORS, KL.TOOLTIP, KL.TOOLTIP_ENABLED, KL.DONUT_TOTAL_DATALABELS, KL.DONUT_TOTAL_DATALABELS_ENABLED, KL.DONUT_TOTAL_DATALABELS_FONT_SIZE, KL.DONUT_TOTAL_DATALABELS_FONT_COLOR, KL.DONUT_TOTAL_DATALABELS_FONT_STYLE, KL.DONUT_TOTAL_DATALABELS_FONT_WEIGHT];\n  chartTypeToKeys[C.WEIGHTED_FUNNEL] = [KL.CHART, KL.CHART_WIDTH, KL.CHART_HEIGHT, KL.CHART_FONT_FAMILY, KL.RENDER_ID, KL.TYPE, KL.BORDER_COLOR, KL.BACKGROUND_COLOR, KL.GRADIENT, KL.GRADIENT_ENABLED, KL.COLORS, KL.TITLE, KL.TITLE_TEXT, KL.TITLE_FONT_SIZE, KL.TITLE_FONT_COLOR, KL.TITLE_FONT_STYLE, KL.TITLE_FONT_WEIGHT, KL.SUBTITLE, KL.SUBTITLE_TEXT, KL.SUBTITLE_FONT_SIZE, KL.SUBTITLE_FONT_COLOR, KL.SUBTITLE_FONT_STYLE, KL.SUBTITLE_FONT_WEIGHT, KL.LEGEND, KL.LEGEND_HALIGN, KL.LEGEND_VALIGN, KL.LEGEND_STATUS, KL.LEGEND_FONT_STYLE, KL.LEGEND_FONT_WEIGHT, KL.LEGEND_FONT_SIZE, KL.LEGEND_FONT_COLOR, KL.DATALABEL, KL.DATALABEL_ENABLED, KL.SERIES_PROPERTIES, KL.SERIES_COLORS, KL.BORDER_COLORS, KL.TOOLTIP, KL.TOOLTIP_ENABLED, KL.DONUT_TOTAL_DATALABELS, KL.DONUT_TOTAL_DATALABELS_ENABLED, KL.DONUT_TOTAL_DATALABELS_FONT_SIZE, KL.DONUT_TOTAL_DATALABELS_FONT_COLOR, KL.DONUT_TOTAL_DATALABELS_FONT_STYLE, KL.DONUT_TOTAL_DATALABELS_FONT_WEIGHT];\n  chartTypeToKeys[C.BULLET_COL] = [KL.CHART, KL.CHART_WIDTH, KL.CHART_HEIGHT, KL.CHART_FONT_FAMILY, KL.RENDER_ID, KL.TYPE, KL.BORDER_COLOR, KL.BACKGROUND_COLOR, KL.GRADIENT, KL.GRADIENT_ENABLED, KL.COLORS, KL.TITLE, KL.TITLE_TEXT, KL.TITLE_FONT_SIZE, KL.TITLE_FONT_COLOR, KL.TITLE_FONT_STYLE, KL.TITLE_FONT_WEIGHT, KL.SUBTITLE, KL.SUBTITLE_TEXT, KL.SUBTITLE_FONT_SIZE, KL.SUBTITLE_FONT_COLOR, KL.SUBTITLE_FONT_STYLE, KL.SUBTITLE_FONT_WEIGHT, KL.LEGEND, KL.LEGEND_HALIGN, KL.LEGEND_VALIGN, KL.LEGEND_STATUS, KL.LEGEND_FONT_STYLE, KL.LEGEND_FONT_WEIGHT, KL.LEGEND_FONT_SIZE, KL.LEGEND_FONT_COLOR, KL.DATALABEL, KL.DATALABEL_ENABLED, KL.HAXIS, KL.VAXIS, KL.SERIES_PROPERTIES, KL.SERIES_COLORS, KL.BORDER_COLORS, KL.TOOLTIP, KL.TOOLTIP_ENABLED];\n  chartTypeToKeys[C.BULLET_BAR] = [KL.CHART, KL.CHART_WIDTH, KL.CHART_HEIGHT, KL.CHART_FONT_FAMILY, KL.RENDER_ID, KL.TYPE, KL.BORDER_COLOR, KL.BACKGROUND_COLOR, KL.GRADIENT, KL.GRADIENT_ENABLED, KL.COLORS, KL.TITLE, KL.TITLE_TEXT, KL.TITLE_FONT_SIZE, KL.TITLE_FONT_COLOR, KL.TITLE_FONT_STYLE, KL.TITLE_FONT_WEIGHT, KL.SUBTITLE, KL.SUBTITLE_TEXT, KL.SUBTITLE_FONT_SIZE, KL.SUBTITLE_FONT_COLOR, KL.SUBTITLE_FONT_STYLE, KL.SUBTITLE_FONT_WEIGHT, KL.LEGEND, KL.LEGEND_HALIGN, KL.LEGEND_VALIGN, KL.LEGEND_STATUS, KL.LEGEND_FONT_STYLE, KL.LEGEND_FONT_WEIGHT, KL.LEGEND_FONT_SIZE, KL.LEGEND_FONT_COLOR, KL.DATALABEL, KL.DATALABEL_ENABLED, KL.HAXIS, KL.VAXIS, KL.SERIES_PROPERTIES, KL.SERIES_COLORS, KL.BORDER_COLORS, KL.TOOLTIP, KL.TOOLTIP_ENABLED];\n  chartTypeToKeys[C.HISTOGRAM] = [KL.CHART, KL.CHART_WIDTH, KL.CHART_HEIGHT, KL.CHART_FONT_FAMILY, KL.RENDER_ID, KL.TYPE, KL.BORDER_COLOR, KL.BACKGROUND_COLOR, KL.GRADIENT, KL.GRADIENT_ENABLED, KL.COLORS, KL.TITLE, KL.TITLE_TEXT, KL.TITLE_FONT_SIZE, KL.TITLE_FONT_COLOR, KL.TITLE_FONT_STYLE, KL.TITLE_FONT_WEIGHT, KL.SUBTITLE, KL.SUBTITLE_TEXT, KL.SUBTITLE_FONT_SIZE, KL.SUBTITLE_FONT_COLOR, KL.SUBTITLE_FONT_STYLE, KL.SUBTITLE_FONT_WEIGHT, KL.LEGEND, KL.LEGEND_HALIGN, KL.LEGEND_VALIGN, KL.LEGEND_STATUS, KL.LEGEND_FONT_STYLE, KL.LEGEND_FONT_WEIGHT, KL.LEGEND_FONT_SIZE, KL.LEGEND_FONT_COLOR, KL.DATALABEL, KL.DATALABEL_ENABLED, KL.HAXIS, KL.VAXIS, KL.SERIES_PROPERTIES, KL.SERIES_COLORS, KL.BORDER_COLORS, KL.TOOLTIP, KL.TOOLTIP_ENABLED];\n  chartTypeToKeys[C.LINE_TIME_SERIES] = [KL.CHART, KL.CHART_WIDTH, KL.CHART_HEIGHT, KL.CHART_FONT_FAMILY, KL.RENDER_ID, KL.TYPE, KL.BORDER_COLOR, KL.BACKGROUND_COLOR, KL.GRADIENT, KL.GRADIENT_ENABLED, KL.COLORS, KL.TITLE, KL.TITLE_TEXT, KL.TITLE_FONT_SIZE, KL.TITLE_FONT_COLOR, KL.TITLE_FONT_STYLE, KL.TITLE_FONT_WEIGHT, KL.SUBTITLE, KL.SUBTITLE_TEXT, KL.SUBTITLE_FONT_SIZE, KL.SUBTITLE_FONT_COLOR, KL.SUBTITLE_FONT_STYLE, KL.SUBTITLE_FONT_WEIGHT, KL.LEGEND, KL.LEGEND_HALIGN, KL.LEGEND_VALIGN, KL.LEGEND_STATUS, KL.LEGEND_FONT_STYLE, KL.LEGEND_FONT_WEIGHT, KL.LEGEND_FONT_SIZE, KL.LEGEND_FONT_COLOR, KL.DATALABEL, KL.DATALABEL_ENABLED, KL.HAXIS, KL.VAXIS, KL.SERIES_PROPERTIES, KL.SERIES_COLORS, KL.MARKER_STATUS, KL.MARKER_SHAPE, KL.MARKER_SIZE, KL.MARKER_COLOR, KL.MARKER_BORDER_COLOR, KL.LINE_TYPE, KL.TOOLTIP, KL.TOOLTIP_ENABLED, KL.INVERTED];\n  chartTypeToKeys[C.AREA_TIME_SERIES] = [KL.CHART, KL.CHART_WIDTH, KL.CHART_HEIGHT, KL.CHART_FONT_FAMILY, KL.RENDER_ID, KL.TYPE, KL.BORDER_COLOR, KL.BACKGROUND_COLOR, KL.GRADIENT, KL.GRADIENT_ENABLED, KL.COLORS, KL.TITLE, KL.TITLE_TEXT, KL.TITLE_FONT_SIZE, KL.TITLE_FONT_COLOR, KL.TITLE_FONT_STYLE, KL.TITLE_FONT_WEIGHT, KL.SUBTITLE, KL.SUBTITLE_TEXT, KL.SUBTITLE_FONT_SIZE, KL.SUBTITLE_FONT_COLOR, KL.SUBTITLE_FONT_STYLE, KL.SUBTITLE_FONT_WEIGHT, KL.LEGEND, KL.LEGEND_HALIGN, KL.LEGEND_VALIGN, KL.LEGEND_STATUS, KL.LEGEND_FONT_STYLE, KL.LEGEND_FONT_WEIGHT, KL.LEGEND_FONT_SIZE, KL.LEGEND_FONT_COLOR, KL.DATALABEL, KL.DATALABEL_ENABLED, KL.HAXIS, KL.VAXIS, KL.SERIES_PROPERTIES, KL.SERIES_COLORS, KL.MARKER_STATUS, KL.MARKER_SHAPE, KL.MARKER_SIZE, KL.MARKER_COLOR, KL.MARKER_BORDER_COLOR, KL.LINE_TYPE, KL.TOOLTIP, KL.TOOLTIP_ENABLED, KL.INVERTED];\n  chartTypeToKeys[C.COMBO] = [KL.CHART, KL.CHART_WIDTH, KL.CHART_HEIGHT, KL.CHART_FONT_FAMILY, KL.RENDER_ID, KL.TYPE, KL.BORDER_COLOR, KL.BACKGROUND_COLOR, KL.GRADIENT, KL.GRADIENT_ENABLED, KL.COLORS, KL.TITLE, KL.TITLE_TEXT, KL.TITLE_FONT_SIZE, KL.TITLE_FONT_COLOR, KL.TITLE_FONT_STYLE, KL.TITLE_FONT_WEIGHT, KL.SUBTITLE, KL.SUBTITLE_TEXT, KL.SUBTITLE_FONT_SIZE, KL.SUBTITLE_FONT_COLOR, KL.SUBTITLE_FONT_STYLE, KL.SUBTITLE_FONT_WEIGHT, KL.LEGEND, KL.LEGEND_HALIGN, KL.LEGEND_VALIGN, KL.LEGEND_STATUS, KL.LEGEND_FONT_STYLE, KL.LEGEND_FONT_WEIGHT, KL.LEGEND_FONT_SIZE, KL.LEGEND_FONT_COLOR, KL.DATALABEL, KL.DATALABEL_ENABLED, KL.HAXIS, KL.VAXIS, KL.SERIES_PROPERTIES, KL.SERIES_COLORS, KL.BORDER_COLORS, KL.TOOLTIP, KL.TOOLTIP_ENABLED];\n  /* Map for White Background */\n\n  var colorForWhiteBackground = ChartMaps.colorForWhiteBackground = {};\n  colorForWhiteBackground[KL.TITLE_FONT_COLOR] = DEFAULTS.WHITE_BG_TITLE_FONT_COLOR;\n  colorForWhiteBackground[KL.SUBTITLE_FONT_COLOR] = DEFAULTS.WHITE_BG_SUBTITLE_FONT_COLOR;\n  colorForWhiteBackground[KL.HTITLE_FONT_COLOR] = DEFAULTS.WHITE_BG_HTITLE_FONT_COLOR;\n  colorForWhiteBackground[KL.VTITLE_FONT_COLOR] = DEFAULTS.WHITE_BG_VTITLE_FONT_COLOR;\n  colorForWhiteBackground[KL.LEGEND_FONT_COLOR] = DEFAULTS.WHITE_BG_LEGEND_FONT_COLOR;\n  colorForWhiteBackground[KL.H_LABELS_FONT_COLOR] = DEFAULTS.WHITE_BG_H_LABELS_FONT_COLOR;\n  colorForWhiteBackground[KL.V_LABELS_FONT_COLOR] = DEFAULTS.WHITE_BG_V_LABELS_FONT_COLOR;\n  colorForWhiteBackground[KL.V_STACK_LABELS_FONT_COLOR] = DEFAULTS.WHITE_BG_V_STACK_LABELS_FONT_COLOR;\n  colorForWhiteBackground[KL.DATALABEL_FONT_COLOR] = DEFAULTS.WHITE_BG_DATALABEL_FONT_COLOR;\n  colorForWhiteBackground[KL.TOTAL_DATALABEL_FONT_COLOR] = DEFAULTS.WHITE_BG_TOTAL_DATALABEL_FONT_COLOR;\n  colorForWhiteBackground[KL.H_MAJOR_GRIDLINE_LINE_COLOR] = DEFAULTS.WHITE_BG_H_MAJOR_GRIDLINE_LINE_COLOR;\n  colorForWhiteBackground[KL.H_MINOR_GRIDLINE_LINE_COLOR] = DEFAULTS.WHITE_BG_H_MINOR_GRIDLINE_LINE_COLOR;\n  colorForWhiteBackground[KL.V_MAJOR_GRIDLINE_LINE_COLOR] = DEFAULTS.WHITE_BG_V_MAJOR_GRIDLINE_LINE_COLOR;\n  colorForWhiteBackground[KL.V_MINOR_GRIDLINE_LINE_COLOR] = DEFAULTS.WHITE_BG_V_MINOR_GRIDLINE_LINE_COLOR;\n  colorForWhiteBackground[KL.CAPTION_FONT_COLOR] = DEFAULTS.WHITE_BG_CAPTION_FONT_COLOR;\n  colorForWhiteBackground[KL.PLOT_LINES_FONT_COLOR] = DEFAULTS.WHITE_BG_PLOTLINES_LABELS_FONT_COLOR;\n  colorForWhiteBackground[KL.BASELINE] = DEFAULTS.WHITE_BG_BASELINE_COLOR; //V_STACK_LABELS_FONT_COLOR\n\n  /* Map for Dark Background */\n\n  var colorForDarkBackground = ChartMaps.colorForDarkBackground = {};\n  colorForDarkBackground[KL.TITLE_FONT_COLOR] = DEFAULTS.DARK_BG_TITLE_FONT_COLOR;\n  colorForDarkBackground[KL.SUBTITLE_FONT_COLOR] = DEFAULTS.DARK_BG_SUBTITLE_FONT_COLOR;\n  colorForDarkBackground[KL.HTITLE_FONT_COLOR] = DEFAULTS.DARK_BG_HTITLE_FONT_COLOR;\n  colorForDarkBackground[KL.VTITLE_FONT_COLOR] = DEFAULTS.DARK_BG_VTITLE_FONT_COLOR;\n  colorForDarkBackground[KL.LEGEND_FONT_COLOR] = DEFAULTS.DARK_BG_LEGEND_FONT_COLOR;\n  colorForDarkBackground[KL.H_LABELS_FONT_COLOR] = DEFAULTS.DARK_BG_H_LABELS_FONT_COLOR;\n  colorForDarkBackground[KL.V_LABELS_FONT_COLOR] = DEFAULTS.DARK_BG_V_LABELS_FONT_COLOR;\n  colorForDarkBackground[KL.V_STACK_LABELS_FONT_COLOR] = DEFAULTS.DARK_BG_V_STACK_LABELS_FONT_COLOR;\n  colorForDarkBackground[KL.DATALABEL_FONT_COLOR] = DEFAULTS.DARK_BG_DATALABEL_FONT_COLOR;\n  colorForDarkBackground[KL.TOTAL_DATALABEL_FONT_COLOR] = DEFAULTS.DARK_BG_TOTAL_DATALABEL_FONT_COLOR;\n  colorForDarkBackground[KL.H_MAJOR_GRIDLINE_LINE_COLOR] = DEFAULTS.DARK_BG_H_MAJOR_GRIDLINE_LINE_COLOR;\n  colorForDarkBackground[KL.H_MINOR_GRIDLINE_LINE_COLOR] = DEFAULTS.DARK_BG_H_MINOR_GRIDLINE_LINE_COLOR;\n  colorForDarkBackground[KL.V_MAJOR_GRIDLINE_LINE_COLOR] = DEFAULTS.DARK_BG_V_MAJOR_GRIDLINE_LINE_COLOR;\n  colorForDarkBackground[KL.V_MINOR_GRIDLINE_LINE_COLOR] = DEFAULTS.DARK_BG_V_MINOR_GRIDLINE_LINE_COLOR;\n  colorForDarkBackground[KL.CAPTION_FONT_COLOR] = DEFAULTS.DARK_BG_CAPTION_FONT_COLOR;\n  colorForDarkBackground[KL.PLOT_LINES_FONT_COLOR] = DEFAULTS.DARK_BG_PLOTLINES_LABELS_FONT_COLOR;\n  colorForDarkBackground[KL.BASELINE] = DEFAULTS.DARK_BG_BASELINE_COLOR;\n  /* Map for Light Background */\n\n  var colorForLightBackground = ChartMaps.colorForLightBackground = {};\n  colorForLightBackground[KL.TITLE_FONT_COLOR] = DEFAULTS.LIGHT_BG_TITLE_FONT_COLOR;\n  colorForLightBackground[KL.SUBTITLE_FONT_COLOR] = DEFAULTS.LIGHT_BG_SUBTITLE_FONT_COLOR;\n  colorForLightBackground[KL.HTITLE_FONT_COLOR] = DEFAULTS.LIGHT_BG_HTITLE_FONT_COLOR;\n  colorForLightBackground[KL.VTITLE_FONT_COLOR] = DEFAULTS.LIGHT_BG_VTITLE_FONT_COLOR;\n  colorForLightBackground[KL.LEGEND_FONT_COLOR] = DEFAULTS.LIGHT_BG_LEGEND_FONT_COLOR;\n  colorForLightBackground[KL.H_LABELS_FONT_COLOR] = DEFAULTS.LIGHT_BG_H_LABELS_FONT_COLOR;\n  colorForLightBackground[KL.V_LABELS_FONT_COLOR] = DEFAULTS.LIGHT_BG_V_LABELS_FONT_COLOR;\n  colorForLightBackground[KL.V_STACK_LABELS_FONT_COLOR] = DEFAULTS.LIGHT_BG_V_STACK_LABELS_FONT_COLOR;\n  colorForLightBackground[KL.DATALABEL_FONT_COLOR] = DEFAULTS.LIGHT_BG_DATALABEL_FONT_COLOR;\n  colorForLightBackground[KL.TOTAL_DATALABEL_FONT_COLOR] = DEFAULTS.LIGHT_BG_TOTAL_DATALABEL_FONT_COLOR;\n  colorForLightBackground[KL.H_MAJOR_GRIDLINE_LINE_COLOR] = DEFAULTS.LIGHT_BG_H_MAJOR_GRIDLINE_LINE_COLOR;\n  colorForLightBackground[KL.H_MINOR_GRIDLINE_LINE_COLOR] = DEFAULTS.LIGHT_BG_H_MINOR_GRIDLINE_LINE_COLOR;\n  colorForLightBackground[KL.V_MAJOR_GRIDLINE_LINE_COLOR] = DEFAULTS.LIGHT_BG_V_MAJOR_GRIDLINE_LINE_COLOR;\n  colorForLightBackground[KL.V_MINOR_GRIDLINE_LINE_COLOR] = DEFAULTS.LIGHT_BG_V_MINOR_GRIDLINE_LINE_COLOR;\n  colorForLightBackground[KL.CAPTION_FONT_COLOR] = DEFAULTS.LIGHT_BG_CAPTION_FONT_COLOR;\n  colorForLightBackground[KL.PLOT_LINES_FONT_COLOR] = DEFAULTS.LIGHT_BG_PLOTLINES_LABELS_FONT_COLOR;\n  colorForLightBackground[KL.BASELINE] = DEFAULTS.LIGHT_BG_BASELINE_COLOR;\n  var chartTypeToSeriesKeys = ChartMaps.chartTypeToSeriesKeys = {};\n  chartTypeToSeriesKeys[C.COL] = [KL.DATALABEL, KL.DATALABEL_ENABLED, KL.DATALABEL_FONT_STYLE, KL.DATALABEL_FONT_WEIGHT, KL.DATALABEL_FONT_SIZE, KL.DATALABEL_FONT_COLOR, KL.DATALABEL_POSITION, KL.DATALABEL_FORMAT, KL.SERIES_COLORS, KL.NEGATIVE_COLOR, KL.SERIES_BORDER_COLOR, KL.DATA_PROPERTIES];\n  chartTypeToSeriesKeys[C.GROUPED_COL] = [KL.DATALABEL, KL.DATALABEL_ENABLED, KL.DATALABEL_FONT_STYLE, KL.DATALABEL_FONT_WEIGHT, KL.DATALABEL_FONT_SIZE, KL.DATALABEL_FONT_COLOR, KL.DATALABEL_POSITION, KL.DATALABEL_FORMAT, KL.SERIES_COLORS, KL.NEGATIVE_COLOR, KL.SERIES_BORDER_COLOR, KL.DATA_PROPERTIES];\n  chartTypeToSeriesKeys[C.STACKED_COL] = [KL.DATALABEL, KL.DATALABEL_ENABLED, KL.DATALABEL_FONT_STYLE, KL.DATALABEL_FONT_WEIGHT, KL.DATALABEL_FONT_SIZE, KL.DATALABEL_FONT_COLOR, KL.DATALABEL_POSITION, KL.DATALABEL_FORMAT, KL.SERIES_COLORS, KL.NEGATIVE_COLOR, KL.SERIES_BORDER_COLOR, KL.DATA_PROPERTIES];\n  chartTypeToSeriesKeys[C.STACKED_PERCENT_COL] = [KL.DATALABEL, KL.DATALABEL_ENABLED, KL.DATALABEL_FONT_STYLE, KL.DATALABEL_FONT_WEIGHT, KL.DATALABEL_FONT_SIZE, KL.DATALABEL_FONT_COLOR, KL.DATALABEL_POSITION, KL.DATALABEL_FORMAT, KL.SERIES_COLORS, KL.NEGATIVE_COLOR, KL.SERIES_BORDER_COLOR, KL.DATA_PROPERTIES];\n  chartTypeToSeriesKeys[C.BAR] = [KL.DATALABEL, KL.DATALABEL_ENABLED, KL.DATALABEL_FONT_STYLE, KL.DATALABEL_FONT_WEIGHT, KL.DATALABEL_FONT_SIZE, KL.DATALABEL_FONT_COLOR, KL.DATALABEL_POSITION, KL.DATALABEL_FORMAT, KL.SERIES_COLORS, KL.NEGATIVE_COLOR, KL.SERIES_BORDER_COLOR, KL.DATA_PROPERTIES];\n  chartTypeToSeriesKeys[C.GROUPED_BAR] = [KL.DATALABEL, KL.DATALABEL_ENABLED, KL.DATALABEL_FONT_STYLE, KL.DATALABEL_FONT_WEIGHT, KL.DATALABEL_FONT_SIZE, KL.DATALABEL_FONT_COLOR, KL.DATALABEL_POSITION, KL.DATALABEL_FORMAT, KL.SERIES_COLORS, KL.NEGATIVE_COLOR, KL.SERIES_BORDER_COLOR, KL.DATA_PROPERTIES];\n  chartTypeToSeriesKeys[C.STACKED_BAR] = [KL.DATALABEL, KL.DATALABEL_ENABLED, KL.DATALABEL_FONT_STYLE, KL.DATALABEL_FONT_WEIGHT, KL.DATALABEL_FONT_SIZE, KL.DATALABEL_FONT_COLOR, KL.DATALABEL_POSITION, KL.DATALABEL_FORMAT, KL.SERIES_COLORS, KL.NEGATIVE_COLOR, KL.SERIES_BORDER_COLOR, KL.DATA_PROPERTIES];\n  chartTypeToSeriesKeys[C.STACKED_PERCENT_BAR] = [KL.DATALABEL, KL.DATALABEL_ENABLED, KL.DATALABEL_FONT_STYLE, KL.DATALABEL_FONT_WEIGHT, KL.DATALABEL_FONT_SIZE, KL.DATALABEL_FONT_COLOR, KL.DATALABEL_POSITION, KL.DATALABEL_FORMAT, KL.SERIES_COLORS, KL.NEGATIVE_COLOR, KL.SERIES_BORDER_COLOR, KL.DATA_PROPERTIES];\n  chartTypeToSeriesKeys[C.RACEBAR] = [KL.DATALABEL, KL.DATALABEL_ENABLED, KL.DATALABEL_FONT_STYLE, KL.DATALABEL_FONT_WEIGHT, KL.DATALABEL_FONT_SIZE, KL.DATALABEL_FONT_COLOR, KL.DATALABEL_POSITION, KL.DATALABEL_FORMAT, KL.SERIES_COLORS, KL.NEGATIVE_COLOR, KL.SERIES_BORDER_COLOR, KL.DATA_PROPERTIES, KL.SORT_ORDER];\n  chartTypeToSeriesKeys[C.LINE] = [KL.DATALABEL, KL.DATALABEL_ENABLED, KL.DATALABEL_FONT_STYLE, KL.DATALABEL_FONT_WEIGHT, KL.DATALABEL_FONT_SIZE, KL.DATALABEL_FONT_COLOR, KL.DATALABEL_POSITION, KL.DATALABEL_FORMAT, KL.SERIES_COLORS, KL.NEGATIVE_COLOR, KL.MARKER_STATUS, KL.MARKER_SHAPE, KL.MARKER_SIZE, KL.MARKER_COLOR, KL.MARKER_BORDER_COLOR, KL.LINE_TYPE];\n  chartTypeToSeriesKeys[C.SPLINE] = [KL.DATALABEL, KL.DATALABEL_ENABLED, KL.DATALABEL_FONT_STYLE, KL.DATALABEL_FONT_WEIGHT, KL.DATALABEL_FONT_SIZE, KL.DATALABEL_FONT_COLOR, KL.DATALABEL_POSITION, KL.DATALABEL_FORMAT, KL.SERIES_COLORS, KL.NEGATIVE_COLOR, KL.MARKER_STATUS, KL.MARKER_SHAPE, KL.MARKER_SIZE, KL.MARKER_COLOR, KL.MARKER_BORDER_COLOR, KL.LINE_TYPE];\n  chartTypeToSeriesKeys[C.STEP_LINE] = [KL.DATALABEL, KL.DATALABEL_ENABLED, KL.DATALABEL_FONT_STYLE, KL.DATALABEL_FONT_WEIGHT, KL.DATALABEL_FONT_SIZE, KL.DATALABEL_FONT_COLOR, KL.DATALABEL_POSITION, KL.DATALABEL_FORMAT, KL.SERIES_COLORS, KL.NEGATIVE_COLOR, KL.MARKER_STATUS, KL.MARKER_SHAPE, KL.MARKER_SIZE, KL.MARKER_COLOR, KL.MARKER_BORDER_COLOR, KL.LINE_TYPE];\n  chartTypeToSeriesKeys[C.AREA] = [KL.DATALABEL, KL.DATALABEL_ENABLED, KL.DATALABEL_FONT_STYLE, KL.DATALABEL_FONT_WEIGHT, KL.DATALABEL_FONT_SIZE, KL.DATALABEL_FONT_COLOR, KL.DATALABEL_POSITION, KL.DATALABEL_FORMAT, KL.SERIES_COLORS, KL.NEGATIVE_COLOR, KL.MARKER_STATUS, KL.MARKER_SHAPE, KL.MARKER_SIZE, KL.MARKER_COLOR, KL.MARKER_BORDER_COLOR, KL.LINE_TYPE, KL.AREA_OPACITY];\n  chartTypeToSeriesKeys[C.AREA_SPLINE] = [KL.DATALABEL, KL.DATALABEL_ENABLED, KL.DATALABEL_FONT_STYLE, KL.DATALABEL_FONT_WEIGHT, KL.DATALABEL_FONT_SIZE, KL.DATALABEL_FONT_COLOR, KL.DATALABEL_POSITION, KL.DATALABEL_FORMAT, KL.SERIES_COLORS, KL.NEGATIVE_COLOR, KL.MARKER_STATUS, KL.MARKER_SHAPE, KL.MARKER_SIZE, KL.MARKER_COLOR, KL.MARKER_BORDER_COLOR, KL.LINE_TYPE, KL.AREA_OPACITY];\n  chartTypeToSeriesKeys[C.STACKED_AREA] = [KL.DATALABEL, KL.DATALABEL_ENABLED, KL.DATALABEL_FONT_STYLE, KL.DATALABEL_FONT_WEIGHT, KL.DATALABEL_FONT_SIZE, KL.DATALABEL_FONT_COLOR, KL.DATALABEL_POSITION, KL.DATALABEL_FORMAT, KL.SERIES_COLORS, KL.NEGATIVE_COLOR, KL.MARKER_STATUS, KL.MARKER_SHAPE, KL.MARKER_SIZE, KL.MARKER_COLOR, KL.MARKER_BORDER_COLOR, KL.LINE_TYPE, KL.AREA_OPACITY];\n  chartTypeToSeriesKeys[C.STACKED_PERCENT_AREA] = [KL.DATALABEL, KL.DATALABEL_ENABLED, KL.DATALABEL_FONT_STYLE, KL.DATALABEL_FONT_WEIGHT, KL.DATALABEL_FONT_SIZE, KL.DATALABEL_FONT_COLOR, KL.DATALABEL_POSITION, KL.DATALABEL_FORMAT, KL.SERIES_COLORS, KL.NEGATIVE_COLOR, KL.MARKER_STATUS, KL.MARKER_SHAPE, KL.MARKER_SIZE, KL.MARKER_COLOR, KL.MARKER_BORDER_COLOR, KL.LINE_TYPE, KL.AREA_OPACITY];\n  chartTypeToSeriesKeys[C.PIE] = [KL.DATALABEL, KL.DATALABEL_ENABLED, KL.DATALABEL_FONT_STYLE, KL.DATALABEL_FONT_WEIGHT, KL.DATALABEL_FONT_SIZE, KL.DATALABEL_FONT_COLOR, KL.DATALABEL_POSITION, KL.DATALABEL_FORMAT, KL.SERIES_COLORS, KL.NEGATIVE_COLOR, KL.SERIES_BORDER_COLOR, KL.DATA_PROPERTIES, KL.START_ANGLE];\n  chartTypeToSeriesKeys[C.SEMI_PIE] = [KL.DATALABEL, KL.DATALABEL_ENABLED, KL.DATALABEL_FONT_STYLE, KL.DATALABEL_FONT_WEIGHT, KL.DATALABEL_FONT_SIZE, KL.DATALABEL_FONT_COLOR, KL.DATALABEL_POSITION, KL.DATALABEL_FORMAT, KL.SERIES_COLORS, KL.NEGATIVE_COLOR, KL.SERIES_BORDER_COLOR, KL.DATA_PROPERTIES, KL.START_ANGLE];\n  chartTypeToSeriesKeys[C.DONUT] = [KL.DATALABEL, KL.DATALABEL_ENABLED, KL.DATALABEL_FONT_STYLE, KL.DATALABEL_FONT_WEIGHT, KL.DATALABEL_FONT_SIZE, KL.DATALABEL_FONT_COLOR, KL.DATALABEL_POSITION, KL.DATALABEL_FORMAT, KL.SERIES_COLORS, KL.NEGATIVE_COLOR, KL.SERIES_BORDER_COLOR, KL.DATA_PROPERTIES, KL.START_ANGLE];\n  chartTypeToSeriesKeys[C.SEMI_DONUT] = [KL.DATALABEL, KL.DATALABEL_ENABLED, KL.DATALABEL_FONT_STYLE, KL.DATALABEL_FONT_WEIGHT, KL.DATALABEL_FONT_SIZE, KL.DATALABEL_FONT_COLOR, KL.DATALABEL_POSITION, KL.DATALABEL_FORMAT, KL.SERIES_COLORS, KL.NEGATIVE_COLOR, KL.SERIES_BORDER_COLOR, KL.DATA_PROPERTIES, KL.START_ANGLE];\n  chartTypeToSeriesKeys[C.WORDCLOUD] = [KL.DATALABEL, KL.DATALABEL_ENABLED, KL.DATALABEL_FONT_STYLE, KL.DATALABEL_FONT_WEIGHT, KL.DATALABEL_FONT_SIZE, KL.DATALABEL_FONT_COLOR, KL.DATALABEL_POSITION, KL.DATALABEL_FORMAT, KL.SERIES_COLORS, KL.NEGATIVE_COLOR, KL.TOOLTIP_ENABLED];\n  chartTypeToSeriesKeys[C.SCATTER] = [KL.DATALABEL, KL.DATALABEL_ENABLED, KL.DATALABEL_FONT_STYLE, KL.DATALABEL_FONT_WEIGHT, KL.DATALABEL_FONT_SIZE, KL.DATALABEL_FONT_COLOR, KL.DATALABEL_POSITION, KL.DATALABEL_FORMAT, KL.SERIES_COLORS, KL.NEGATIVE_COLOR, KL.MARKER_STATUS, KL.MARKER_SHAPE, KL.MARKER_SIZE, KL.MARKER_COLOR, KL.MARKER_BORDER_COLOR, KL.LINE_TYPE];\n  chartTypeToSeriesKeys[C.SCATTER_LINE] = [KL.DATALABEL, KL.DATALABEL_ENABLED, KL.DATALABEL_FONT_STYLE, KL.DATALABEL_FONT_WEIGHT, KL.DATALABEL_FONT_SIZE, KL.DATALABEL_FONT_COLOR, KL.DATALABEL_POSITION, KL.DATALABEL_FORMAT, KL.SERIES_COLORS, KL.NEGATIVE_COLOR, KL.MARKER_STATUS, KL.MARKER_SHAPE, KL.MARKER_SIZE, KL.MARKER_COLOR, KL.MARKER_BORDER_COLOR, KL.LINE_TYPE];\n  chartTypeToSeriesKeys[C.SCATTER_LINE_MARKERS] = [KL.DATALABEL, KL.DATALABEL_ENABLED, KL.DATALABEL_FONT_STYLE, KL.DATALABEL_FONT_WEIGHT, KL.DATALABEL_FONT_SIZE, KL.DATALABEL_FONT_COLOR, KL.DATALABEL_POSITION, KL.DATALABEL_FORMAT, KL.SERIES_COLORS, KL.NEGATIVE_COLOR, KL.MARKER_STATUS, KL.MARKER_SHAPE, KL.MARKER_SIZE, KL.MARKER_COLOR, KL.MARKER_BORDER_COLOR, KL.LINE_TYPE];\n  chartTypeToSeriesKeys[C.BUBBLE] = [KL.DATALABEL, KL.DATALABEL_ENABLED, KL.DATALABEL_FONT_STYLE, KL.DATALABEL_FONT_WEIGHT, KL.DATALABEL_FONT_SIZE, KL.DATALABEL_FONT_COLOR, KL.DATALABEL_POSITION, KL.DATALABEL_FORMAT, KL.SERIES_COLORS, KL.NEGATIVE_COLOR, KL.TOOLTIP_ENABLED];\n  chartTypeToSeriesKeys[C.FUNNEL] = [KL.DATALABEL, KL.DATALABEL_ENABLED, KL.DATALABEL_FONT_STYLE, KL.DATALABEL_FONT_WEIGHT, KL.DATALABEL_FONT_SIZE, KL.DATALABEL_FONT_COLOR, KL.DATALABEL_POSITION, KL.DATALABEL_FORMAT, KL.SERIES_COLORS, KL.NEGATIVE_COLOR, KL.SERIES_BORDER_COLOR, KL.DATA_PROPERTIES];\n  chartTypeToSeriesKeys[C.WEIGHTED_FUNNEL] = [KL.DATALABEL, KL.DATALABEL_ENABLED, KL.DATALABEL_FONT_STYLE, KL.DATALABEL_FONT_WEIGHT, KL.DATALABEL_FONT_SIZE, KL.DATALABEL_FONT_COLOR, KL.DATALABEL_POSITION, KL.DATALABEL_FORMAT, KL.SERIES_COLORS, KL.NEGATIVE_COLOR, KL.SERIES_BORDER_COLOR, KL.DATA_PROPERTIES];\n  chartTypeToSeriesKeys[C.BULLET_COL] = [KL.DATALABEL, KL.DATALABEL_ENABLED, KL.DATALABEL_FONT_STYLE, KL.DATALABEL_FONT_WEIGHT, KL.DATALABEL_FONT_SIZE, KL.DATALABEL_FONT_COLOR, KL.DATALABEL_POSITION, KL.DATALABEL_FORMAT, KL.SERIES_COLORS, KL.NEGATIVE_COLOR, KL.SERIES_BORDER_COLOR, KL.DATA_PROPERTIES, KL.TARGET_OPTIONS, KL.TARGET_COLOR];\n  chartTypeToSeriesKeys[C.BULLET_BAR] = [KL.DATALABEL, KL.DATALABEL_ENABLED, KL.DATALABEL_FONT_STYLE, KL.DATALABEL_FONT_WEIGHT, KL.DATALABEL_FONT_SIZE, KL.DATALABEL_FONT_COLOR, KL.DATALABEL_POSITION, KL.DATALABEL_FORMAT, KL.SERIES_COLORS, KL.NEGATIVE_COLOR, KL.SERIES_BORDER_COLOR, KL.DATA_PROPERTIES, KL.TARGET_OPTIONS, KL.TARGET_COLOR];\n  chartTypeToSeriesKeys[C.HISTOGRAM] = [KL.DATALABEL, KL.DATALABEL_ENABLED, KL.DATALABEL_FONT_STYLE, KL.DATALABEL_FONT_WEIGHT, KL.DATALABEL_FONT_SIZE, KL.DATALABEL_FONT_COLOR, KL.DATALABEL_POSITION, KL.DATALABEL_FORMAT, KL.SERIES_COLORS, KL.NEGATIVE_COLOR, KL.SERIES_BORDER_COLOR, KL.DATA_PROPERTIES];\n  chartTypeToSeriesKeys[C.LINE_TIME_SERIES] = [KL.DATALABEL, KL.DATALABEL_ENABLED, KL.DATALABEL_FONT_STYLE, KL.DATALABEL_FONT_WEIGHT, KL.DATALABEL_FONT_SIZE, KL.DATALABEL_FONT_COLOR, KL.DATALABEL_POSITION, KL.DATALABEL_FORMAT, KL.SERIES_COLORS, KL.NEGATIVE_COLOR, KL.MARKER_STATUS, KL.MARKER_SHAPE, KL.MARKER_SIZE, KL.MARKER_COLOR, KL.MARKER_BORDER_COLOR, KL.LINE_TYPE];\n  chartTypeToSeriesKeys[C.AREA_TIME_SERIES] = [KL.DATALABEL, KL.DATALABEL_ENABLED, KL.DATALABEL_FONT_STYLE, KL.DATALABEL_FONT_WEIGHT, KL.DATALABEL_FONT_SIZE, KL.DATALABEL_FONT_COLOR, KL.DATALABEL_POSITION, KL.DATALABEL_FORMAT, KL.SERIES_COLORS, KL.NEGATIVE_COLOR, KL.MARKER_STATUS, KL.MARKER_SHAPE, KL.MARKER_SIZE, KL.MARKER_COLOR, KL.MARKER_BORDER_COLOR, KL.LINE_TYPE, KL.AREA_OPACITY];\n  chartTypeToSeriesKeys[C.COMBO] = [KL.DATALABEL, KL.DATALABEL_ENABLED, KL.DATALABEL_FONT_STYLE, KL.DATALABEL_FONT_WEIGHT, KL.DATALABEL_FONT_SIZE, KL.DATALABEL_FONT_COLOR, KL.DATALABEL_POSITION, KL.DATALABEL_FORMAT, KL.SERIES_COLORS, KL.NEGATIVE_COLOR, KL.MARKER_STATUS, KL.MARKER_SHAPE, KL.MARKER_SIZE, KL.MARKER_COLOR, KL.MARKER_BORDER_COLOR, KL.LINE_TYPE];\n})(window || this);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/Utils/ChartMaps.js\n");

/***/ }),

/***/ "./js/Utils/ChartSkeletonConstructor.js":
/*!**********************************************!*\
  !*** ./js/Utils/ChartSkeletonConstructor.js ***!
  \**********************************************/
/***/ (function() {

"use strict";
eval("/*$Id$*/\n //No I18N\n\n(function (ctx) {\n  var ChartConstants = ctx.ChartConstants;\n  var ChartKeyList = ctx.ChartKeyList;\n  var chartTypeToKeys = ctx.ChartMaps.chartTypeToKeys;\n\n  var ChartSkeletonConstructor = function () {\n    function setChart(json) {\n      json[ChartConstants.CHART] || (json[ChartConstants.CHART] = {});\n    }\n\n    function setAnimation(json) {\n      setChart(json);\n      json[ChartConstants.CHART][ChartConstants.ANIMATION] || (json[ChartConstants.CHART][ChartConstants.ANIMATION] = {});\n    }\n\n    function setGradient(json) {\n      setChart(json);\n      json[ChartConstants.CHART][ChartConstants.GRADIENT] || (json[ChartConstants.CHART][ChartConstants.GRADIENT] = {});\n    }\n\n    function setCaption(json) {\n      json[ChartConstants.CAPTION] || (json[ChartConstants.CAPTION] = {});\n    }\n\n    function setDonutTotalDatalabels(json) {\n      json[ChartConstants.DONUT_TOTAL_DATALABELS] || (json[ChartConstants.DONUT_TOTAL_DATALABELS] = {});\n    }\n\n    function setTitle(json) {\n      json[ChartConstants.TITLE] || (json[ChartConstants.TITLE] = {});\n    }\n\n    function setSubTitle(json) {\n      json[ChartConstants.SUBTITLE] || (json[ChartConstants.SUBTITLE] = {});\n    }\n\n    function setLegend(json) {\n      json[ChartConstants.LEGEND] || (json[ChartConstants.LEGEND] = {});\n    }\n\n    function setHAxis(json) {\n      json[ChartConstants.HAXIS] || (json[ChartConstants.HAXIS] = []);\n    }\n\n    function setVAxis(json) {\n      json[ChartConstants.VAXIS] || (json[ChartConstants.VAXIS] = []);\n    }\n\n    function setSeriesProperties(json) {\n      json[ChartConstants.SERIES_PROPERTIES] || (json[ChartConstants.SERIES_PROPERTIES] = []);\n    }\n\n    function setTooltip(json) {\n      json[ChartConstants.TOOLTIP] || (json[ChartConstants.TOOLTIP] = {});\n    }\n\n    var keyToFunction = {};\n    keyToFunction[ChartKeyList.CHART] = setChart;\n    keyToFunction[ChartKeyList.CAPTION] = setCaption;\n    keyToFunction[ChartKeyList.DONUT_TOTAL_DATALABELS] = setDonutTotalDatalabels;\n    keyToFunction[ChartKeyList.ANIMATION] = setAnimation;\n    keyToFunction[ChartKeyList.GRADIENT] = setGradient;\n    keyToFunction[ChartKeyList.COLORS] = setChart;\n    keyToFunction[ChartKeyList.TITLE] = setTitle;\n    keyToFunction[ChartKeyList.SUBTITLE] = setSubTitle;\n    keyToFunction[ChartKeyList.LEGEND] = setLegend;\n    keyToFunction[ChartKeyList.HAXIS] = setHAxis;\n    keyToFunction[ChartKeyList.VAXIS] = setVAxis;\n    keyToFunction[ChartKeyList.SERIES_PROPERTIES] = setSeriesProperties;\n    keyToFunction[ChartKeyList.TOOLTIP] = setTooltip;\n\n    function getSkeleton(keyList, type) {\n      var skeleton = {};\n      var keysLen = keyList ? keyList.length : 0;\n\n      for (var i = 0; i < keysLen; i++) {\n        if (keyToFunction[keyList[i]]) {\n          keyToFunction[keyList[i]](skeleton);\n        }\n      }\n\n      return skeleton;\n    }\n\n    return {\n      construct: function construct(type) {\n        var keyList = chartTypeToKeys[type];\n        return getSkeleton(keyList, type);\n      }\n    };\n  }();\n\n  ctx.ChartSkeletonConstructor = ChartSkeletonConstructor;\n})(window || this);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/Utils/ChartSkeletonConstructor.js\n");

/***/ }),

/***/ "./js/Utils/ChartsPlugin.js":
/*!**********************************!*\
  !*** ./js/Utils/ChartsPlugin.js ***!
  \**********************************/
/***/ (function() {

"use strict";
eval("/*$Id$*/\n //No I18N\n\n(function (ctx) {\n  var ChartConstants = ctx.ChartConstants;\n\n  var ChartsPlugin = function () {\n    function loadHighChartsCode() {\n      Highcharts.seriesTypes.line.prototype.drawLegendSymbol = Highcharts.seriesTypes.area.prototype.drawLegendSymbol;\n      Highcharts.seriesTypes.columnrange.prototype.drawDataLabels = Highcharts.seriesTypes.bar.prototype.drawDataLabels;\n      /**\n       * Animate dataLabels functionality\n       */\n\n      (function (H) {\n        var FLOAT = /^-?\\d+\\.?\\d*$/; // Add animated textSetter, just like fill/strokeSetters\n\n        H.Fx.prototype.textSetter = function (proceed) {\n          var startValue = this.start.replace(/ /g, ''),\n              endValue = this.end.replace(/ /g, ''),\n              currentValue = this.end.replace(/ /g, '');\n\n          if ((startValue || '').match(FLOAT)) {\n            startValue = parseInt(startValue, 10);\n            endValue = parseInt(endValue, 10); // No support for float\n\n            currentValue = Highcharts.numberFormat(Math.round(startValue + (endValue - startValue) * this.pos), 0);\n          }\n\n          this.elem.endText = this.end;\n          this.elem.attr(this.prop, currentValue, null, true);\n        }; // Add textGetter, not supported at all at this moment:\n\n\n        H.SVGElement.prototype.textGetter = function (hash, elem) {\n          var ct = this.text.element.textContent || '';\n          return this.endText ? this.endText : ct.substring(0, ct.length / 2);\n        }; // Temporary change label.attr() with label.animate():\n        // In core it's simple change attr(...) => animate(...) for text prop\n\n\n        H.wrap(H.Series.prototype, 'drawDataLabels', function (proceed) {\n          //No I18N\n          var ret,\n              attr = H.SVGElement.prototype.attr,\n              chart = this.chart;\n\n          if (chart.sequenceTimer) {\n            this.points.forEach(function (point) {\n              return (point.dataLabels || []).forEach(function (label) {\n                return label.attr = function (hash, val) {\n                  if (hash && hash.text !== undefined) {\n                    var text = hash.text;\n                    delete hash.text;\n                    this.attr(hash);\n                    this.animate({\n                      text: text\n                    });\n                    return this;\n                  } else {\n                    return attr.apply(this, arguments);\n                  }\n                };\n              });\n            });\n          }\n\n          ret = proceed.apply(this, Array.prototype.slice.call(arguments, 1));\n          this.points.forEach(function (p) {\n            return (p.dataLabels || []).forEach(function (d) {\n              return d.attr = attr;\n            });\n          });\n          return ret;\n        });\n      })(Highcharts); //Rounded Corners workaround code\n\n\n      (function (H) {\n        var rel = H.relativeLength;\n        H.wrap(H.seriesTypes.column.prototype, 'translate', function (proceed) {\n          //No I18N\n          var options = this.options,\n              topMargin = options.topMargin || 0,\n              bottomMargin = options.bottomMargin || 0;\n          proceed.call(this);\n          H.each(this.points, function (point) {\n            var shapeArgs = point.shapeArgs,\n                w = shapeArgs.width,\n                h = shapeArgs.height,\n                x = shapeArgs.x,\n                y = shapeArgs.y; // Get the radius\n\n            var rTopLeft = rel(options.borderRadiusTopLeft || 0, w),\n                rTopRight = rel(options.borderRadiusTopRight || 0, w),\n                rBottomRight = rel(options.borderRadiusBottomRight || 0, w),\n                rBottomLeft = rel(options.borderRadiusBottomLeft || 0, w);\n\n            if (rTopLeft || rTopRight || rBottomRight || rBottomLeft) {\n              var maxR = Math.min(w, h) / 2;\n\n              if (rTopLeft > maxR) {\n                rTopLeft = maxR;\n              }\n\n              if (rTopRight > maxR) {\n                rTopRight = maxR;\n              }\n\n              if (rBottomRight > maxR) {\n                rBottomRight = maxR;\n              }\n\n              if (rBottomLeft > maxR) {\n                rBottomLeft = maxR;\n              } // Preserve the box for data labels\n\n\n              point.dlBox = point.shapeArgs;\n              point.shapeType = 'path'; //No I18N\n\n              point.shapeArgs = {\n                d: [['M', x + rTopLeft, y + topMargin], // top side\n                ['L', x + w - rTopRight, y + topMargin], //No I18N\n                // top right corner\n                ['C', x + w - rTopRight / 2, y, x + w, y + rTopRight / 2, x + w, y + rTopRight], //No I18N\n                // right side\n                ['L', x + w, y + h - rBottomRight], //No I18N\n                // bottom right corner\n                ['C', x + w, y + h - rBottomRight / 2, x + w - rBottomRight / 2, y + h, x + w - rBottomRight, y + h + bottomMargin], //No I18N\n                // bottom side\n                ['L', x + rBottomLeft, y + h + bottomMargin], // bottom left corner\n                ['C', x + rBottomLeft / 2, y + h, x, y + h - rBottomLeft / 2, x, y + h - rBottomLeft], //No I18N\n                // left side\n                ['L', x, y + rTopLeft], // top left corner\n                ['C', x, y + rTopLeft / 2, x + rTopLeft / 2, y, x + rTopLeft, y], //No I18N\n                ['Z']]\n              };\n            }\n          });\n        });\n      })(Highcharts);\n\n      (function (H) {// Added\n        // get legend item click logic from pie type series for funnel 3d\n        // H.seriesTypes.funnel3d.prototype.pointClass.prototype.setVisible = H.seriesTypes.pie.prototype.pointClass.prototype.setVisible;\n      })(Highcharts);\n\n      (function (H) {\n        var defined = H.defined,\n            isNumber = H.isNumber,\n            pick = H.pick,\n            isArray = H.isArray,\n            isString = H.isString;\n\n        H.Series.prototype.updateData = function (data) {\n          var options = this.options,\n              oldData = this.points,\n              pointsToAdd = [],\n              hasUpdatedByKey,\n              i,\n              point,\n              lastIndex,\n              requireSorting = this.requireSorting,\n              equalLength = data.length === oldData.length,\n              succeeded = true,\n              enabledDataSorting = options.dataSorting;\n          this.xIncrement = null; // Iterate the new data\n\n          data.forEach(function (pointOptions, i) {\n            var id,\n                x,\n                pointIndex,\n                optionsObject = enabledDataSorting ? pointOptions : defined(pointOptions) && this.pointClass.prototype.optionsToObject.call({\n              series: this\n            }, pointOptions) || {}; // Get the x of the new data point\n\n            x = optionsObject.x;\n            id = optionsObject.id;\n\n            if (id || isNumber(x)) {\n              // CHANGE\n              pointIndex = enabledDataSorting ? i : this.findPointIndex(optionsObject, lastIndex); // Matching X not found\n              // or used already due to ununique x values (#8995),\n              // add point (but later)\n\n              if (pointIndex === -1 || pointIndex === undefined || // CHANGE\n              pointIndex >= oldData.length) {\n                pointsToAdd.push(pointOptions); // Matching X found, update\n              } else if (oldData[pointIndex] && pointOptions !== options.data[pointIndex]) {\n                oldData[pointIndex].update(pointOptions, false, null, false); // Mark it touched, below we will remove all points that\n                // are not touched.\n\n                oldData[pointIndex].touched = true; // Speed optimize by only searching after last known\n                // index. Performs ~20% bettor on large data sets.\n\n                if (requireSorting) {\n                  lastIndex = pointIndex + 1;\n                } // Point exists, no changes, don't remove it\n\n              } else if (oldData[pointIndex]) {\n                oldData[pointIndex].touched = true;\n              } // If the length is equal and some of the nodes had a\n              // match in the same position, we don't want to remove\n              // non-matches.\n\n\n              if (!equalLength || i !== pointIndex || this.hasDerivedData) {\n                hasUpdatedByKey = true;\n              }\n            }\n          }, this); // Remove points that don't exist in the updated data set\n\n          if (hasUpdatedByKey) {\n            i = oldData.length;\n\n            while (i--) {\n              point = oldData[i];\n\n              if (point && !point.touched) {\n                point.remove(false);\n              }\n            } // If we did not find keys (ids or x-values), and the length is the\n            // same, update one-to-one\n\n          } else if (equalLength) {\n            data.forEach(function (point, i) {\n              // .update doesn't exist on a linked, hidden series (#3709)\n              // (#10187)\n              if (oldData[i].update && point !== oldData[i].y) {\n                oldData[i].update(point, false, null, false);\n              }\n            }); // Did not succeed in updating data\n          } else {\n            succeeded = false;\n          }\n\n          oldData.forEach(function (point) {\n            if (point) {\n              point.touched = false;\n            }\n          });\n\n          if (!succeeded) {\n            return false;\n          } // Add new points\n\n\n          pointsToAdd.forEach(function (point) {\n            this.addPoint(point, false, null, null, false);\n          }, this);\n          return true;\n        };\n\n        H.Series.prototype.setData = function (data, redraw, animation, updatePoints) {\n          var series = this,\n              oldData = series.points,\n              oldDataLength = oldData && oldData.length || 0,\n              dataLength,\n              options = series.options,\n              dataSorting = options.dataSorting,\n              chart = series.chart,\n              firstPoint = null,\n              xAxis = series.xAxis,\n              i,\n              turboThreshold = options.turboThreshold,\n              pt,\n              xData = this.xData,\n              yData = this.yData,\n              pointArrayMap = series.pointArrayMap,\n              valueCount = pointArrayMap && pointArrayMap.length,\n              keys = options.keys,\n              indexOfX = 0,\n              indexOfY = 1,\n              updatedData;\n          data = data || [];\n          dataLength = data.length;\n          redraw = pick(redraw, true); // CHANGE\n\n          if (dataSorting && dataSorting.enabled) {\n            data = this.sortData(data);\n          } // First try to run Point.update which is cheaper, allows animation,\n          // and keeps references to points.\n\n\n          if (updatePoints !== false && dataLength && oldDataLength && !series.cropped && !series.hasGroupedData && series.visible && // Soft updating has no benefit in boost, and causes JS error\n          // (#8355)\n          !series.isSeriesBoosting) {\n            updatedData = this.updateData(data);\n          }\n\n          if (!updatedData) {\n            // Reset properties\n            series.xIncrement = null;\n            series.colorCounter = 0; // for series with colorByPoint (#1547)\n            // Update parallel arrays\n\n            this.parallelArrays.forEach(function (key) {\n              series[key + 'Data'].length = 0;\n            }); // In turbo mode, only one- or twodimensional arrays of numbers\n            // are allowed. The first value is tested, and we assume that\n            // all the rest are defined the same way. Although the 'for'\n            // loops are similar, they are repeated inside each if-else\n            // conditional for max performance.\n\n            if (turboThreshold && dataLength > turboThreshold) {\n              // find the first non-null point\n              i = 0;\n\n              while (firstPoint === null && i < dataLength) {\n                firstPoint = data[i];\n                i++;\n              }\n\n              if (isNumber(firstPoint)) {\n                // assume all points are numbers\n                for (i = 0; i < dataLength; i++) {\n                  xData[i] = this.autoIncrement();\n                  yData[i] = data[i];\n                } // Assume all points are arrays when first point is\n\n              } else if (isArray(firstPoint)) {\n                if (valueCount) {\n                  // [x, low, high] or [x, o, h, l, c]\n                  for (i = 0; i < dataLength; i++) {\n                    pt = data[i];\n                    xData[i] = pt[0];\n                    yData[i] = pt.slice(1, valueCount + 1);\n                  }\n                } else {\n                  // [x, y]\n                  if (keys) {\n                    indexOfX = keys.indexOf('x');\n                    indexOfY = keys.indexOf('y');\n                    indexOfX = indexOfX >= 0 ? indexOfX : 0;\n                    indexOfY = indexOfY >= 0 ? indexOfY : 1;\n                  }\n\n                  for (i = 0; i < dataLength; i++) {\n                    pt = data[i];\n                    xData[i] = pt[indexOfX];\n                    yData[i] = pt[indexOfY];\n                  }\n                }\n              } else {\n                // Highcharts expects configs to be numbers or arrays in\n                // turbo mode\n                H.error(12, false, chart);\n              }\n            } else {\n              for (i = 0; i < dataLength; i++) {\n                if (data[i] !== undefined) {\n                  // stray commas in oldIE\n                  pt = {\n                    series: series\n                  };\n                  series.pointClass.prototype.applyOptions.apply(pt, [data[i]]);\n                  series.updateParallelArrays(pt, i);\n                }\n              }\n            } // Forgetting to cast strings to numbers is a common caveat when\n            // handling CSV or JSON\n\n\n            if (yData && isString(yData[0])) {\n              H.error(14, true, chart);\n            }\n\n            series.data = [];\n            series.options.data = series.userOptions.data = data; // destroy old points\n\n            i = oldDataLength;\n\n            while (i--) {\n              if (oldData[i] && oldData[i].destroy) {\n                oldData[i].destroy();\n              }\n            } // reset minRange (#878)\n\n\n            if (xAxis) {\n              xAxis.minRange = xAxis.userMinRange;\n            } // redraw\n\n\n            series.isDirty = chart.isDirtyBox = true;\n            series.isDirtyData = !!oldData;\n            animation = false;\n          } // Typically for pie series, points need to be processed and\n          // generated prior to rendering the legend\n\n\n          if (options.legendType === 'point') {\n            this.processData();\n            this.generatePoints();\n          }\n\n          if (redraw) {\n            chart.redraw(animation);\n          }\n        };\n\n        H.Series.prototype.sortData = function (data) {\n          var options = this.options,\n              order = options.dataSorting.order,\n              sortedData;\n          data.forEach(function (pointOptions, i) {\n            data[i] = defined(pointOptions) && this.pointClass.prototype.optionsToObject.call({\n              series: this\n            }, pointOptions) || {};\n          }, this);\n          sortedData = data.slice();\n\n          if (order === 'descending') {\n            sortedData.sort(function (a, b) {\n              return b.y - a.y;\n            });\n          } else {\n            sortedData.sort(function (a, b) {\n              return a.y - b.y;\n            });\n          }\n\n          data.forEach(function (point) {\n            point.x = sortedData.indexOf(point);\n          });\n          return data;\n        };\n      })(Highcharts);\n      /**\n       * For log scale - base value handling\n       */\n\n\n      Highcharts.Axis.prototype.log2lin = function (num) {\n        if (!this) {\n          return Math.log(num) / Math.LN10;\n        }\n\n        var baseValue = this && this.userOptions && this.userOptions.baseValue || 10;\n        var isNegative = num < 0,\n            adjustedNum = Math.abs(num),\n            result;\n\n        if (adjustedNum < baseValue) {\n          adjustedNum += (baseValue - adjustedNum) / baseValue;\n        }\n\n        result = Math.log(adjustedNum) / Math.log(baseValue);\n        return isNegative ? -result : result;\n      };\n\n      Highcharts.Axis.prototype.lin2log = function (num) {\n        if (!this) {\n          return Math.pow(10, num);\n        }\n\n        var baseValue = this && this.userOptions && this.userOptions.baseValue || 10;\n        var isNegative = num < 0,\n            absNum = Math.abs(num),\n            result = Math.pow(baseValue, absNum);\n\n        if (result < baseValue) {\n          result = baseValue * (result - 1) / (baseValue - 1);\n        }\n\n        return isNegative ? -result : result;\n      };\n    }\n\n    function loadZohoChartsCode() {}\n\n    var keyToFunction = {};\n    keyToFunction[ChartConstants.HIGHCHARTS] = loadHighChartsCode;\n    keyToFunction[ChartConstants.ZOHOCHARTS] = loadZohoChartsCode;\n    return {\n      load: function load(frameworkName) {\n        keyToFunction[frameworkName]();\n      }\n    };\n  }();\n\n  ctx.ChartsPlugin = ChartsPlugin;\n})(window || this);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/Utils/ChartsPlugin.js\n");

/***/ }),

/***/ "./js/Utils/GeneralUtilities.js":
/*!**************************************!*\
  !*** ./js/Utils/GeneralUtilities.js ***!
  \**************************************/
/***/ (function() {

"use strict";
eval("/*$Id$*/\n //No I18N\n\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n(function (ctx) {\n  var DEFAULTS = ctx.ChartDefaults.DEFAULTS;\n  var ChartMaps = ctx.ChartMaps;\n  var C = ctx.ChartConstants;\n\n  var GeneralUtilities = function () {\n    function _hexToNum(hex) {\n      return parseInt(hex, 16);\n    }\n\n    function toHex(rgb) {\n      var hex = Number(rgb).toString(16);\n\n      if (hex.length < 2) {\n        hex = \"0\" + hex;\n      }\n\n      return hex;\n    }\n\n    return {\n      isObject: function isObject(t) {\n        return _typeof(t) == 'object'; //No I18N\n      },\n      isString: function isString(t) {\n        return typeof t == 'string'; //No I18N\n      },\n      isNumber: function isNumber(t) {\n        return !isNaN(Number(t));\n      },\n      isPieType: function isPieType(t) {\n        return t.indexOf(C.PIE) != -1 || t.indexOf(C.SEMI_PIE) != -1;\n      },\n      isDonutType: function isDonutType(t) {\n        return t.indexOf(C.DONUT) != -1 || t.indexOf(C.SEMI_DONUT) != -1;\n      },\n      isPieSeries: function isPieSeries(t) {\n        return t.indexOf(C.PIE) != -1 || t.indexOf(C.SEMI_PIE) != -1 || t.indexOf(C.DONUT) != -1 || t.indexOf(C.SEMI_DONUT) != -1;\n      },\n      isSemiType: function isSemiType(t) {\n        return t.indexOf(C.SEMI_PIE) != -1 || t.indexOf(C.SEMI_DONUT) != -1;\n      },\n      isFunnelSeries: function isFunnelSeries(t) {\n        return t.indexOf(C.FUNNEL) != -1 || t.indexOf(C.WEIGHTED_FUNNEL) != -1;\n      },\n      isBulletSeries: function isBulletSeries(t) {\n        return t.indexOf(C.BULLET_COL) != -1 || t.indexOf(C.BULLET_BAR) != -1;\n      },\n      getDecimalCount: function getDecimalCount(num) {\n        var numStr = String(num);\n\n        if (numStr.includes('.')) {\n          return numStr.split('.')[1].length;\n        }\n\n        return 0;\n      },\n      generateSeriesColor: function generateSeriesColor(colors, index) {\n        // To change the logic in future\n        var len = colors.length;\n        return colors[index % len];\n      },\n      convertStringArrayToNumber: function convertStringArrayToNumber(a) {\n        return a.map(function (t) {\n          return Number(t);\n        });\n      },\n      isHexCode: function isHexCode(t) {\n        return t.indexOf(\"#\") != -1;\n      },\n      rgbToString: function rgbToString(rgb) {\n        return \"rgb(\" + rgb[0] + \",\" + rgb[1] + \",\" + rgb[2] + \")\"; //No I18N\n      },\n      rgbaToString: function rgbaToString(rgba) {\n        return \"rgb(\" + rgba[0] + \",\" + rgba[1] + \",\" + rgba[2] + \",\" + rgba[3] + \")\"; //No I18N\n      },\n      stringToRGB: function stringToRGB(rgbString) {\n        var rgbValues = rgbString.substring(rgbString.indexOf(\"(\") + 1, rgbString.indexOf(\")\"));\n        var rgbArray = rgbValues.split(\",\");\n        return rgbArray;\n      },\n      setAlphaToColor: function setAlphaToColor(color, alpha) {\n        var rgb = GeneralUtilities.isHexCode(color) ? GeneralUtilities.stringToRGB(GeneralUtilities.hexToRgb(color)) : GeneralUtilities.stringToRGB(color);\n        rgb[3] = alpha;\n        return GeneralUtilities.rgbaToString(rgb);\n      },\n      getDiffShadeWithAlpha: function getDiffShadeWithAlpha(color, t) {\n        var rgb = GeneralUtilities.isHexCode(color) ? GeneralUtilities.stringToRGB(GeneralUtilities.hexToRgb(color)) : GeneralUtilities.stringToRGB(color);\n        rgb[0] /= t;\n        rgb[1] /= t;\n        rgb[2] /= t;\n        rgb[3] = rgb[3] || 1;\n        return GeneralUtilities.rgbaToString(rgb);\n      },\n      getDiffShade: function getDiffShade(color, t) {\n        var rgb = GeneralUtilities.isHexCode(color) ? GeneralUtilities.stringToRGB(GeneralUtilities.hexToRgb(color)) : GeneralUtilities.stringToRGB(color);\n        rgb[0] /= t;\n        rgb[1] /= t;\n        rgb[2] /= t;\n        return GeneralUtilities.rgbToString(rgb);\n      },\n      hexToRgb: function hexToRgb(hex, replacementHex) {\n        hex = hex.replace(\"#\", \"\");\n\n        if (hex.length == 3) {\n          hex = hex + hex;\n        }\n\n        if (hex.length != 6) {\n          //currently color correction not supported.\n          if (!replacementHex) {\n            return \"rgb(0, 0, 0)\"; //No I18N\n          }\n\n          hex = replacementHex;\n        }\n\n        var rgb = \"rgb(\"; //No I18N\n\n        var r = \"\";\n        var hexValues = hex.split(\"\");\n\n        for (var idx in hexValues) {\n          var val = hexValues[idx];\n          r = !idx % 2 ? val : r + val;\n\n          if (idx % 2) {\n            var _v = _hexToNum(r);\n\n            if (isNaN(_v)) {\n              _v = 0;\n            }\n\n            rgb += _v;\n\n            if (idx <= 4) {\n              rgb += \",\";\n            }\n\n            r = \"\";\n          }\n        }\n\n        rgb += \")\";\n        return rgb;\n      },\n      rgbToHex: function rgbToHex(r, g, b) {\n        var red = toHex(r);\n        var green = toHex(g);\n        var blue = toHex(b);\n        return \"#\" + red + green + blue;\n      },\n      concatString: function concatString(arr) {\n        var str = '';\n        var arrLen = arr ? arr.length : 0;\n\n        for (var i = 0; i < arrLen; i++) {\n          str += arr[i] ? arr[i] : '';\n        }\n\n        return str;\n      },\n      removeArrayElement: function removeArrayElement(arr, index) {\n        var croppedArray = [];\n        arr.map(function (ele, i) {\n          if (index != i) {\n            croppedArray.push(ele);\n          }\n        });\n        return croppedArray;\n      },\n      findAutoColor: function findAutoColor(color, property) {\n        var rgbValue;\n\n        if (color) {\n          rgbValue = color.indexOf(\"#\") != -1 ? GeneralUtilities.stringToRGB(GeneralUtilities.hexToRgb(color)) : GeneralUtilities.stringToRGB(color);\n        } else {\n          rgbValue = [255, 255, 255]; // Default Color of the Background is White\n        } // USING YIQ \n\n\n        var rgbString;\n        var r = rgbValue[0];\n        var g = rgbValue[1];\n        var b = rgbValue[2];\n\n        if (r == 255 && g == 255 && b == 255) {\n          rgbString = ChartMaps.colorForWhiteBackground[property];\n        } else {\n          var yiq = (r * 299 + g * 587 + b * 114) / 1000;\n\n          if (yiq <= 128) {\n            rgbString = ChartMaps.colorForDarkBackground[property];\n          } else {\n            rgbString = ChartMaps.colorForLightBackground[property];\n          }\n        }\n\n        return rgbString;\n      }\n    };\n  }();\n\n  ctx.GeneralUtilities = GeneralUtilities;\n})(window || this);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/Utils/GeneralUtilities.js\n");

/***/ }),

/***/ "./js/Utils/HCArraySkeletonConstructor.js":
/*!************************************************!*\
  !*** ./js/Utils/HCArraySkeletonConstructor.js ***!
  \************************************************/
/***/ (function() {

"use strict";
eval("/*$Id$*/\n //No I18N\n\n(function (ctx) {\n  var HCConstants = ctx.HCConstants;\n  var HCKeyList = ctx.HCKeyList;\n  var C = ctx.ChartConstants;\n\n  var HCArraySkeletonConstructor = function () {\n    function getVAxisSkeleton(json, chartType) {\n      if (chartType.indexOf(C.STACKED_COL) != -1 || chartType.indexOf(C.STACKED_BAR) != -1) {\n        json[HCConstants.STACK_LABELS] = {};\n        json[HCConstants.STACK_LABELS][HCConstants.STYLE] = {};\n      }\n\n      json[HCConstants.LABELS] = {};\n      json[HCConstants.LABELS][HCConstants.STYLE] = {};\n      json[HCConstants.TITLE] = {};\n      json[HCConstants.TITLE][HCConstants.STYLE] = {};\n      json[HCConstants.PLOT_LINES] = [];\n      return json;\n    }\n\n    function getHAxisSkeleton(json) {\n      json[HCConstants.LABELS] = {};\n      json[HCConstants.LABELS][HCConstants.STYLE] = {};\n      json[HCConstants.TITLE] = {};\n      json[HCConstants.TITLE][HCConstants.STYLE] = {};\n      return json;\n    }\n\n    function getPlotLinesSkeleton(json) {\n      json[HCConstants.LABEL] = {};\n      json[HCConstants.LABEL][HCConstants.STYLE] = {};\n      return json;\n    }\n\n    var keyToFunction = {};\n    keyToFunction[HCKeyList.VAXIS] = getVAxisSkeleton;\n    keyToFunction[HCKeyList.HAXIS] = getHAxisSkeleton;\n    keyToFunction[HCKeyList.PLOT_LINES] = getPlotLinesSkeleton;\n    return {\n      get: function get(key, chartType) {\n        return keyToFunction[key]({}, chartType);\n      }\n    };\n  }();\n\n  ctx.HCArraySkeletonConstructor = HCArraySkeletonConstructor;\n})(window || this);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9qcy9VdGlscy9IQ0FycmF5U2tlbGV0b25Db25zdHJ1Y3Rvci5qcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtDQUNhOztBQUNiLENBQUMsVUFBVUEsR0FBVixFQUFlO0FBQ1osTUFBTUMsV0FBVyxHQUFHRCxHQUFHLENBQUNDLFdBQXhCO0FBQ0EsTUFBTUMsU0FBUyxHQUFHRixHQUFHLENBQUNFLFNBQXRCO0FBQ0EsTUFBTUMsQ0FBQyxHQUFHSCxHQUFHLENBQUNJLGNBQWQ7O0FBQ0EsTUFBSUMsMEJBQTBCLEdBQUksWUFBVztBQUV6QyxhQUFTQyxnQkFBVCxDQUEyQkMsSUFBM0IsRUFBaUNDLFNBQWpDLEVBQTRDO0FBQ3hDLFVBQUdBLFNBQVMsQ0FBQ0MsT0FBVixDQUFrQk4sQ0FBQyxDQUFDTyxXQUFwQixLQUFvQyxDQUFDLENBQXJDLElBQTBDRixTQUFTLENBQUNDLE9BQVYsQ0FBa0JOLENBQUMsQ0FBQ1EsV0FBcEIsS0FBb0MsQ0FBQyxDQUFsRixFQUFxRjtBQUNqRkosUUFBQUEsSUFBSSxDQUFDTixXQUFXLENBQUNXLFlBQWIsQ0FBSixHQUFpQyxFQUFqQztBQUNBTCxRQUFBQSxJQUFJLENBQUNOLFdBQVcsQ0FBQ1csWUFBYixDQUFKLENBQStCWCxXQUFXLENBQUNZLEtBQTNDLElBQW9ELEVBQXBEO0FBQ0g7O0FBQ0ROLE1BQUFBLElBQUksQ0FBQ04sV0FBVyxDQUFDYSxNQUFiLENBQUosR0FBMkIsRUFBM0I7QUFDQVAsTUFBQUEsSUFBSSxDQUFDTixXQUFXLENBQUNhLE1BQWIsQ0FBSixDQUF5QmIsV0FBVyxDQUFDWSxLQUFyQyxJQUE4QyxFQUE5QztBQUNBTixNQUFBQSxJQUFJLENBQUNOLFdBQVcsQ0FBQ2MsS0FBYixDQUFKLEdBQTBCLEVBQTFCO0FBQ0FSLE1BQUFBLElBQUksQ0FBQ04sV0FBVyxDQUFDYyxLQUFiLENBQUosQ0FBd0JkLFdBQVcsQ0FBQ1ksS0FBcEMsSUFBNkMsRUFBN0M7QUFDQU4sTUFBQUEsSUFBSSxDQUFDTixXQUFXLENBQUNlLFVBQWIsQ0FBSixHQUErQixFQUEvQjtBQUNBLGFBQU9ULElBQVA7QUFDSDs7QUFFRCxhQUFTVSxnQkFBVCxDQUEyQlYsSUFBM0IsRUFBaUM7QUFDN0JBLE1BQUFBLElBQUksQ0FBQ04sV0FBVyxDQUFDYSxNQUFiLENBQUosR0FBMkIsRUFBM0I7QUFDQVAsTUFBQUEsSUFBSSxDQUFDTixXQUFXLENBQUNhLE1BQWIsQ0FBSixDQUF5QmIsV0FBVyxDQUFDWSxLQUFyQyxJQUE4QyxFQUE5QztBQUNBTixNQUFBQSxJQUFJLENBQUNOLFdBQVcsQ0FBQ2MsS0FBYixDQUFKLEdBQTBCLEVBQTFCO0FBQ0FSLE1BQUFBLElBQUksQ0FBQ04sV0FBVyxDQUFDYyxLQUFiLENBQUosQ0FBd0JkLFdBQVcsQ0FBQ1ksS0FBcEMsSUFBNkMsRUFBN0M7QUFDQSxhQUFPTixJQUFQO0FBQ0g7O0FBRUQsYUFBU1csb0JBQVQsQ0FBK0JYLElBQS9CLEVBQXFDO0FBQ2pDQSxNQUFBQSxJQUFJLENBQUNOLFdBQVcsQ0FBQ2tCLEtBQWIsQ0FBSixHQUEwQixFQUExQjtBQUNBWixNQUFBQSxJQUFJLENBQUNOLFdBQVcsQ0FBQ2tCLEtBQWIsQ0FBSixDQUF3QmxCLFdBQVcsQ0FBQ1ksS0FBcEMsSUFBNkMsRUFBN0M7QUFDQSxhQUFPTixJQUFQO0FBQ0g7O0FBRUQsUUFBSWEsYUFBYSxHQUFHLEVBQXBCO0FBQ0FBLElBQUFBLGFBQWEsQ0FBQ2xCLFNBQVMsQ0FBQ21CLEtBQVgsQ0FBYixHQUE4Q2YsZ0JBQTlDO0FBQ0FjLElBQUFBLGFBQWEsQ0FBQ2xCLFNBQVMsQ0FBQ29CLEtBQVgsQ0FBYixHQUE4Q0wsZ0JBQTlDO0FBQ0FHLElBQUFBLGFBQWEsQ0FBQ2xCLFNBQVMsQ0FBQ2MsVUFBWCxDQUFiLEdBQThDRSxvQkFBOUM7QUFFQSxXQUFPO0FBQ0hLLE1BQUFBLEdBQUcsRUFBRyxhQUFVQyxHQUFWLEVBQWVoQixTQUFmLEVBQTBCO0FBQzVCLGVBQU9ZLGFBQWEsQ0FBQ0ksR0FBRCxDQUFiLENBQW1CLEVBQW5CLEVBQXVCaEIsU0FBdkIsQ0FBUDtBQUNIO0FBSEUsS0FBUDtBQUtILEdBdkNnQyxFQUFqQzs7QUF5Q0FSLEVBQUFBLEdBQUcsQ0FBQ0ssMEJBQUosR0FBaUNBLDBCQUFqQztBQUVILENBL0NELEVBK0NHb0IsTUFBTSxJQUFJLElBL0NiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXVsdGktY2hhcnQtZnJhbWV3b3JrLy4vanMvVXRpbHMvSENBcnJheVNrZWxldG9uQ29uc3RydWN0b3IuanM/YzdiMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiRJZCQqL1xuXCJ1c2Ugc3RyaWN0XCI7Ly9ObyBJMThOXG4oZnVuY3Rpb24gKGN0eCkge1xuICAgIGNvbnN0IEhDQ29uc3RhbnRzID0gY3R4LkhDQ29uc3RhbnRzO1xuICAgIGNvbnN0IEhDS2V5TGlzdCA9IGN0eC5IQ0tleUxpc3Q7XG4gICAgY29uc3QgQyA9IGN0eC5DaGFydENvbnN0YW50cztcbiAgICB2YXIgSENBcnJheVNrZWxldG9uQ29uc3RydWN0b3IgPSAoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgZnVuY3Rpb24gZ2V0VkF4aXNTa2VsZXRvbiAoanNvbiwgY2hhcnRUeXBlKSB7XG4gICAgICAgICAgICBpZihjaGFydFR5cGUuaW5kZXhPZihDLlNUQUNLRURfQ09MKSAhPSAtMSB8fCBjaGFydFR5cGUuaW5kZXhPZihDLlNUQUNLRURfQkFSKSAhPSAtMSkge1xuICAgICAgICAgICAgICAgIGpzb25bSENDb25zdGFudHMuU1RBQ0tfTEFCRUxTXSA9IHt9O1xuICAgICAgICAgICAgICAgIGpzb25bSENDb25zdGFudHMuU1RBQ0tfTEFCRUxTXVtIQ0NvbnN0YW50cy5TVFlMRV0gPSB7fTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGpzb25bSENDb25zdGFudHMuTEFCRUxTXSA9IHt9O1xuICAgICAgICAgICAganNvbltIQ0NvbnN0YW50cy5MQUJFTFNdW0hDQ29uc3RhbnRzLlNUWUxFXSA9IHt9O1xuICAgICAgICAgICAganNvbltIQ0NvbnN0YW50cy5USVRMRV0gPSB7fVxuICAgICAgICAgICAganNvbltIQ0NvbnN0YW50cy5USVRMRV1bSENDb25zdGFudHMuU1RZTEVdID0ge307XG4gICAgICAgICAgICBqc29uW0hDQ29uc3RhbnRzLlBMT1RfTElORVNdID0gW107XG4gICAgICAgICAgICByZXR1cm4ganNvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldEhBeGlzU2tlbGV0b24gKGpzb24pIHtcbiAgICAgICAgICAgIGpzb25bSENDb25zdGFudHMuTEFCRUxTXSA9IHt9O1xuICAgICAgICAgICAganNvbltIQ0NvbnN0YW50cy5MQUJFTFNdW0hDQ29uc3RhbnRzLlNUWUxFXSA9IHt9O1xuICAgICAgICAgICAganNvbltIQ0NvbnN0YW50cy5USVRMRV0gPSB7fVxuICAgICAgICAgICAganNvbltIQ0NvbnN0YW50cy5USVRMRV1bSENDb25zdGFudHMuU1RZTEVdID0ge307XG4gICAgICAgICAgICByZXR1cm4ganNvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGdldFBsb3RMaW5lc1NrZWxldG9uIChqc29uKSB7XG4gICAgICAgICAgICBqc29uW0hDQ29uc3RhbnRzLkxBQkVMXSA9IHt9O1xuICAgICAgICAgICAganNvbltIQ0NvbnN0YW50cy5MQUJFTF1bSENDb25zdGFudHMuU1RZTEVdID0ge307XG4gICAgICAgICAgICByZXR1cm4ganNvbjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBrZXlUb0Z1bmN0aW9uID0ge307XG4gICAgICAgIGtleVRvRnVuY3Rpb25bSENLZXlMaXN0LlZBWElTXSAgICAgICAgICAgPSAgICBnZXRWQXhpc1NrZWxldG9uO1xuICAgICAgICBrZXlUb0Z1bmN0aW9uW0hDS2V5TGlzdC5IQVhJU10gICAgICAgICAgID0gICAgZ2V0SEF4aXNTa2VsZXRvbjtcbiAgICAgICAga2V5VG9GdW5jdGlvbltIQ0tleUxpc3QuUExPVF9MSU5FU10gICAgICA9ICAgIGdldFBsb3RMaW5lc1NrZWxldG9uO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBnZXQgOiBmdW5jdGlvbiAoa2V5LCBjaGFydFR5cGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ga2V5VG9GdW5jdGlvbltrZXldKHt9LCBjaGFydFR5cGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH0pKCk7XG5cbiAgICBjdHguSENBcnJheVNrZWxldG9uQ29uc3RydWN0b3IgPSBIQ0FycmF5U2tlbGV0b25Db25zdHJ1Y3RvcjtcblxufSkod2luZG93IHx8IHRoaXMpOyJdLCJuYW1lcyI6WyJjdHgiLCJIQ0NvbnN0YW50cyIsIkhDS2V5TGlzdCIsIkMiLCJDaGFydENvbnN0YW50cyIsIkhDQXJyYXlTa2VsZXRvbkNvbnN0cnVjdG9yIiwiZ2V0VkF4aXNTa2VsZXRvbiIsImpzb24iLCJjaGFydFR5cGUiLCJpbmRleE9mIiwiU1RBQ0tFRF9DT0wiLCJTVEFDS0VEX0JBUiIsIlNUQUNLX0xBQkVMUyIsIlNUWUxFIiwiTEFCRUxTIiwiVElUTEUiLCJQTE9UX0xJTkVTIiwiZ2V0SEF4aXNTa2VsZXRvbiIsImdldFBsb3RMaW5lc1NrZWxldG9uIiwiTEFCRUwiLCJrZXlUb0Z1bmN0aW9uIiwiVkFYSVMiLCJIQVhJUyIsImdldCIsImtleSIsIndpbmRvdyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./js/Utils/HCArraySkeletonConstructor.js\n");

/***/ }),

/***/ "./js/Utils/HCConstants.js":
/*!*********************************!*\
  !*** ./js/Utils/HCConstants.js ***!
  \*********************************/
/***/ (function() {

"use strict";
eval("/*$Id$*/\n //No I18N\n\n(function (ctx) {\n  var HCConstants = ctx.HCConstants = {}; //Highcharts JSON Keys\n\n  HCConstants.CHART = \"chart\"; //No I18N\n\n  HCConstants.CAPTION = \"caption\"; //No I18N\n\n  HCConstants.WIDTH = \"width\"; //No I18N\n\n  HCConstants.HEIGHT = \"height\"; //No I18N\n\n  HCConstants.RENDER_TO = \"renderTo\"; //No I18N\n\n  HCConstants.INVERTED = \"inverted\"; //No I18N\n\n  HCConstants.TYPE = \"type\"; //No I18N\n\n  HCConstants.REFLOW = \"reflow\"; //No I18N\n\n  HCConstants.BORDER_COLOR = \"borderColor\"; //No I18N\n\n  HCConstants.BORDER_WIDTH = \"borderWidth\"; //No I18N\n\n  HCConstants.BACKGROUND_COLOR = \"backgroundColor\"; //No I18N\n\n  HCConstants.STOPS = \"stops\"; //No I18N\n\n  HCConstants.COLORS = \"colors\"; //No I18N\n\n  HCConstants.TITLE = \"title\"; //No I18N\n\n  HCConstants.TEXT = \"text\"; //No I18N\n\n  HCConstants.FONT_FAMILY = \"fontFamily\"; //No I18N\n\n  HCConstants.FONT_STYLE = \"fontStyle\"; //No I18N\n\n  HCConstants.FONT_COLOR = \"color\"; //No I18N\n\n  HCConstants.FONT_SIZE = \"fontSize\"; //No I18N\n\n  HCConstants.FONT_WEIGHT = \"fontWeight\"; //No I18N\n\n  HCConstants.SUBTITLE = \"subtitle\"; //No I18N\n\n  HCConstants.LEGEND = \"legend\"; //No I18N\n\n  HCConstants.LEGEND_HALIGN = \"align\"; //No I18N\n\n  HCConstants.LEGEND_VALIGN = \"verticalAlign\"; //No I18N\n\n  HCConstants.SERIES = \"series\"; //No I18N\n\n  HCConstants.THRESHOLD = \"threshold\"; //No I18N\n\n  HCConstants.NEGATIVE_COLOR = \"negativeColor\"; //No I18N\n\n  HCConstants.DATALABELS = \"dataLabels\"; //No I18N\n\n  HCConstants.DISTANCE = \"distance\"; //No I18N\n\n  HCConstants.FORMATTER = \"formatter\"; //No I18N\n\n  HCConstants.STACKING = \"stacking\"; //No I18N\n\n  HCConstants.INSIDE = \"inside\"; //No I18N\n\n  HCConstants.CROP = \"crop\"; //No I18N\n\n  HCConstants.OVERFLOW = \"overflow\"; //No I18N\n\n  HCConstants.VERTICAL_ALIGN = \"verticalAlign\"; //No I18N\n\n  HCConstants.ALIGN = \"align\"; //No I18N\n\n  HCConstants.ENABLED = \"enabled\"; //No I18N\n\n  HCConstants.HAXIS = \"xAxis\"; //No I18N\n\n  HCConstants.VAXIS = \"yAxis\"; //No I18N\n\n  HCConstants.LABELS = \"labels\"; //No I18N\n\n  HCConstants.PLOT_OPTIONS = \"plotOptions\"; //No I18N\n\n  HCConstants.CREDITS = \"credits\"; //No I18N\n\n  HCConstants.COLORS = \"colors\"; //No I18N\n\n  HCConstants.STYLE = \"style\"; //No I18N\n\n  HCConstants.SERIES_COLOR = \"color\"; //No I18N\n\n  HCConstants.NAME = \"name\"; //No I18N\n\n  HCConstants.DATA = \"data\"; //No I18N\n\n  HCConstants.MARKER = \"marker\"; //No I18N\n\n  HCConstants.SYMBOL = \"symbol\"; //No I18N\n\n  HCConstants.RADIUS = \"radius\"; //No I18N\n\n  HCConstants.FILL_COLOR = \"fillColor\"; //No I18N\n\n  HCConstants.LINE_COLOR = \"lineColor\"; //No I18N\n\n  HCConstants.LINE_WIDTH = \"lineWidth\"; //No I18N\n\n  HCConstants.DASH_STYLE = \"dashStyle\"; //No I18N\n\n  HCConstants.SCALE_TYPE = \"type\"; //No I18N\n\n  HCConstants.PLOT_LINES = \"plotLines\"; //No I18N\n\n  HCConstants.LABEL = \"label\"; //No I18N\n\n  HCConstants.VALUE = \"value\"; //No I18N\n\n  HCConstants.COLOR = \"color\"; //No I18N\n\n  HCConstants.MIN = \"min\"; //No I18N\n\n  HCConstants.MAX = \"max\"; //No I18N\n\n  HCConstants.TICK_INTERVAL = \"tickInterval\"; //No I18N\n\n  HCConstants.BASE_VALUE = \"baseValue\"; //No I18N\n\n  HCConstants.STAGGER_LINES = \"staggerLines\"; //No I18N\n\n  HCConstants.ROTATION = \"rotation\"; //No I18N\n\n  HCConstants.REVERSED = \"reversed\"; //No I18N\n\n  HCConstants.LEGEND_STYLE = \"itemStyle\"; //No I18N\n\n  HCConstants.GRIDLINE_WIDTH = \"gridLineWidth\"; //No I18N\n\n  HCConstants.TICK_AMOUNT = \"tickAmount\"; //No I18N\n\n  HCConstants.MAJOR_GRIDLINE_LINE_TYPE = \"gridLineDashStyle\"; //No I18N\n\n  HCConstants.MAJOR_GRIDLINE_LINE_COLOR = \"gridLineColor\"; //No I18N\n\n  HCConstants.MINOR_GRIDLINE_WIDTH = \"minorGridLineWidth\"; //No I18N\n\n  HCConstants.MINOR_TICK_INTERVAL = \"minorTickInterval\"; //No I18N\n\n  HCConstants.MINOR_GRIDLINE_LINE_TYPE = \"minorGridLineDashStyle\"; //No I18N\n\n  HCConstants.MINOR_GRIDLINE_LINE_COLOR = \"minorGridLineColor\"; //No I18N\n\n  HCConstants.TOOLTIP = \"tooltip\"; //No I18N\n\n  HCConstants.FOLLOW_TOUCH_MOVE = \"followTouchMove\"; //No I18N\n\n  HCConstants.USE_HTML = \"useHTML\"; //No I18N\n\n  HCConstants.FOLLOW_POINTER = \"followPointer\"; //No I18N\n\n  HCConstants.DELAY_DISPLAY = \"delayForDisplay\"; //No I18N\n\n  HCConstants.HIDE_DELAY = \"hideDelay\"; //No I18N\n\n  HCConstants.POINT_FORMATTER = \"pointFormatter\"; //No I18N\n\n  HCConstants.SHARED = \"shared\"; //No I18N\n\n  HCConstants.SHAPE = \"shape\"; //No I18N\n\n  HCConstants.VISIBLE = \"visible\"; //No I18N\n\n  HCConstants.OPPOSITE = \"opposite\"; //No I18N\n\n  HCConstants.SHOW_IN_LEGEND = \"showInLegend\"; //No I18N\n\n  HCConstants.START_ANGLE = \"startAngle\"; //No I18N\n\n  HCConstants.END_ANGLE = \"endAngle\"; //No I18N\n\n  HCConstants.POINT_PADDING = \"pointPadding\"; //No I18N\n\n  HCConstants.GROUP_PADDING = \"groupPadding\"; //No I18N\n\n  HCConstants.ANIMATE = \"animate\"; //No I18N\n\n  HCConstants.AUTO_ROTATION = \"autoRotation\"; //No I18N\n\n  HCConstants.START_ON_TICK = \"startOnTick\"; //No I18N\n\n  HCConstants.END_ON_TICK = \"endOnTick\"; //No I18N\n\n  HCConstants.MAX_PADDING = \"maxPadding\"; //No I18N\n\n  HCConstants.MIN_PADDING = \"minPadding\"; //No I18N\n\n  HCConstants.ANIMATION = \"animation\"; //No I18N\n\n  HCConstants.TEXT_OUTLINE = \"textOutline\"; //No I18N\n\n  HCConstants.SPACING_TOP = \"spacingTop\"; //No I18N\n\n  HCConstants.SPACING_LEFT = \"spacingLeft\"; //No I18N\n\n  HCConstants.SPACING_RIGHT = \"spacingRight\"; //No I18N\n\n  HCConstants.SPACING_BOTTOM = \"spacingBottom\"; //No I18N\n\n  HCConstants.STACKING_NORMAL = \"normal\"; //No I18N\n\n  HCConstants.STACKING_PERCENT = \"percent\"; //No I18N\n\n  HCConstants.STACK_LABELS = \"stackLabels\"; //No I18N\n\n  HCConstants.GROUPING = \"grouping\"; //No I18N\n\n  HCConstants.STEP = \"step\"; //No I18N\n\n  HCConstants.POINT_PLACEMENT = \"pointPlacement\"; //No I18N\n\n  HCConstants.POINT_START = \"pointStart\"; //No I18N\n\n  HCConstants.BETWEEEN = \"between\"; //No I18N\n\n  HCConstants.CATEGORIES = \"categories\"; //No I18N\n\n  HCConstants.AREA_OPACITY = \"areaOpacity\"; //No I18N\n\n  HCConstants.FILL_OPACITY = \"fillOpacity\"; //No I18N\n\n  HCConstants.CENTER = \"center\"; //No I18N\n\n  HCConstants.SIZE = \"size\"; //No I18N\n\n  HCConstants.INNER_SIZE = \"innerSize\"; //No I18N\n\n  HCConstants.MAX_HEIGHT = \"maxHeight\"; //No I18N\n\n  HCConstants.KEYS = \"keys\"; //No I18N\n\n  HCConstants.ENABLE_MOUSE_TRACKING = \"enableMouseTracking\"; //No I18N\n\n  HCConstants.Z_INDEX = \"zIndex\"; //No I18N\n\n  HCConstants.Y = \"y\"; //No I18N\n\n  HCConstants.FORMAT = \"format\"; //No I18N\n\n  HCConstants.NECK_WIDTH = \"neckWidth\"; //No I18N\n\n  HCConstants.NECK_HEIGHT = \"neckHeight\"; //No I18N\n\n  HCConstants.WEIGHT = \"weight\"; //No I18N\n\n  HCConstants.TARGET_OPTIONS = \"targetOptions\"; //No I18N\n\n  HCConstants.DATE_TIME = \"datetime\"; //No I18N\n\n  HCConstants.DATA_SORTING = \"dataSorting\"; //No I18N\n\n  HCConstants.ORDER = \"order\"; //No I18N\n\n  HCConstants.DURATION = \"duration\"; //No I18N\n\n  HCConstants.EASING = \"easing\"; //No I18N\n\n  HCConstants.DISPLAY = \"display\"; //No I18N\n\n  HCConstants.DECIMALS = \"decimals\"; //No I18N\n\n  HCConstants.CATEGORY = \"category\"; //No I18N\n\n  HCConstants.DATA_COLOR = \"color\"; //No I18N\n  //Regression\n\n  HCConstants.REGRESSION = \"regression\"; //No I18N\n\n  HCConstants.REGRESSION_SETTINGS = \"regressionSettings\"; //No I18N\n\n  HCConstants.REGRESSION_ORDER = \"order\"; //No I18N\n\n  HCConstants.REGRESSION_NAME = \"name\"; //No I18N\n  //Custom Highcharts Properties\n\n  HCConstants.PREFIX = \"prefix\"; //No I18N\n\n  HCConstants.SUFFIX = \"suffix\"; //No I18N\n\n  HCConstants.CURRENCY_SYMBOL = \"currencySymbol\"; //No I18N\n\n  HCConstants.HAS_REGRESSION = \"hasRegression\"; //No I18N\n\n  HCConstants.CHART_TYPE = \"chartType\"; //No I18N\n\n  HCConstants.IS_DATALABEL_SERIES = \"isDatalabelSeries\"; //No I18N\n\n  HCConstants.BINNING_INTERVAL = \"binningInterval\"; //No I18N\n  //Highcharts Chart types\n\n  HCConstants.COL = \"column\"; //No I18N\n\n  HCConstants.LINE = \"line\"; //No I18N\n\n  HCConstants.SPLINE = \"spline\"; //No I18N\n\n  HCConstants.PIE = \"pie\"; //No I18N\n\n  HCConstants.AREA = \"area\"; //No I18N\n\n  HCConstants.AREA_SPLINE = \"areaspline\"; //No I18N\n\n  HCConstants.BAR = \"bar\"; //No I18N\n\n  HCConstants.ITEM = \"item\"; //No I18N\n\n  HCConstants.WORDCLOUD = \"wordcloud\"; //No I18N\n\n  HCConstants.RACEBAR = \"bar\"; //No I18N\n\n  HCConstants.SCATTER = \"scatter\"; //No I18N\n\n  HCConstants.BUBBLE = \"bubble\"; //No I18N\n\n  HCConstants.FUNNEL = \"funnel\"; //No I18N\n\n  HCConstants.WEIGHTED_FUNNEL = \"columnrange\"; //No I18N\n\n  HCConstants.WORDCLOUD = \"wordcloud\"; //No I18N\n\n  HCConstants.BULLET = \"bullet\"; //No I18N\n  //High Chart Line Types\n\n  HCConstants.DASH = \"Dash\"; //No I18N\n\n  HCConstants.DASH_DOT = \"DashDot\"; //No I18N\n\n  HCConstants.DOT = \"Dot\"; //No I18N\n\n  HCConstants.LONG_DASH = \"LongDash\"; //No I18N\n\n  HCConstants.LONG_DASH_DOT = \"LongDashDot\"; //No I18N\n\n  HCConstants.LONG_DASH_DOT_DOT = \"LongDashDotDot\"; //No I18N\n\n  HCConstants.SHORT_DASH = \"ShortDash\"; //No I18N\n\n  HCConstants.SHORT_DASH_DOT = \"ShortDashDot\"; //No I18N\n\n  HCConstants.SHORT_DASH_DOT_DOT = \"ShortDashDotDot\"; //No I18N\n\n  HCConstants.SHORT_DOT = \"ShortDot\"; //No I18N\n\n  HCConstants.SOLID = \"Solid\"; //No I18N\n  //Extras\n\n  HCConstants.GRIDLINE_COUNT_AUTO = \"auto\"; //No I18N\n  //Overflow\n\n  HCConstants.JUSTIFY = \"justify\"; //No I18N\n\n  HCConstants.ALLOW = \"allow\"; //No I18N\n  //Vertical Align\n\n  HCConstants.V_ALIGN_TOP = \"top\"; //No I18N\n\n  HCConstants.V_ALIGN_MIDDLE = \"middle\"; //No I18N\n\n  HCConstants.V_ALIGN_BOTTOM = \"bottom\"; //No I18N\n  //Align\n\n  HCConstants.ALIGN_CENTER = \"center\"; //No I18N\n\n  HCConstants.ALIGN_RIGHT = \"right\"; //No I18N\n\n  HCConstants.ALIGN_LEFT = \"left\"; //No I18N\n  //Step values\n\n  HCConstants.STEP_CENTER = \"center\"; //No I18N\n\n  HCConstants.STEP_RIGHT = \"right\"; //No I18N\n\n  HCConstants.STEP_LEFT = \"left\"; //No I18N\n  //Race Chart States\n\n  HCConstants.ANIMATING = \"animating\"; //No I18N\n\n  HCConstants.PAUSED = \"paused\"; //No I18N\n\n  HCConstants.INITIAL = \"initial\"; //No I18N\n  //Sorting \n\n  HCConstants.DESC = \"descending\"; //No I18N\n\n  HCConstants.ASC = \"ascending\"; //No I18N\n  //Display\n\n  HCConstants.NONE = \"none\"; //No I18N\n\n  HCConstants.BLOCK = \"block\"; //No I18N\n})(window || this);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/Utils/HCConstants.js\n");

/***/ }),

/***/ "./js/Utils/HCCustomHandler.js":
/*!*************************************!*\
  !*** ./js/Utils/HCCustomHandler.js ***!
  \*************************************/
/***/ (function() {

"use strict";
eval("/*$Id$*/\n //No I18N\n\n(function (ctx) {\n  var C = ctx.ChartConstants;\n  var HCKeyList = ctx.HCKeyList;\n  var HCUtils = ctx.HCUtils;\n  var chartTypeToHCKeys = ctx.HCMaps.chartTypeToHCKeys;\n  var chartTypeToHCType = ctx.HCMaps.chartTypeToHCType;\n  var GeneralUtilities = ctx.GeneralUtilities;\n  var HCC = ctx.HCConstants;\n  var KL = ctx.ChartKeyList;\n  var innerKeysMap = ctx.innerKeysMap;\n\n  var HCCustomHandler = function () {\n    function handleDefaults(hcJSON) {\n      hcJSON[HCC.CREDITS][HCC.ENABLED] = false;\n      hcJSON.title.align = \"left\";\n      hcJSON.subtitle.align = \"left\";\n      hcJSON[HCC.CHART][HCC.REFLOW] = true;\n      hcJSON[HCC.CHART][HCC.SPACING_TOP] = 15;\n      hcJSON[HCC.CHART][HCC.SPACING_LEFT] = 20;\n      hcJSON[HCC.CHART][HCC.SPACING_RIGHT] = 20;\n      hcJSON[HCC.CHART][HCC.SPACING_BOTTOM] = 15;\n\n      if (hcJSON[HCC.LEGEND]) {\n        hcJSON[HCC.LEGEND][HCC.MAX_HEIGHT] = 55;\n      }\n    }\n\n    function handleLineChart(hcJSON) {\n      var bgColor = hcJSON[HCC.CHART][HCC.BACKGROUND_COLOR];\n      hcJSON[HCC.HAXIS][0][HCC.LINE_COLOR] = GeneralUtilities.findAutoColor(HCUtils.getBGColor(bgColor), KL.BASELINE);\n    }\n\n    function handleBarChart(hcJSON) {\n      var bgColor = hcJSON[HCC.CHART][HCC.BACKGROUND_COLOR];\n      hcJSON[HCC.HAXIS][0][HCC.LINE_COLOR] = GeneralUtilities.findAutoColor(HCUtils.getBGColor(bgColor), KL.BASELINE);\n      hcJSON[HCC.PLOT_OPTIONS][HCC.BAR] || (hcJSON[HCC.PLOT_OPTIONS][HCC.BAR] = {});\n      hcJSON[HCC.PLOT_OPTIONS][HCC.BAR][HCC.POINT_PADDING] = 0.065;\n      hcJSON[HCC.PLOT_OPTIONS][HCC.BAR][HCC.GROUP_PADDING] = 0.065;\n    }\n\n    function handleGroupedBarChart(hcJSON) {\n      hcJSON[HCC.PLOT_OPTIONS][HCC.COL] || (hcJSON[HCC.PLOT_OPTIONS][HCC.COL] = {});\n      hcJSON[HCC.PLOT_OPTIONS][HCC.COL][HCC.GROUP_PADDING] = 0.065;\n      var bgColor = hcJSON[HCC.CHART][HCC.BACKGROUND_COLOR];\n      hcJSON[HCC.HAXIS][0][HCC.LINE_COLOR] = GeneralUtilities.findAutoColor(HCUtils.getBGColor(bgColor), KL.BASELINE);\n    }\n\n    function handleStackedBarChart(hcJSON) {\n      handleBarChart(hcJSON);\n      var yAxisLength = hcJSON[HCC.VAXIS] ? hcJSON[HCC.VAXIS].length : 0;\n\n      for (var i = 0; i < yAxisLength; i++) {\n        if (hcJSON[HCC.VAXIS][i][HCC.STACK_LABELS] && hcJSON[HCC.VAXIS][i][HCC.STACK_LABELS][HCC.STYLE]) {\n          hcJSON[HCC.VAXIS][i][HCC.STACK_LABELS][HCC.STYLE][HCC.TEXT_OUTLINE] = 0;\n        }\n      }\n    }\n\n    function handleColumnChart(hcJSON) {\n      hcJSON[HCC.PLOT_OPTIONS][HCC.COL] || (hcJSON[HCC.PLOT_OPTIONS][HCC.COL] = {});\n      hcJSON[HCC.PLOT_OPTIONS][HCC.COL][HCC.POINT_PADDING] = 0.065;\n      hcJSON[HCC.PLOT_OPTIONS][HCC.COL][HCC.GROUP_PADDING] = 0.17;\n      var bgColor = hcJSON[HCC.CHART][HCC.BACKGROUND_COLOR];\n      hcJSON[HCC.HAXIS][0][HCC.LINE_COLOR] = GeneralUtilities.findAutoColor(HCUtils.getBGColor(bgColor), KL.BASELINE);\n    }\n\n    function handleGroupedColumnChart(hcJSON) {\n      hcJSON[HCC.PLOT_OPTIONS][HCC.COL] || (hcJSON[HCC.PLOT_OPTIONS][HCC.COL] = {});\n      hcJSON[HCC.PLOT_OPTIONS][HCC.COL][HCC.GROUP_PADDING] = 0.1;\n      var bgColor = hcJSON[HCC.CHART][HCC.BACKGROUND_COLOR];\n      hcJSON[HCC.HAXIS][0][HCC.LINE_COLOR] = GeneralUtilities.findAutoColor(HCUtils.getBGColor(bgColor), KL.BASELINE);\n    }\n\n    function handleStackedColumnChart(hcJSON) {\n      handleColumnChart(hcJSON);\n      var yAxisLength = hcJSON[HCC.VAXIS] ? hcJSON[HCC.VAXIS].length : 0;\n\n      for (var i = 0; i < yAxisLength; i++) {\n        if (hcJSON[HCC.VAXIS][i][HCC.STACK_LABELS] && hcJSON[HCC.VAXIS][i][HCC.STACK_LABELS][HCC.STYLE]) {\n          hcJSON[HCC.VAXIS][i][HCC.STACK_LABELS][HCC.STYLE][HCC.TEXT_OUTLINE] = 0;\n        }\n      }\n    }\n\n    function handleAreaChart(hcJSON) {\n      var bgColor = hcJSON[HCC.CHART][HCC.BACKGROUND_COLOR];\n      hcJSON[HCC.HAXIS][0][HCC.LINE_COLOR] = GeneralUtilities.findAutoColor(HCUtils.getBGColor(bgColor), KL.BASELINE);\n    }\n\n    function handlePieChart(hcJSON) {}\n\n    function handleSemiPieChart(hcJSON) {}\n\n    function handleRaceBarChart(hcJSON) {\n      var bgColor = hcJSON[HCC.CHART][HCC.BACKGROUND_COLOR];\n      hcJSON[HCC.HAXIS][0][HCC.LINE_COLOR] = GeneralUtilities.findAutoColor(HCUtils.getBGColor(bgColor), KL.BASELINE); //set y props\n\n      hcJSON[HCC.VAXIS][0][HCC.LABELS] || (hcJSON[HCC.VAXIS][0][HCC.LABELS] = {});\n      hcJSON[HCC.VAXIS][0][HCC.LABELS][HCC.AUTO_ROTATION] = false; //delete formatter for race bar chart\n\n      delete hcJSON[HCC.VAXIS][0][HCC.LABELS][HCC.FORMATTER]; // hcJSON[HCC.VAXIS][0][HCC.OPPOSITE] = true;\n\n      hcJSON[HCC.VAXIS][0][HCC.START_ON_TICK] = false;\n      hcJSON[HCC.VAXIS][0][HCC.END_ON_TICK] = false;\n      hcJSON[HCC.VAXIS][0][HCC.MAX_PADDING] = 0; //set x props\n\n      hcJSON[HCC.HAXIS][0][HCC.LABELS] || (hcJSON[HCC.HAXIS][0][HCC.LABELS] = {});\n      hcJSON[HCC.HAXIS][0][HCC.LABELS][HCC.OVERFLOW] = HCC.JUSTIFY;\n      hcJSON[HCC.HAXIS][0][HCC.LABELS][HCC.ANIMATE] = true; //set padding\n\n      hcJSON[HCC.PLOT_OPTIONS][HCC.BAR] || (hcJSON[HCC.PLOT_OPTIONS][HCC.BAR] = {});\n      hcJSON[HCC.PLOT_OPTIONS][HCC.BAR][HCC.POINT_PADDING] = 0.07;\n      hcJSON[HCC.PLOT_OPTIONS][HCC.BAR][HCC.GROUP_PADDING] = 0.001;\n    }\n\n    function handleScatterChart(hcJSON) {\n      var xAxisLen = hcJSON[HCC.HAXIS] ? hcJSON[HCC.HAXIS].length : 0;\n      var bgColor = hcJSON[HCC.CHART][HCC.BACKGROUND_COLOR];\n\n      for (var i = 0; i < xAxisLen; i++) {\n        hcJSON[HCC.HAXIS][i][HCC.LINE_COLOR] = GeneralUtilities.findAutoColor(HCUtils.getBGColor(bgColor), KL.BASELINE);\n        hcJSON[HCC.HAXIS][i][HCC.START_ON_TICK] = true;\n        hcJSON[HCC.HAXIS][i][HCC.END_ON_TICK] = true;\n        hcJSON[HCC.HAXIS][i][HCC.MAX_PADDING] = 0;\n        hcJSON[HCC.HAXIS][i][HCC.MIN_PADDING] = 0;\n      }\n    }\n\n    function handleFunnelChart(hcJSON) {}\n\n    function handleWeightedFunnelChart(hcJSON) {\n      hcJSON[HCC.PLOT_OPTIONS][HCC.WEIGHTED_FUNNEL] || (hcJSON[HCC.PLOT_OPTIONS][HCC.WEIGHTED_FUNNEL] = {});\n      hcJSON[HCC.PLOT_OPTIONS][HCC.WEIGHTED_FUNNEL][HCC.GROUP_PADDING] = 0;\n      hcJSON[HCC.VAXIS][0][HCC.VISIBLE] = false;\n      hcJSON[HCC.HAXIS][0][HCC.VISIBLE] = false;\n      hcJSON[HCC.CHART][HCC.INVERTED] = true;\n    }\n\n    function handleWordCloudChart(hcJSON) {}\n\n    var keyToFunction = {};\n    keyToFunction[C.COL] = handleColumnChart;\n    keyToFunction[C.GROUPED_COL] = handleGroupedColumnChart;\n    keyToFunction[C.STACKED_COL] = handleStackedColumnChart;\n    keyToFunction[C.STACKED_PERCENT_COL] = handleColumnChart;\n    keyToFunction[C.LINE] = handleLineChart;\n    keyToFunction[C.SPLINE] = handleLineChart;\n    keyToFunction[C.STEP_LINE] = handleLineChart;\n    keyToFunction[C.BAR] = handleBarChart;\n    keyToFunction[C.GROUPED_BAR] = handleGroupedBarChart;\n    keyToFunction[C.STACKED_BAR] = handleStackedBarChart;\n    keyToFunction[C.STACKED_PERCENT_BAR] = handleBarChart;\n    keyToFunction[C.AREA] = handleAreaChart;\n    keyToFunction[C.AREA_SPLINE] = handleAreaChart;\n    keyToFunction[C.STACKED_AREA] = handleAreaChart;\n    keyToFunction[C.STACKED_PERCENT_AREA] = handleAreaChart;\n    keyToFunction[C.PIE] = handlePieChart;\n    keyToFunction[C.SEMI_PIE] = handleSemiPieChart;\n    keyToFunction[C.RACEBAR] = handleRaceBarChart;\n    keyToFunction[C.SCATTER] = handleScatterChart;\n    keyToFunction[C.SCATTER_LINE] = handleScatterChart;\n    keyToFunction[C.SCATTER_LINE_MARKERS] = handleScatterChart;\n    keyToFunction[C.BUBBLE] = handleLineChart;\n    keyToFunction[C.FUNNEL] = handleFunnelChart;\n    keyToFunction[C.WEIGHTED_FUNNEL] = handleWeightedFunnelChart;\n    keyToFunction[C.BULLET_COL] = handleLineChart;\n    keyToFunction[C.BULLET_BAR] = handleLineChart;\n    keyToFunction[C.HISTOGRAM] = handleLineChart;\n    keyToFunction[C.WORDCLOUD] = handleWordCloudChart;\n    keyToFunction[C.LINE_TIME_SERIES] = handleLineChart;\n    keyToFunction[C.AREA_TIME_SERIES] = handleLineChart;\n    keyToFunction[C.COMBO] = handleLineChart;\n    return {\n      handle: function handle(type, chartType, hcJSON) {\n        handleDefaults(hcJSON);\n\n        if (keyToFunction[chartType]) {\n          keyToFunction[chartType](hcJSON);\n        }\n      }\n    };\n  }();\n\n  ctx.HCCustomHandler = HCCustomHandler;\n})(window || this);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/Utils/HCCustomHandler.js\n");

/***/ }),

/***/ "./js/Utils/HCDatalabelHandler.js":
/*!****************************************!*\
  !*** ./js/Utils/HCDatalabelHandler.js ***!
  \****************************************/
/***/ (function() {

"use strict";
eval("/*$Id$*/\n //No I18N\n\n(function (ctx) {\n  var C = ctx.ChartConstants;\n  var HCC = ctx.HCConstants;\n\n  var HCDatalabelHandler = function () {\n    function displayValue(currency, chartType) {\n      return function () {\n        if (this.series.options.dataLabels.style.color == \"transparent\") {\n          var cSymbol = currency;\n          var floats = this.point.decimals;\n\n          if (this.y >= 0) {\n            return '<span style=\"color: ' + (this.series.color || this.color) + '\">' + (cSymbol === '%' ? Highcharts.numberFormat(this.y, floats) + cSymbol : cSymbol + Highcharts.numberFormat(this.y, floats)) + '</span>';\n          }\n\n          return '<span style=\"color: ' + (this.series.color || this.color) + '\">' + (cSymbol === '%' ? '-' + Highcharts.numberFormat(Math.abs(this.y), floats) + cSymbol : '-' + cSymbol + Highcharts.numberFormat(Math.abs(this.y), floats)) + '</span>'; // return '<span style=\"color: ' + (this.series.color || this.color) + '\">' + this.key + '</span>'\n        } else {\n          var cSymbol = currency;\n          var floats = this.point.decimals;\n\n          if (this.y >= 0) {\n            return cSymbol === '%' ? Highcharts.numberFormat(this.y, floats) + cSymbol : cSymbol + Highcharts.numberFormat(this.y, floats);\n          }\n\n          return cSymbol === '%' ? '-' + Highcharts.numberFormat(Math.abs(this.y), floats) + cSymbol : '-' + cSymbol + Highcharts.numberFormat(Math.abs(this.y), floats);\n        }\n      };\n    }\n\n    function displayValue_WeightedFunnel(currency, chartType) {\n      return function () {\n        if (this.series.options.dataLabels.style.color == \"transparent\") {\n          var cSymbol = currency;\n          var floats = this.point.decimals;\n\n          if (this.point.options.y >= 0) {\n            return '<span style=\"color: ' + (this.series.color || this.color) + '\">' + (cSymbol === '%' ? Highcharts.numberFormat(this.point.options.y, floats) + cSymbol : cSymbol + Highcharts.numberFormat(this.point.options.y, floats)) + '</span>';\n          }\n\n          return '<span style=\"color: ' + (this.series.color || this.color) + '\">' + (cSymbol === '%' ? '-' + Highcharts.numberFormat(Math.abs(this.point.options.y), floats) + cSymbol : '-' + cSymbol + Highcharts.numberFormat(Math.abs(this.point.options.y), floats)) + '</span>'; // return '<span style=\"color: ' + (this.series.color || this.color) + '\">' + this.key + '</span>'\n        } else {\n          var cSymbol = currency;\n          var floats = this.point.decimals;\n\n          if (this.point.options.y >= 0) {\n            return cSymbol === '%' ? Highcharts.numberFormat(this.point.options.y, floats) + cSymbol : cSymbol + Highcharts.numberFormat(this.point.options.y, floats);\n          }\n\n          return cSymbol === '%' ? '-' + Highcharts.numberFormat(Math.abs(this.point.options.y), floats) + cSymbol : '-' + cSymbol + Highcharts.numberFormat(Math.abs(this.point.options.y), floats);\n        }\n      };\n    }\n\n    function displayLabel() {\n      if (this.series.options.dataLabels.style.color == \"transparent\") {\n        return '<span style=\"color: ' + (this.series.color || this.color) + '\">' + this.key + '</span>';\n      } else {\n        return this.key;\n      }\n    }\n\n    function displayLabel_WeightedFunnel() {\n      if (this.series.options.dataLabels.style.color == \"transparent\") {\n        return '<span style=\"color: ' + (this.series.color || this.color) + '\">' + this.series.name + '</span>';\n      } else {\n        return this.series.name;\n      }\n    }\n\n    function displayLabel_Funnel() {\n      if (this.series.options.dataLabels.style.color == \"transparent\") {\n        return '<span style=\"color: ' + (this.series.color || this.color) + '\">' + this.point.options.name + '</span>';\n      } else {\n        return this.point.options.name;\n      }\n    }\n\n    function displaySeries(chartType) {\n      return function () {\n        if (chartType == C.WATERFALL) {\n          if (this.series.options.dataLabels.style.color == \"transparent\") {\n            return '<span style=\"color: ' + this.color + '\">' + this.series.name + '</span>';\n          } else {\n            return this.series.name;\n          }\n        } else {\n          if (this.series.options.dataLabels.style.color == \"transparent\") {\n            return '<span style=\"color: ' + (this.series.color || this.color) + '\">' + this.series.name + '</span>';\n          } else {\n            return this.series.name;\n          }\n        }\n      };\n    }\n\n    function displaySeries_WeightedFunnel() {\n      if (this.series.options.dataLabels.style.color == \"transparent\") {\n        return '<span style=\"color: ' + (this.series.color || this.color) + '\">' + this.point.options.seriesName + '</span>';\n      } else {\n        return this.point.options.seriesName;\n      } //return this.point.options.seriesName; \n\n    }\n\n    function displaySeries_Funnel() {\n      if (this.series.options.dataLabels.style.color == \"transparent\") {\n        return '<span style=\"color: ' + (this.series.color || this.color) + '\">' + this.series.name + '</span>';\n      } else {\n        return this.series.name;\n      } //return this.series.name; \n\n    }\n\n    function displayPercent() {\n      if (this.series.options.dataLabels.style.color == \"transparent\") {\n        return '<span style=\"color: ' + (this.series.color || this.color) + '\">' + Highcharts.numberFormat(this.percentage, 2) + '%' + '</span>';\n      } else {\n        return Highcharts.numberFormat(this.percentage, 2) + '%';\n      } //return Highcharts.numberFormat(this.percentage, 2) + '%';\n\n    }\n\n    function displayPercent_WeightedFunnel() {\n      if (this.series.options.dataLabels.style.color == \"transparent\") {\n        return '<span style=\"color: ' + (this.series.color || this.color) + '\">' + Highcharts.numberFormat(this.point.options.percentage, 2) + '%' + '</span>';\n      } else {\n        return Highcharts.numberFormat(this.point.options.percentage, 2) + '%';\n      } //return Highcharts.numberFormat(this.point.options.percentage, 2) + '%';\n\n    }\n\n    function displaySeries_Value(currency, chartType) {\n      return function () {\n        if (this.series.options.dataLabels.style.color == \"transparent\") {\n          var cSymbol = currency;\n          var floats = this.point.decimals;\n\n          if (this.y >= 0) {\n            return '<span style=\"color: ' + (this.series.color || this.color) + '\">' + (cSymbol === '%' ? this.series.name + ' (' + Highcharts.numberFormat(this.y, floats) + cSymbol + ')' : this.series.name + ' (' + cSymbol + Highcharts.numberFormat(this.y, floats) + ')') + '</span>';\n          }\n\n          return '<span style=\"color: ' + (this.series.color || this.color) + '\">' + (cSymbol === '%' ? '-' + Highcharts.numberFormat(Math.abs(this.y), floats) + cSymbol : this.series.name + ' (' + '-' + cSymbol + Highcharts.numberFormat(Math.abs(this.y), floats) + ')') + '</span>'; // return '<span style=\"color: ' + (this.series.color || this.color) + '\">' + this.key + '</span>'\n        } else {\n          var cSymbol = currency;\n          var floats = this.point.decimals;\n\n          if (this.y >= 0) {\n            return cSymbol === '%' ? this.series.name + ' (' + Highcharts.numberFormat(this.y, floats) + cSymbol + ')' : this.series.name + ' (' + cSymbol + Highcharts.numberFormat(this.y, floats) + ')';\n          }\n\n          return cSymbol === '%' ? '-' + Highcharts.numberFormat(Math.abs(this.y), floats) + cSymbol : this.series.name + ' (' + '-' + cSymbol + Highcharts.numberFormat(Math.abs(this.y), floats) + ')';\n        }\n      };\n    }\n\n    function displaySeries_Value_WeightedFunnel(currency, chartType) {\n      return function () {\n        if (this.series.options.dataLabels.style.color == \"transparent\") {\n          var cSymbol = currency;\n          var floats = this.point.decimals;\n\n          if (this.point.options.y >= 0) {\n            return '<span style=\"color: ' + (this.series.color || this.color) + '\">' + (cSymbol === '%' ? this.point.options.seriesName + ' (' + Highcharts.numberFormat(this.point.options.y, floats) + cSymbol + ')' : this.point.options.seriesName + ' (' + cSymbol + Highcharts.numberFormat(this.point.options.y, floats) + ')') + '</span>'; // No I18N\n          }\n\n          return '<span style=\"color: ' + (this.series.color || this.color) + '\">' + (cSymbol === '%' ? '-' + Highcharts.numberFormat(Math.abs(this.point.options.y), floats) + cSymbol : this.point.options.seriesName + ' (' + '-' + cSymbol + Highcharts.numberFormat(Math.abs(this.point.options.y), floats) + ')') + '</span>'; // No I18N\n          // return '<span style=\"color: ' + (this.series.color || this.color) + '\">' + this.key + '</span>'\n        } else {\n          var cSymbol = currency;\n          var floats = this.point.decimals;\n\n          if (this.point.options.y >= 0) {\n            return cSymbol === '%' ? this.point.options.seriesName + ' (' + Highcharts.numberFormat(this.point.options.y, floats) + cSymbol + ')' : this.point.options.seriesName + ' (' + cSymbol + Highcharts.numberFormat(this.point.options.y, floats) + ')'; // No I18N\n          }\n\n          return cSymbol === '%' ? '-' + Highcharts.numberFormat(Math.abs(this.point.options.y), floats) + cSymbol : this.point.options.seriesName + ' (' + '-' + cSymbol + Highcharts.numberFormat(Math.abs(this.point.options.y), floats) + ')'; // No I18N\n        }\n      };\n    }\n\n    function displaySeries_Value_Funnel(currency, chartType) {\n      return function () {\n        if (this.series.options.dataLabels.style.color == \"transparent\") {\n          var cSymbol = currency;\n          var floats = this.point.decimals;\n\n          if (this.point.options.y >= 0) {\n            return '<span style=\"color: ' + (this.series.color || this.color) + '\">' + (cSymbol === '%' ? this.series.name + ' (' + Highcharts.numberFormat(this.point.options.y, floats) + cSymbol + ')' : this.series.name + ' (' + cSymbol + Highcharts.numberFormat(this.point.options.y, floats) + ')') + '</span>'; // No I18N\n          }\n\n          return '<span style=\"color: ' + (this.series.color || this.color) + '\">' + (cSymbol === '%' ? '-' + Highcharts.numberFormat(Math.abs(this.point.options.y), floats) + cSymbol : this.series.name + ' (' + '-' + cSymbol + Highcharts.numberFormat(Math.abs(this.point.options.y), floats) + ')') + '</span>'; // No I18N\n          // return '<span style=\"color: ' + (this.series.color || this.color) + '\">' + this.key + '</span>'\n        } else {\n          var cSymbol = currency;\n          var floats = this.point.decimals;\n\n          if (this.point.options.y >= 0) {\n            return cSymbol === '%' ? this.series.name + ' (' + Highcharts.numberFormat(this.point.options.y, floats) + cSymbol + ')' : this.series.name + ' (' + cSymbol + Highcharts.numberFormat(this.point.options.y, floats) + ')'; // No I18N\n          }\n\n          return cSymbol === '%' ? '-' + Highcharts.numberFormat(Math.abs(this.point.options.y), floats) + cSymbol : this.series.name + ' (' + '-' + cSymbol + Highcharts.numberFormat(Math.abs(this.point.options.y), floats) + ')'; // No I18N\n        }\n      };\n    }\n\n    function displayLabel_Value(currency, chartType) {\n      return function () {\n        if (this.series.options.dataLabels.style.color == \"transparent\") {\n          var cSymbol = currency;\n          var floats = this.point.decimals;\n\n          if (this.y >= 0) {\n            return '<span style=\"color: ' + (this.series.color || this.color) + '\">' + (cSymbol === '%' ? this.key + ' (' + Highcharts.numberFormat(this.y, floats) + cSymbol + ')' : this.key + ' (' + cSymbol + Highcharts.numberFormat(this.y, floats) + ')') + '</span>';\n          }\n\n          return '<span style=\"color: ' + (this.series.color || this.color) + '\">' + (cSymbol === '%' ? '-' + Highcharts.numberFormat(Math.abs(this.y), floats) + cSymbol : this.key + ' (' + '-' + cSymbol + Highcharts.numberFormat(Math.abs(this.y), floats) + ')') + '</span>'; // return '<span style=\"color: ' + (this.series.color || this.color) + '\">' + this.key + '</span>'\n        } else {\n          var cSymbol = currency;\n          var floats = this.point.decimals;\n\n          if (this.y >= 0) {\n            return cSymbol === '%' ? this.key + ' (' + Highcharts.numberFormat(this.y, floats) + cSymbol + ')' : this.key + ' (' + cSymbol + Highcharts.numberFormat(this.y, floats) + ')';\n          }\n\n          return cSymbol === '%' ? '-' + Highcharts.numberFormat(Math.abs(this.y), floats) + cSymbol : this.key + ' (' + '-' + cSymbol + Highcharts.numberFormat(Math.abs(this.y), floats) + ')';\n        }\n      };\n    }\n\n    function displayLabel_Value_WeightedFunnel(currency, chartType) {\n      return function () {\n        if (this.series.options.dataLabels.style.color == \"transparent\") {\n          var cSymbol = currency;\n          var floats = this.point.decimals;\n\n          if (this.point.options.y >= 0) {\n            return '<span style=\"color: ' + (this.series.color || this.color) + '\">' + (cSymbol === '%' ? this.series.name + ' (' + Highcharts.numberFormat(this.point.options.y, floats) + cSymbol + ')' : this.series.name + ' (' + cSymbol + Highcharts.numberFormat(this.point.options.y, floats) + ')') + '</span>';\n          }\n\n          return '<span style=\"color: ' + (this.series.color || this.color) + '\">' + (cSymbol === '%' ? '-' + Highcharts.numberFormat(Math.abs(this.point.options.y), floats) + cSymbol : this.series.name + ' (' + '-' + cSymbol + Highcharts.numberFormat(Math.abs(this.point.options.y), floats) + ')') + '</span>';\n        } else {\n          var cSymbol = currency;\n          var floats = this.point.decimals;\n\n          if (this.point.options.y >= 0) {\n            return cSymbol === '%' ? this.series.name + ' (' + Highcharts.numberFormat(this.point.options.y, floats) + cSymbol + ')' : this.series.name + ' (' + cSymbol + Highcharts.numberFormat(this.point.options.y, floats) + ')';\n          }\n\n          return cSymbol === '%' ? '-' + Highcharts.numberFormat(Math.abs(this.point.options.y), floats) + cSymbol : this.series.name + ' (' + '-' + cSymbol + Highcharts.numberFormat(Math.abs(this.point.options.y), floats) + ')';\n        }\n      };\n    }\n\n    function displayLabel_Value_Funnel(currency, chartType) {\n      return function () {\n        if (this.series.options.dataLabels.style.color == \"transparent\") {\n          var cSymbol = currency;\n          var floats = this.point.decimals;\n\n          if (this.point.options.y >= 0) {\n            return '<span style=\"color: ' + (this.series.color || this.color) + '\">' + (cSymbol === '%' ? this.point.options.name + ' (' + Highcharts.numberFormat(this.point.options.y, floats) + cSymbol + ')' : this.point.options.name + ' (' + cSymbol + Highcharts.numberFormat(this.point.options.y, floats) + ')') + '</span>';\n          }\n\n          return '<span style=\"color: ' + (this.series.color || this.color) + '\">' + (cSymbol === '%' ? '-' + Highcharts.numberFormat(Math.abs(this.point.options.y), floats) + cSymbol : this.point.options.name + ' (' + '-' + cSymbol + Highcharts.numberFormat(Math.abs(this.point.options.y), floats) + ')') + '</span>';\n        } else {\n          var cSymbol = currency;\n          var floats = this.point.decimals;\n\n          if (this.point.options.y >= 0) {\n            return cSymbol === '%' ? this.point.options.name + ' (' + Highcharts.numberFormat(this.point.options.y, floats) + cSymbol + ')' : this.point.options.name + ' (' + cSymbol + Highcharts.numberFormat(this.point.options.y, floats) + ')';\n          }\n\n          return cSymbol === '%' ? '-' + Highcharts.numberFormat(Math.abs(this.point.options.y), floats) + cSymbol : this.point.options.name + ' (' + '-' + cSymbol + Highcharts.numberFormat(Math.abs(this.point.options.y), floats) + ')';\n        }\n      };\n    }\n\n    function displayLabel_Percent() {\n      if (this.series.options.dataLabels.style.color == \"transparent\") {\n        return '<span style=\"color: ' + (this.series.color || this.color) + '\">' + (this.key ? this.key + ' (' + Highcharts.numberFormat(this.percentage, 2) + '%)' : '(' + Highcharts.numberFormat(this.percentage, 2) + '%)') + '</span>';\n      } else {\n        return this.key ? this.key + ' (' + Highcharts.numberFormat(this.percentage, 2) + '%)' : '(' + Highcharts.numberFormat(this.percentage, 2) + '%)';\n      }\n    }\n\n    function displayLabel_Percent_WeightedFunnel() {\n      if (this.series.options.dataLabels.style.color == \"transparent\") {\n        return '<span style=\"color: ' + (this.series.color || this.color) + '\">' + (this.series.name ? this.series.name + ' (' + Highcharts.numberFormat(this.point.options.percentage, 2) + '%)' : '(' + Highcharts.numberFormat(this.point.options.percentage, 2) + '%)') + '</span>';\n      } else {\n        return this.series.name ? this.series.name + ' (' + Highcharts.numberFormat(this.point.options.percentage, 2) + '%)' : '(' + Highcharts.numberFormat(this.point.options.percentage, 2) + '%)';\n      } //return ((this.series.name) ? this.series.name + ' (' + Highcharts.numberFormat(this.point.options.percentage, 2) + '%)' : '(' + Highcharts.numberFormat(this.point.options.percentage, 2) + '%)');\n\n    }\n\n    function displayLabel_Percent_Funnel() {\n      if (this.series.options.dataLabels.style.color == \"transparent\") {\n        return '<span style=\"color: ' + (this.series.color || this.color) + '\">' + (this.point.options.name ? this.point.options.name + ' (' + Highcharts.numberFormat(this.point.options.percentage, 2) + '%)' : '(' + Highcharts.numberFormat(this.point.options.percentage, 2) + '%)') + '</span>';\n      } else {\n        return this.point.options.name ? this.point.options.name + ' (' + Highcharts.numberFormat(this.point.options.percentage, 2) + '%)' : '(' + Highcharts.numberFormat(this.point.options.percentage, 2) + '%)';\n      } //return ((this.point.options.name) ? this.point.options.name + ' (' + Highcharts.numberFormat(this.point.options.percentage, 2) + '%)' : '(' + Highcharts.numberFormat(this.point.options.percentage, 2) + '%)');\n\n    }\n\n    function displayValue_Percent() {\n      if (this.series.options.dataLabels.style.color == \"transparent\") {\n        return '<span style=\"color: ' + (this.series.color || this.color) + '\">' + (this.y ? this.y + ' (' + Highcharts.numberFormat(this.percentage, 2) + '%)' : '(' + Highcharts.numberFormat(this.percentage, 2) + '%)') + '</span>';\n      } else {\n        return this.y ? this.y + ' (' + Highcharts.numberFormat(this.percentage, 2) + '%)' : '(' + Highcharts.numberFormat(this.percentage, 2) + '%)';\n      } //return ((this.y) ? this.y + ' (' + Highcharts.numberFormat(this.percentage, 2) + '%)' : '(' + Highcharts.numberFormat(this.percentage, 2) + '%)');\n\n    }\n\n    function displayValue_Percent_WeightedFunnel() {\n      if (this.series.options.dataLabels.style.color == \"transparent\") {\n        return '<span style=\"color: ' + (this.series.color || this.color) + '\">' + (this.point.options.y ? this.point.options.y + ' (' + Highcharts.numberFormat(this.point.options.percentage, 2) + '%)' : '(' + Highcharts.numberFormat(this.point.options.percentage, 2) + '%)') + '</span>';\n      } else {\n        return this.point.options.y ? this.point.options.y + ' (' + Highcharts.numberFormat(this.point.options.percentage, 2) + '%)' : '(' + Highcharts.numberFormat(this.point.options.percentage, 2) + '%)';\n      } //return ((this.point.options.y) ? this.point.options.y + ' (' + Highcharts.numberFormat(this.point.options.percentage, 2) + '%)' : '(' + Highcharts.numberFormat(this.point.options.percentage, 2) + '%)');\n\n    }\n\n    function displaySeries_Percent() {\n      if (this.series.options.dataLabels.style.color == \"transparent\") {\n        return '<span style=\"color: ' + (this.series.color || this.color) + '\">' + (this.series.name ? this.series.name + ' (' + Highcharts.numberFormat(this.percentage, 2) + '%)' : '(' + Highcharts.numberFormat(this.percentage, 2) + '%)') + '</span>';\n      } else {\n        return this.series.name ? this.series.name + ' (' + Highcharts.numberFormat(this.percentage, 2) + '%)' : '(' + Highcharts.numberFormat(this.percentage, 2) + '%)';\n      } //return ((this.series.name) ? this.series.name + ' (' + Highcharts.numberFormat(this.percentage, 2) + '%)' : '(' + Highcharts.numberFormat(this.percentage, 2) + '%)');\n\n    }\n\n    function displaySeries_Percent_WeightedFunnel() {\n      if (this.series.options.dataLabels.style.color == \"transparent\") {\n        return '<span style=\"color: ' + (this.series.color || this.color) + '\">' + (this.point.options.seriesName + ' (' + Highcharts.numberFormat(this.point.options.percentage, 2) + '%)') + '</span>';\n      } else {\n        return this.point.options.seriesName + ' (' + Highcharts.numberFormat(this.point.options.percentage, 2) + '%)';\n      } //return (this.point.options.seriesName + ' (' + Highcharts.numberFormat(this.point.options.percentage, 2) + '%)');  // No I18N\n\n    }\n\n    function displaySeries_Percent_Funnel() {\n      if (this.series.options.dataLabels.style.color == \"transparent\") {\n        return '<span style=\"color: ' + (this.series.color || this.color) + '\">' + (this.series.name + ' (' + Highcharts.numberFormat(this.point.options.percentage, 2) + '%)') + '</span>';\n      } else {\n        return this.series.name + ' (' + Highcharts.numberFormat(this.point.options.percentage, 2) + '%)';\n      } //return ( this.series.name + ' (' + Highcharts.numberFormat(this.point.options.percentage, 2) + '%)');  // No I18N\n\n    }\n\n    function displaySeriesNameAtEnd() {\n      if (this.point.index == this.series.data.length - 1) {\n        if (this.series.options.dataLabels.style.color == \"transparent\") {\n          return '<span style=\"color: ' + (this.series.color || this.color) + '\">' + this.series.name + '</span>';\n        } else {\n          return this.series.name;\n        } //return this.series.name;\n\n      } else {\n        return null;\n      }\n    }\n\n    function displaySeriesNameAtEnd() {\n      if (this.point.x == this.series.data.length - 1) {\n        return this.series.name;\n      } else {\n        return null;\n      }\n    }\n\n    return {\n      handleDatalabelPosition: function handleDatalabelPosition(position, type, seriesObject, seriesIndex, chartType) {\n        var datalabels = seriesObject[seriesIndex][HCC.DATALABELS];\n        var isBarChart = chartType.indexOf(C.BAR) != -1 || chartType.indexOf(C.COL) != -1;\n        var isPieChart = chartType.indexOf(C.PIE) != -1 || chartType.indexOf(C.SEMI_PIE) != -1;\n        var isWeightedFunnelChart = chartType.indexOf(C.WEIGHTED_FUNNEL) != -1;\n        var isItemPieChart = chartType.indexOf(C.PIE_ITEM) != -1;\n        var isItemChart = chartType.indexOf(C.ITEM) != -1;\n        var isFunnelChart = chartType.indexOf(C.FUNNEL) != -1;\n        var isStackedBarChart = chartType.indexOf(C.STACKED_BAR) != -1 || chartType.indexOf(C.STACKED_PERCENT_BAR) != -1;\n        var isStackedColChart = chartType.indexOf(C.STACKED_COL) != -1 || chartType.indexOf(C.STACKED_PERCENT_COL) != -1;\n        var isDoughnutChart = false; //Old colde need to check    \n\n        switch (position) {\n          case C.AUTO:\n            if (isPieChart || isDoughnutChart || isItemChart || isItemPieChart) {\n              datalabels[HCC.DISTANCE] = 10;\n            } else if (isWeightedFunnelChart) {\n              datalabels[HCC.INSIDE] = undefined;\n              datalabels[HCC.CROP] = true;\n              datalabels[HCC.OVERFLOW] = HCC.JUSTIFY;\n              datalabels[HCC.VERTICAL_ALIGN] = undefined;\n              datalabels[HCC.ALIGN] = undefined;\n            } else if (isStackedBarChart || isStackedColChart) {\n              datalabels[HCC.INSIDE] = true;\n              datalabels[HCC.VERTICAL_ALIGN] = HCC.V_ALIGN_MIDDLE;\n              datalabels[HCC.ALIGN] = HCC.ALIGN_CENTER;\n            } else if (isBarChart) {\n              datalabels[HCC.INSIDE] = false;\n              datalabels[HCC.CROP] = true;\n              datalabels[HCC.OVERFLOW] = HCC.JUSTIFY; // datalabels[HCC.VERTICAL_ALIGN] = HCC.V_ALIGN_BOTTOM;\n\n              datalabels[HCC.VERTICAL_ALIGN] = HCC.V_ALIGN_MIDDLE;\n            } else if (isFunnelChart) {\n              datalabels[HCC.INSIDE] = false;\n              datalabels[HCC.CROP] = true;\n              datalabels[HCC.OVERFLOW] = HCC.JUSTIFY;\n              datalabels[HCC.VERTICAL_ALIGN] = HCC.V_ALIGN_MIDDLE;\n            } else if (type.indexOf(type.indexOf(HCC.LINE)) != -1) {\n              datalabels[HCC.INSIDE] = false;\n              datalabels[HCC.CROP] = true;\n              datalabels[HCC.OVERFLOW] = HCC.JUSTIFY;\n              datalabels[HCC.ALIGN] = HCC.ALIGN_CENTER;\n              datalabels[HCC.VERTICAL_ALIGN] = HCC.V_ALIGN_BOTTOM;\n            } else {\n              datalabels[HCC.INSIDE] = false;\n              datalabels[HCC.CROP] = true;\n              datalabels[HCC.OVERFLOW] = HCC.JUSTIFY;\n              datalabels[HCC.VERTICAL_ALIGN] = HCC.V_ALIGN_BOTTOM;\n            }\n\n            break;\n          //Line\n\n          case C.TOP:\n            datalabels[HCC.INSIDE] = false;\n            datalabels[HCC.CROP] = false;\n            datalabels[HCC.ALIGN] = HCC.ALIGN_CENTER;\n            datalabels[HCC.OVERFLOW] = HCC.ALLOW;\n            datalabels[HCC.VERTICAL_ALIGN] = HCC.V_ALIGN_BOTTOM;\n            break;\n\n          case C.CENTER:\n            datalabels[HCC.INSIDE] = true;\n            datalabels[HCC.ALIGN] = HCC.ALIGN_CENTER;\n            datalabels[HCC.VERTICAL_ALIGN] = HCC.V_ALIGN_MIDDLE;\n            break;\n\n          case C.BOTTOM:\n            datalabels[HCC.INSIDE] = true;\n            datalabels[HCC.ALIGN] = HCC.ALIGN_CENTER;\n            datalabels[HCC.VERTICAL_ALIGN] = HCC.V_ALIGN_TOP;\n            break;\n\n          case C.LEFT:\n            datalabels[HCC.ALIGN] = HCC.ALIGN_RIGHT;\n            datalabels[HCC.VERTICAL_ALIGN] = HCC.V_ALIGN_MIDDLE;\n            break;\n\n          case C.RIGHT:\n            datalabels[HCC.ALIGN] = HCC.ALIGN_LEFT;\n            datalabels[HCC.VERTICAL_ALIGN] = HCC.V_ALIGN_MIDDLE;\n            break;\n          //Bar\n\n          case C.INSIDE_END:\n            if (isBarChart) {\n              datalabels[HCC.INSIDE] = true;\n              datalabels[HCC.VERTICAL_ALIGN] = HCC.V_ALIGN_MIDDLE;\n              datalabels[HCC.ALIGN] = HCC.ALIGN_RIGHT;\n            } else if (isItemPieChart || isItemChart) {\n              datalabels[HCC.DISTANCE] = \"-10%\";\n            } else if (isPieChart) {\n              datalabels[HCC.DISTANCE] = \"-20%\";\n            } else if (isDoughnutChart) {\n              datalabels[HCC.DISTANCE] = \"-3%\";\n            } else {\n              datalabels[HCC.INSIDE] = true;\n              datalabels[HCC.VERTICAL_ALIGN] = HCC.V_ALIGN_TOP;\n            }\n\n            break;\n\n          case C.INSIDE_MIDDLE:\n          case C.INSIDE:\n            if (isBarChart || isWeightedFunnelChart) {\n              datalabels[HCC.INSIDE] = true;\n              datalabels[HCC.VERTICAL_ALIGN] = HCC.V_ALIGN_MIDDLE;\n              datalabels[HCC.ALIGN] = HCC.ALIGN_CENTER;\n            } else if (isItemPieChart) {\n              datalabels[HCC.DISTANCE] = \"-40%\";\n            } else if (isItemChart) {\n              datalabels[HCC.DISTANCE] = \"-30%\";\n            } else if (isPieChart) {\n              datalabels[HCC.DISTANCE] = \"-50%\";\n            } else if (isDoughnutChart) {\n              datalabels[HCC.DISTANCE] = \"-9%\";\n            } else {\n              datalabels[HCC.INSIDE] = true;\n              datalabels[HCC.VERTICAL_ALIGN] = HCC.V_ALIGN_MIDDLE;\n            }\n\n            break;\n\n          case C.INSIDE_BASE:\n            if (isBarChart) {\n              datalabels[HCC.INSIDE] = true;\n              datalabels[HCC.VERTICAL_ALIGN] = HCC.V_ALIGN_MIDDLE;\n              datalabels[HCC.ALIGN] = HCC.ALIGN_LEFT;\n            } else if (isItemPieChart) {\n              datalabels[HCC.DISTANCE] = \"-80%\";\n            } else if (isItemChart) {\n              datalabels[HCC.DISTANCE] = \"-50%\";\n            } else if (isPieChart) {\n              datalabels[HCC.DISTANCE] = \"-80%\";\n            } else if (isDoughnutChart) {\n              datalabels[HCC.DISTANCE] = \"-15%\";\n            } else {\n              datalabels[HCC.INSIDE] = true;\n              datalabels[HCC.VERTICAL_ALIGN] = HCC.V_ALIGN_BOTTOM;\n            }\n\n            break;\n\n          case C.OUTSIDE_END:\n          case C.OUTSIDE:\n            if (isPieChart || isDoughnutChart || isItemChart || isItemPieChart) {\n              datalabels[HCC.DISTANCE] = 10;\n            } else if (isBarChart || isWeightedFunnelChart) {\n              datalabels[HCC.INSIDE] = false;\n              datalabels[HCC.CROP] = false;\n              datalabels.overflow = HCC.ALLOW;\n              datalabels[HCC.VERTICAL_ALIGN] = HCC.V_ALIGN_MIDDLE;\n              datalabels[HCC.ALIGN] = HCC.ALIGN_LEFT;\n            } else if (isFunnelChart) {\n              datalabels[HCC.INSIDE] = false;\n              datalabels[HCC.CROP] = false;\n              datalabels.overflow = HCC.JUSTIFY;\n              datalabels[HCC.VERTICAL_ALIGN] = HCC.V_ALIGN_MIDDLE;\n            } else {\n              datalabels[HCC.INSIDE] = false;\n              datalabels[HCC.CROP] = false;\n              datalabels.overflow = HCC.ALLOW;\n              datalabels[HCC.VERTICAL_ALIGN] = HCC.V_ALIGN_BOTTOM;\n            }\n\n            break;\n        }\n      },\n      handleDatalabelFormat: function handleDatalabelFormat(format, type, seriesObject, seriesIndex, chartType) {\n        var datalabels = seriesObject[seriesIndex][HCC.DATALABELS];\n        var currency = seriesObject[seriesIndex][HCC.CURRENCY] || \"\";\n\n        switch (format) {\n          case \"N\":\n            datalabels[HCC.ENABLED] = false;\n            break;\n\n          case \"V\":\n            var formatterFunc = chartType.indexOf(C.WEIGHTED_FUNNEL) != -1 ? displayValue_WeightedFunnel(currency, chartType) : displayValue(currency, chartType); // datalabels[HCC.ENABLED] = true;\n\n            seriesObject[[seriesIndex]][HCC.CURRENCY_SYMBOL] = currency;\n            datalabels[HCC.FORMATTER] = formatterFunc;\n            break;\n\n          case \"L\":\n            var formatterFunc = chartType.indexOf(C.WEIGHTED_FUNNEL) != -1 ? displayLabel_WeightedFunnel : chartType.indexOf(C.FUNNEL) != -1 ? displayLabel_Funnel : displayLabel; // datalabels[HCC.ENABLED] = true;\n\n            datalabels[HCC.FORMATTER] = formatterFunc;\n            break;\n\n          case \"S\":\n            var formatterFunc = chartType.indexOf(C.WEIGHTED_FUNNEL) != -1 ? displaySeries_WeightedFunnel : chartType.indexOf(C.FUNNEL) != -1 ? displaySeries_Funnel : chartType.indexOf(C.LINE) != -1 || chartType.indexOf(C.AREA) != -1 || chartType.indexOf(C.STEP_LINE) != -1 ? displaySeriesNameAtEnd : displaySeries(type); // datalabels[HCC.ENABLED] = true;\n\n            datalabels[HCC.FORMATTER] = formatterFunc;\n            break;\n\n          case \"P\":\n            var formatterFunc = chartType.indexOf(C.WEIGHTED_FUNNEL) != -1 || chartType.indexOf(C.FUNNEL) != -1 ? displayPercent_WeightedFunnel : displayPercent;\n\n            if (chartType.indexOf(C.FUNNEL) !== -1 || chartType.indexOf(C.WEIGHTED_FUNNEL) !== -1 || chartType.indexOf(C.PIE) !== -1 || chartType.indexOf(C.ITEM) !== -1 || chartType.indexOf(C.STACKED_COL) !== -1 || chartType.indexOf(C.STACKED_BAR) !== -1 || chartType.indexOf(C.STACKED_PERCENT_COL) !== -1 || chartType.indexOf(C.STACKED_PERCENT_BAR) !== -1) {\n              // datalabels[HCC.ENABLED] = true;\n              datalabels[HCC.FORMATTER] = formatterFunc;\n            }\n\n            break;\n\n          case \"L_P\":\n            var formatterFunc = chartType.indexOf(C.WEIGHTED_FUNNEL) != -1 ? displayLabel_Percent_WeightedFunnel : chartType.indexOf(C.FUNNEL) != -1 ? displayLabel_Percent_Funnel : displayLabel_Percent; // datalabels[HCC.ENABLED] = true;\n\n            datalabels[HCC.FORMATTER] = formatterFunc;\n            break;\n\n          case \"S_V\":\n            var formatterFunc = chartType.indexOf(C.WEIGHTED_FUNNEL) != -1 ? displaySeries_Value_WeightedFunnel(currency, chartType) : chartType.indexOf(C.FUNNEL) != -1 ? displaySeries_Value_Funnel(currency, chartType) : displaySeries_Value(currency, chartType); // datalabels[HCC.ENABLED] = true;\n\n            seriesObject[[seriesIndex]][HCC.CURRENCY_SYMBOL] = currency;\n            datalabels[HCC.FORMATTER] = formatterFunc;\n            break;\n\n          case \"L_V\":\n            var formatterFunc = chartType.indexOf(C.WEIGHTED_FUNNEL) != -1 ? displayLabel_Value_WeightedFunnel(currency, chartType) : chartType.indexOf(C.FUNNEL) != -1 ? displayLabel_Value_Funnel(currency, chartType) : displayLabel_Value(currency, chartType); // datalabels[HCC.ENABLED] = true;\n\n            seriesObject[[seriesIndex]][HCC.CURRENCY_SYMBOL] = currency;\n            datalabels[HCC.FORMATTER] = formatterFunc;\n            break;\n\n          case \"S_P\":\n            var formatterFunc = chartType.indexOf(C.WEIGHTED_FUNNEL) != -1 ? displaySeries_Percent_WeightedFunnel : chartType.indexOf(C.FUNNEL) != -1 ? displaySeries_Percent_Funnel : displaySeries_Percent; // datalabels[HCC.ENABLED] = true;\n\n            datalabels[HCC.FORMATTER] = formatterFunc;\n            break;\n\n          case \"V_P\":\n            var formatterFunc = chartType.indexOf(C.WEIGHTED_FUNNEL) != -1 || chartType.indexOf(C.FUNNEL) != -1 ? displayValue_Percent_WeightedFunnel : displayValue_Percent; // datalabels[HCC.ENABLED] = true;\n\n            datalabels[HCC.FORMATTER] = formatterFunc;\n            break;\n\n          case \"B\":\n            // datalabels[HCC.ENABLED] = true;\n            datalabels[HCC.FORMATTER] = function () {\n              return this.point.z;\n            };\n\n            break;\n\n          default:\n            datalabels[HCC.ENABLED] = false;\n        }\n      }\n    };\n  }();\n\n  ctx.HCDatalabelHandler = HCDatalabelHandler;\n})(window || this);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/Utils/HCDatalabelHandler.js\n");

/***/ }),

/***/ "./js/Utils/HCDefaults.js":
/*!********************************!*\
  !*** ./js/Utils/HCDefaults.js ***!
  \********************************/
/***/ (function() {

"use strict";
eval("/*$Id$*/\n //No I18N\n\n(function (ctx) {\n  var HCDefaults = ctx.HCDefaults = {};\n  var HCConstants = ctx.HCConstants;\n  HCDefaults.BORDER_WIDTH = 1;\n  HCDefaults.BORDER_NONE_WIDTH = 0; // HCDefaults.BORDER_BRIGHTNESS       =    -0.2;\n  // HCDefaults.MARKER_STATUS           =    false;\n  // HCDefaults.MARKER_SHAPE            =    \"circle\";\n  // HCDefaults.MARKER_SIZE             =    5;\n  // HCDefaults.LINE_TYPE               =    \"Solid\";\n  //Gridlines\n\n  HCDefaults.GRIDLINE_WIDTH = 1;\n  HCDefaults.GRIDLINE_NONE_WIDTH = 0;\n  HCDefaults.MINOR_GL_ENABLED = HCConstants.GRIDLINE_COUNT_AUTO;\n  HCDefaults.MINOR_GL_DISABLED = undefined; //Datalabels\n\n  HCDefaults.DATALABEL_ENABLED = true;\n})(window || this);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9qcy9VdGlscy9IQ0RlZmF1bHRzLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0NBQ2E7O0FBQ2IsQ0FBQyxVQUFTQSxHQUFULEVBQWE7QUFDVixNQUFJQyxVQUFVLEdBQUdELEdBQUcsQ0FBQ0MsVUFBSixHQUFpQixFQUFsQztBQUNBLE1BQU1DLFdBQVcsR0FBR0YsR0FBRyxDQUFDRSxXQUF4QjtBQUNBRCxFQUFBQSxVQUFVLENBQUNFLFlBQVgsR0FBd0MsQ0FBeEM7QUFDQUYsRUFBQUEsVUFBVSxDQUFDRyxpQkFBWCxHQUF3QyxDQUF4QyxDQUpVLENBS1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBOztBQUNBSCxFQUFBQSxVQUFVLENBQUNJLGNBQVgsR0FBd0MsQ0FBeEM7QUFDQUosRUFBQUEsVUFBVSxDQUFDSyxtQkFBWCxHQUF3QyxDQUF4QztBQUNBTCxFQUFBQSxVQUFVLENBQUNNLGdCQUFYLEdBQXdDTCxXQUFXLENBQUNNLG1CQUFwRDtBQUNBUCxFQUFBQSxVQUFVLENBQUNRLGlCQUFYLEdBQXdDQyxTQUF4QyxDQWZVLENBZ0JWOztBQUNBVCxFQUFBQSxVQUFVLENBQUNVLGlCQUFYLEdBQXdDLElBQXhDO0FBQ0gsQ0FsQkQsRUFrQkdDLE1BQU0sSUFBSSxJQWxCYiIsInNvdXJjZXMiOlsid2VicGFjazovL211bHRpLWNoYXJ0LWZyYW1ld29yay8uL2pzL1V0aWxzL0hDRGVmYXVsdHMuanM/ODRiNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiRJZCQqL1xuXCJ1c2Ugc3RyaWN0XCI7Ly9ObyBJMThOXG4oZnVuY3Rpb24oY3R4KXtcbiAgICB2YXIgSENEZWZhdWx0cyA9IGN0eC5IQ0RlZmF1bHRzID0ge307XG4gICAgY29uc3QgSENDb25zdGFudHMgPSBjdHguSENDb25zdGFudHM7XG4gICAgSENEZWZhdWx0cy5CT1JERVJfV0lEVEggICAgICAgICAgICA9ICAgIDE7XG4gICAgSENEZWZhdWx0cy5CT1JERVJfTk9ORV9XSURUSCAgICAgICA9ICAgIDA7XG4gICAgLy8gSENEZWZhdWx0cy5CT1JERVJfQlJJR0hUTkVTUyAgICAgICA9ICAgIC0wLjI7XG4gICAgLy8gSENEZWZhdWx0cy5NQVJLRVJfU1RBVFVTICAgICAgICAgICA9ICAgIGZhbHNlO1xuICAgIC8vIEhDRGVmYXVsdHMuTUFSS0VSX1NIQVBFICAgICAgICAgICAgPSAgICBcImNpcmNsZVwiO1xuICAgIC8vIEhDRGVmYXVsdHMuTUFSS0VSX1NJWkUgICAgICAgICAgICAgPSAgICA1O1xuICAgIC8vIEhDRGVmYXVsdHMuTElORV9UWVBFICAgICAgICAgICAgICAgPSAgICBcIlNvbGlkXCI7XG5cbiAgICAvL0dyaWRsaW5lc1xuICAgIEhDRGVmYXVsdHMuR1JJRExJTkVfV0lEVEggICAgICAgICAgPSAgICAxO1xuICAgIEhDRGVmYXVsdHMuR1JJRExJTkVfTk9ORV9XSURUSCAgICAgPSAgICAwO1xuICAgIEhDRGVmYXVsdHMuTUlOT1JfR0xfRU5BQkxFRCAgICAgICAgPSAgICBIQ0NvbnN0YW50cy5HUklETElORV9DT1VOVF9BVVRPO1xuICAgIEhDRGVmYXVsdHMuTUlOT1JfR0xfRElTQUJMRUQgICAgICAgPSAgICB1bmRlZmluZWQ7XG4gICAgLy9EYXRhbGFiZWxzXG4gICAgSENEZWZhdWx0cy5EQVRBTEFCRUxfRU5BQkxFRCAgICAgICA9ICAgIHRydWU7XG59KSh3aW5kb3cgfHwgdGhpcykiXSwibmFtZXMiOlsiY3R4IiwiSENEZWZhdWx0cyIsIkhDQ29uc3RhbnRzIiwiQk9SREVSX1dJRFRIIiwiQk9SREVSX05PTkVfV0lEVEgiLCJHUklETElORV9XSURUSCIsIkdSSURMSU5FX05PTkVfV0lEVEgiLCJNSU5PUl9HTF9FTkFCTEVEIiwiR1JJRExJTkVfQ09VTlRfQVVUTyIsIk1JTk9SX0dMX0RJU0FCTEVEIiwidW5kZWZpbmVkIiwiREFUQUxBQkVMX0VOQUJMRUQiLCJ3aW5kb3ciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./js/Utils/HCDefaults.js\n");

/***/ }),

/***/ "./js/Utils/HCJSONConvertor.js":
/*!*************************************!*\
  !*** ./js/Utils/HCJSONConvertor.js ***!
  \*************************************/
/***/ (function() {

"use strict";
eval("/*$Id$*/\n //No I18N\n\n(function (ctx) {\n  var C = ctx.ChartConstants;\n  var KL = ctx.ChartKeyList;\n  var HCKeyList = ctx.HCKeyList;\n  var chartTypeToHCKeys = ctx.HCMaps.chartTypeToHCKeys;\n  var chartTypeToHCType = ctx.HCMaps.chartTypeToHCType;\n  var HCPropHandler = ctx.HCPropHandler;\n  var HCC = ctx.HCConstants;\n  var HCDefaults = ctx.HCDefaults;\n  var HCArraySkeletonConstructor = ctx.HCArraySkeletonConstructor;\n  var GeneralUtilities = ctx.GeneralUtilities;\n  var HCTooltipHandler = ctx.HCTooltipHandler;\n  var DEFAULTS = ctx.ChartDefaults.DEFAULTS;\n\n  var HCJSONConvertor = function () {\n    function setChartType(cJSON, hccJSON) {\n      cJSON[C.CHART][C.TYPE] && (hccJSON[HCC.CHART][HCC.TYPE] = chartTypeToHCType[cJSON[C.CHART][C.TYPE]]);\n    }\n\n    function setAnimationDuration(cJSON, hccJSON) {\n      cJSON[C.CHART][C.ANIMATION][C.DURATION] != undefined && (hccJSON[HCC.CHART][HCC.ANIMATION][C.DURATION] = cJSON[C.CHART][C.ANIMATION][C.DURATION]);\n    }\n\n    function setChartRenderTo(cJSON, hccJSON) {\n      cJSON[C.CHART][C.RENDER_ID] && (hccJSON[HCC.CHART][HCC.RENDER_TO] = cJSON[C.CHART][C.RENDER_ID]);\n    }\n\n    function setChartFontFamily(cJSON, hccJSON) {\n      cJSON[C.CHART][C.FONT_FAMILY] && (hccJSON[HCC.CHART][HCC.STYLE][HCC.FONT_FAMILY] = cJSON[C.CHART][C.FONT_FAMILY]);\n    }\n\n    function setChartWidth(cJSON, hccJSON) {\n      cJSON[C.CHART][C.WIDTH] && (hccJSON[HCC.CHART][HCC.STYLE][HCC.WIDTH] = cJSON[C.CHART][C.WIDTH]);\n    }\n\n    function setChartHeight(cJSON, hccJSON) {\n      cJSON[C.CHART][C.HEIGHT] && (hccJSON[HCC.CHART][HCC.STYLE][HCC.HEIGHT] = cJSON[C.CHART][C.HEIGHT]);\n    }\n\n    function setInverted(cJSON, hccJSON) {\n      cJSON[C.CHART][C.INVERTED] && (hccJSON[HCC.CHART][HCC.INVERTED] = cJSON[C.CHART][C.INVERTED]);\n    }\n\n    function setTooltip(cJSON, hccJSON) {\n      if (cJSON[C.TOOLTIP][C.ENABLED] != null) {\n        hccJSON[C.TOOLTIP][C.ENABLED] = cJSON[C.TOOLTIP][C.ENABLED];\n      } else {\n        hccJSON[C.TOOLTIP][C.ENABLED] = DEFAULTS.TOOLTIP_STATUS;\n      }\n\n      if (hccJSON[C.TOOLTIP][C.ENABLED]) {\n        HCTooltipHandler.handleTooltip(hccJSON, cJSON[C.CHART][C.TYPE]);\n      }\n    }\n\n    function setBorderColor(cJSON, hccJSON) {\n      if (cJSON[C.CHART][C.BORDER_COLOR]) {\n        hccJSON[HCC.CHART][HCC.BORDER_COLOR] = cJSON[C.CHART][C.BORDER_COLOR];\n        hccJSON[HCC.CHART][HCC.BORDER_WIDTH] = HCDefaults.BORDER_WIDTH; //Default\n      }\n    }\n\n    function setBackGroundColor(cJSON, hccJSON, type) {\n      cJSON[C.CHART][C.BACKGROUND_COLOR] && (hccJSON[HCC.CHART][HCC.BACKGROUND_COLOR] = cJSON[C.CHART][C.BACKGROUND_COLOR]);\n\n      if (cJSON[C.CHART][C.GRADIENT][C.ENABLED]) {\n        HCPropHandler.handleGradient(type, true, hccJSON);\n      }\n    }\n\n    function setColors(cJSON, hccJSON) {\n      cJSON[C.CHART][C.COLORS] && (hccJSON[HCC.COLORS] = cJSON[C.CHART][C.COLORS]);\n    }\n\n    function setCaptionStatus(cJSON, hccJSON) {\n      hccJSON[HCC.CAPTION][HCC.STYLE][HCC.DISPLAY] = cJSON[C.CAPTION][C.ENABLED] ? HCC.BLOCK : HCC.NONE;\n    }\n\n    function setCaptionText(cJSON, hccJSON) {\n      cJSON[C.CAPTION][C.TEXT] && (hccJSON[HCC.CAPTION][HCC.TEXT] = cJSON[C.CAPTION][C.TEXT]);\n    }\n\n    function setCaptionFontSize(cJSON, hccJSON) {\n      cJSON[C.CAPTION][C.FONT_SIZE] && (hccJSON[HCC.CAPTION][HCC.STYLE][HCC.FONT_SIZE] = cJSON[C.CAPTION][C.FONT_SIZE]);\n    }\n\n    function setCaptionFontColor(cJSON, hccJSON) {\n      if (cJSON[C.CAPTION][C.FONT_COLOR] != null) {\n        var bgColor = cJSON[C.CHART][C.BACKGROUND_COLOR];\n\n        if (cJSON[C.CAPTION][C.FONT_COLOR].indexOf(C.AUTO_COLOR) != -1) {\n          hccJSON[HCC.CAPTION][HCC.STYLE][HCC.FONT_COLOR] = GeneralUtilities.findAutoColor(HCUtils.getBGColor(bgColor), KL.CAPTION_FONT_COLOR);\n        } else {\n          hccJSON[HCC.CAPTION][HCC.STYLE][HCC.FONT_COLOR] = cJSON[C.CAPTION][C.FONT_COLOR];\n        }\n      }\n    }\n\n    function setCaptionFontWeight(cJSON, hccJSON) {\n      cJSON[C.CAPTION][C.FONT_WEIGHT] && (hccJSON[HCC.CAPTION][HCC.STYLE][HCC.FONT_WEIGHT] = cJSON[C.CAPTION][C.FONT_WEIGHT]);\n    }\n\n    function setCaptionFontStyle(cJSON, hccJSON) {\n      cJSON[C.CAPTION][C.FONT_STYLE] && (hccJSON[HCC.CAPTION][HCC.STYLE][HCC.FONT_STYLE] = cJSON[C.CAPTION][C.FONT_STYLE]);\n    }\n\n    function setTitleText(cJSON, hccJSON) {\n      cJSON[C.TITLE][C.TEXT] && (hccJSON[HCC.TITLE][HCC.TEXT] = cJSON[C.TITLE][C.TEXT]);\n    }\n\n    function setTitleFontSize(cJSON, hccJSON) {\n      cJSON[C.TITLE][C.FONT_SIZE] && (hccJSON[HCC.TITLE][HCC.STYLE][HCC.FONT_SIZE] = cJSON[C.TITLE][C.FONT_SIZE]);\n    }\n\n    function setTitleFontColor(cJSON, hccJSON) {\n      if (cJSON[C.TITLE][C.FONT_COLOR] != null) {\n        var bgColor = cJSON[C.CHART][C.BACKGROUND_COLOR];\n\n        if (cJSON[C.TITLE][C.FONT_COLOR].indexOf(C.AUTO_COLOR) != -1) {\n          hccJSON[HCC.TITLE][HCC.STYLE][HCC.FONT_COLOR] = GeneralUtilities.findAutoColor(HCUtils.getBGColor(bgColor), KL.TITLE_FONT_COLOR);\n        } else {\n          hccJSON[HCC.TITLE][HCC.STYLE][HCC.FONT_COLOR] = cJSON[C.TITLE][C.FONT_COLOR];\n        }\n      }\n    }\n\n    function setTitleFontWeight(cJSON, hccJSON) {\n      cJSON[C.TITLE][C.FONT_WEIGHT] && (hccJSON[HCC.TITLE][HCC.STYLE][HCC.FONT_WEIGHT] = cJSON[C.TITLE][C.FONT_WEIGHT]);\n    }\n\n    function setTitleFontStyle(cJSON, hccJSON) {\n      cJSON[C.TITLE][C.FONT_STYLE] && (hccJSON[HCC.TITLE][HCC.STYLE][HCC.FONT_STYLE] = cJSON[C.TITLE][C.FONT_STYLE]);\n    }\n\n    function setSubTitleText(cJSON, hccJSON) {\n      cJSON[C.SUBTITLE][C.TEXT] && (hccJSON[HCC.SUBTITLE][HCC.TEXT] = cJSON[C.SUBTITLE][C.TEXT]);\n    }\n\n    function setSubtitleFontSize(cJSON, hccJSON) {\n      cJSON[C.SUBTITLE][C.FONT_SIZE] && (hccJSON[HCC.SUBTITLE][HCC.STYLE][HCC.FONT_SIZE] = cJSON[C.SUBTITLE][C.FONT_SIZE]);\n    }\n\n    function setSubtitleFontColor(cJSON, hccJSON) {\n      var bgColor = cJSON[C.CHART][C.BACKGROUND_COLOR];\n\n      if (cJSON[C.SUBTITLE][C.FONT_COLOR].indexOf(C.AUTO_COLOR) != -1) {\n        hccJSON[HCC.SUBTITLE][HCC.STYLE][HCC.FONT_COLOR] = GeneralUtilities.findAutoColor(HCUtils.getBGColor(bgColor), KL.SUBTITLE_FONT_COLOR);\n      } else {\n        hccJSON[HCC.SUBTITLE][HCC.STYLE][HCC.FONT_COLOR] = cJSON[C.SUBTITLE][C.FONT_COLOR];\n      }\n    }\n\n    function setSubtitleFontWeight(cJSON, hccJSON) {\n      cJSON[C.SUBTITLE][C.FONT_WEIGHT] && (hccJSON[HCC.SUBTITLE][HCC.STYLE][HCC.FONT_WEIGHT] = cJSON[C.SUBTITLE][C.FONT_WEIGHT]);\n    }\n\n    function setSubtitleFontStyle(cJSON, hccJSON) {\n      cJSON[C.SUBTITLE][C.FONT_STYLE] && (hccJSON[HCC.SUBTITLE][HCC.STYLE][HCC.FONT_STYLE] = cJSON[C.SUBTITLE][C.FONT_STYLE]);\n    }\n\n    function setLegendHAlign(cJSON, hccJSON) {\n      cJSON[C.LEGEND][C.LEGEND_HALIGN] && (hccJSON[HCC.LEGEND][HCC.LEGEND_HALIGN] = cJSON[C.LEGEND][C.LEGEND_HALIGN]);\n    }\n\n    function setLegendVAlign(cJSON, hccJSON) {\n      cJSON[C.LEGEND][C.LEGEND_VALIGN] && (hccJSON[HCC.LEGEND][HCC.LEGEND_VALIGN] = cJSON[C.LEGEND][C.LEGEND_VALIGN]);\n    }\n\n    function setLegendStatus(cJSON, hccJSON) {\n      cJSON[C.LEGEND][C.ENABLED] != null && (hccJSON[HCC.LEGEND][HCC.ENABLED] = cJSON[C.LEGEND][C.ENABLED]);\n    }\n\n    function setLegendFontSize(cJSON, hccJSON) {\n      cJSON[C.LEGEND][C.FONT_SIZE] != null && (hccJSON[HCC.LEGEND][HCC.LEGEND_STYLE][HCC.FONT_SIZE] = cJSON[C.LEGEND][C.FONT_SIZE]);\n    }\n\n    function setLegendFontColor(cJSON, hccJSON) {\n      var bgColor = cJSON[C.CHART][C.BACKGROUND_COLOR];\n\n      if (cJSON[C.LEGEND][C.FONT_COLOR].indexOf(C.AUTO_COLOR) != -1) {\n        hccJSON[HCC.LEGEND][HCC.LEGEND_STYLE][HCC.FONT_COLOR] = GeneralUtilities.findAutoColor(HCUtils.getBGColor(bgColor), KL.LEGEND_FONT_COLOR);\n      } else {\n        hccJSON[HCC.LEGEND][HCC.LEGEND_STYLE][HCC.FONT_COLOR] = cJSON[C.LEGEND][C.FONT_COLOR];\n      }\n    }\n\n    function setLegendFontWeight(cJSON, hccJSON) {\n      cJSON[C.LEGEND][C.FONT_WEIGHT] != null && (hccJSON[HCC.LEGEND][HCC.LEGEND_STYLE][HCC.FONT_WEIGHT] = cJSON[C.LEGEND][C.FONT_WEIGHT]);\n    }\n\n    function setLegendFontStyle(cJSON, hccJSON) {\n      cJSON[C.LEGEND][C.FONT_STYLE] != null && (hccJSON[HCC.LEGEND][HCC.LEGEND_STYLE][HCC.FONT_STYLE] = cJSON[C.LEGEND][C.FONT_STYLE]);\n    }\n\n    function setHGridlines(index, cJSON, hccJSON) {\n      var bgColor = cJSON[C.CHART][C.BACKGROUND_COLOR];\n\n      if (cJSON[C.HAXIS][index][C.GRIDLINES][C.MAJOR_GRIDLINE_ENABLED] != null) {\n        hccJSON[HCC.HAXIS][index][HCC.GRIDLINE_WIDTH] = cJSON[C.HAXIS][index][C.GRIDLINES][C.MAJOR_GRIDLINE_ENABLED] ? HCDefaults.GRIDLINE_WIDTH : HCDefaults.GRIDLINE_NONE_WIDTH;\n      }\n\n      var count = cJSON[C.HAXIS][index][C.GRIDLINES][C.MAJOR_GRIDLINE_COUNT];\n\n      if (count != null) {\n        if (GeneralUtilities.isString(count) && count.indexOf(HCC.GRIDLINE_COUNT_AUTO) != -1) {\n          hccJSON[HCC.HAXIS][index][HCC.TICK_AMOUNT] = undefined;\n        } else {\n          hccJSON[HCC.HAXIS][index][HCC.TICK_AMOUNT] = count;\n        }\n      }\n\n      if (cJSON[C.HAXIS][index][C.GRIDLINES][C.MAJOR_GRIDLINE_LINE_TYPE] != null) {\n        hccJSON[HCC.HAXIS][index][HCC.MAJOR_GRIDLINE_LINE_TYPE] = cJSON[C.HAXIS][index][C.GRIDLINES][C.MAJOR_GRIDLINE_LINE_TYPE];\n      }\n\n      if (cJSON[C.HAXIS][index][C.GRIDLINES][C.MAJOR_GRIDLINE_LINE_COLOR] != null) {\n        if (cJSON[C.HAXIS][index][C.GRIDLINES][C.MAJOR_GRIDLINE_LINE_COLOR].indexOf(C.AUTO_COLOR) != -1) {\n          hccJSON[HCC.HAXIS][index][HCC.MAJOR_GRIDLINE_LINE_COLOR] = GeneralUtilities.findAutoColor(HCUtils.getBGColor(bgColor), KL.H_MAJOR_GRIDLINE_LINE_COLOR);\n        } else {\n          hccJSON[HCC.HAXIS][index][HCC.MAJOR_GRIDLINE_LINE_COLOR] = cJSON[C.HAXIS][index][C.GRIDLINES][C.MAJOR_GRIDLINE_LINE_COLOR];\n        }\n      }\n\n      if (cJSON[C.HAXIS][index][C.GRIDLINES][C.MINOR_GRIDLINE_ENABLED] != null) {\n        hccJSON[HCC.HAXIS][index][HCC.MINOR_GRIDLINE_WIDTH] = cJSON[C.HAXIS][index][C.GRIDLINES][C.MINOR_GRIDLINE_ENABLED] ? HCDefaults.GRIDLINE_WIDTH : HCDefaults.GRIDLINE_NONE_WIDTH;\n        hccJSON[HCC.HAXIS][index][HCC.MINOR_TICK_INTERVAL] = cJSON[C.HAXIS][index][C.GRIDLINES][C.MINOR_GRIDLINE_ENABLED] ? HCDefaults.MINOR_GL_ENABLED : HCDefaults.MINOR_GL_DISABLED;\n      }\n\n      if (cJSON[C.HAXIS][index][C.GRIDLINES][C.MINOR_GRIDLINE_LINE_TYPE] != null) {\n        hccJSON[HCC.HAXIS][index][HCC.MINOR_GRIDLINE_LINE_TYPE] = cJSON[C.HAXIS][index][C.GRIDLINES][C.MINOR_GRIDLINE_LINE_TYPE];\n      }\n\n      if (cJSON[C.HAXIS][index][C.GRIDLINES][C.MINOR_GRIDLINE_LINE_COLOR] != null) {\n        if (cJSON[C.HAXIS][index][C.GRIDLINES][C.MINOR_GRIDLINE_LINE_COLOR].indexOf(C.AUTO_COLOR) != -1) {\n          hccJSON[HCC.HAXIS][index][HCC.MINOR_GRIDLINE_LINE_COLOR] = GeneralUtilities.findAutoColor(HCUtils.getBGColor(bgColor), KL.H_MINOR_GRIDLINE_LINE_COLOR);\n        } else {\n          hccJSON[HCC.HAXIS][index][HCC.MINOR_GRIDLINE_LINE_COLOR] = cJSON[C.HAXIS][index][C.GRIDLINES][C.MINOR_GRIDLINE_LINE_COLOR];\n        }\n      }\n    }\n\n    function setHAxis(cJSON, hccJSON, type, chartType) {\n      var bgColor = cJSON[C.CHART][C.BACKGROUND_COLOR];\n      var h_axis_length = cJSON[C.HAXIS] ? cJSON[C.HAXIS].length : 0;\n\n      for (var i = 0; i < h_axis_length; i++) {\n        hccJSON[HCC.HAXIS][i] = HCArraySkeletonConstructor.get(HCKeyList.HAXIS, chartType);\n        cJSON[C.HAXIS][i][C.MIN] && (hccJSON[HCC.HAXIS][i][HCC.MIN] = cJSON[C.HAXIS][i][C.MIN]);\n        cJSON[C.HAXIS][i][C.MAX] && (hccJSON[HCC.HAXIS][i][HCC.MAX] = cJSON[C.HAXIS][i][C.MAX]);\n        cJSON[C.HAXIS][i][C.BINNING_INTERVAL] && (hccJSON[HCC.HAXIS][i][HCC.BINNING_INTERVAL] = cJSON[C.HAXIS][i][C.BINNING_INTERVAL]);\n        cJSON[C.HAXIS][i][C.REVERSED] && (hccJSON[HCC.HAXIS][i][HCC.REVERSED] = cJSON[C.HAXIS][i][C.REVERSED]);\n        cJSON[C.HAXIS][i][C.LABELS][C.ENABLED] != null && (hccJSON[HCC.HAXIS][i][HCC.LABELS][HCC.ENABLED] = cJSON[C.HAXIS][i][C.LABELS][C.ENABLED]);\n        cJSON[C.HAXIS][i][C.LABELS][C.FONT_SIZE] && (hccJSON[HCC.HAXIS][i][HCC.LABELS][HCC.STYLE][HCC.FONT_SIZE] = cJSON[C.HAXIS][i][C.LABELS][C.FONT_SIZE]);\n\n        if (cJSON[C.HAXIS][i][C.LABELS][C.FONT_COLOR].indexOf(C.AUTO_COLOR) != -1) {\n          hccJSON[HCC.HAXIS][i][HCC.LABELS][HCC.STYLE][HCC.FONT_COLOR] = GeneralUtilities.findAutoColor(HCUtils.getBGColor(bgColor), KL.H_LABELS_FONT_COLOR);\n        } else {\n          hccJSON[HCC.HAXIS][i][HCC.LABELS][HCC.STYLE][HCC.FONT_COLOR] = cJSON[C.HAXIS][i][C.LABELS][C.FONT_COLOR];\n        }\n\n        cJSON[C.HAXIS][i][C.LABELS][C.FONT_WEIGHT] && (hccJSON[HCC.HAXIS][i][HCC.LABELS][HCC.STYLE][HCC.FONT_WEIGHT] = cJSON[C.HAXIS][i][C.LABELS][C.FONT_WEIGHT]);\n        cJSON[C.HAXIS][i][C.LABELS][C.FONT_STYLE] && (hccJSON[HCC.HAXIS][i][HCC.LABELS][HCC.STYLE][HCC.FONT_STYLE] = cJSON[C.HAXIS][i][C.LABELS][C.FONT_STYLE]);\n\n        if (cJSON[C.HAXIS][i][C.LABELS][C.STAGGER_LINES] != null) {\n          var staggerLinesCount = cJSON[C.HAXIS][i][C.LABELS][C.STAGGER_LINES];\n\n          if (GeneralUtilities.isNumber(staggerLinesCount)) {\n            hccJSON[HCC.HAXIS][i][HCC.LABELS][HCC.STAGGER_LINES] = Number(staggerLinesCount);\n          } else if (GeneralUtilities.isString(staggerLinesCount) && staggerLinesCount.indexOf(C.AUTO) != -1) {\n            hccJSON[HCC.HAXIS][i][HCC.LABELS][HCC.STAGGER_LINES] = undefined;\n          } else {\n            hccJSON[HCC.HAXIS][i][HCC.LABELS][HCC.STAGGER_LINES] = undefined;\n          }\n        }\n\n        if (cJSON[C.HAXIS][i][C.LABELS][C.ROTATION] != null) {\n          var rotationValue = cJSON[C.HAXIS][i][C.LABELS][C.ROTATION];\n\n          if (GeneralUtilities.isNumber(rotationValue)) {\n            hccJSON[HCC.HAXIS][i][HCC.LABELS][HCC.ROTATION] = Number(rotationValue);\n          } else if (GeneralUtilities.isString(rotationValue) && rotationValue.indexOf(C.AUTO) != -1) {\n            hccJSON[HCC.HAXIS][i][HCC.LABELS][HCC.ROTATION] = undefined;\n          } else {\n            hccJSON[HCC.HAXIS][i][HCC.LABELS][HCC.ROTATION] = undefined;\n          }\n        }\n\n        cJSON[C.HAXIS][i][C.TITLE][C.TEXT] != null && (hccJSON[HCC.HAXIS][i][HCC.TITLE][HCC.TEXT] = cJSON[C.HAXIS][i][C.TITLE][C.TEXT]);\n        cJSON[C.HAXIS][i][C.TITLE][C.FONT_SIZE] && (hccJSON[HCC.HAXIS][i][HCC.TITLE][HCC.STYLE][HCC.FONT_SIZE] = cJSON[C.HAXIS][i][C.TITLE][C.FONT_SIZE]);\n\n        if (cJSON[C.HAXIS][i][C.TITLE][C.FONT_COLOR].indexOf(C.AUTO_COLOR) != -1) {\n          hccJSON[HCC.HAXIS][i][HCC.TITLE][HCC.STYLE][HCC.FONT_COLOR] = GeneralUtilities.findAutoColor(HCUtils.getBGColor(bgColor), KL.HTITLE_FONT_COLOR);\n        } else {\n          hccJSON[HCC.HAXIS][i][HCC.TITLE][HCC.STYLE][HCC.FONT_COLOR] = cJSON[C.HAXIS][i][C.TITLE][C.FONT_COLOR];\n        }\n\n        cJSON[C.HAXIS][i][C.TITLE][C.FONT_WEIGHT] && (hccJSON[HCC.HAXIS][i][HCC.TITLE][HCC.STYLE][HCC.FONT_WEIGHT] = cJSON[C.HAXIS][i][C.TITLE][C.FONT_WEIGHT]);\n        cJSON[C.HAXIS][i][C.TITLE][C.FONT_STYLE] && (hccJSON[HCC.HAXIS][i][HCC.TITLE][HCC.STYLE][HCC.FONT_STYLE] = cJSON[C.HAXIS][i][C.TITLE][C.FONT_STYLE]);\n        keyToFunction[HCKeyList.H_GRIDLINES](i, cJSON, hccJSON);\n      }\n    }\n\n    function setYAxisLabels(index, cJSON, hccJSON, type, chartType) {\n      var bgColor = cJSON[C.CHART][C.BACKGROUND_COLOR];\n      cJSON[C.VAXIS][index][C.LABELS][C.ENABLED] != null && (hccJSON[HCC.VAXIS][index][HCC.LABELS][HCC.ENABLED] = cJSON[C.VAXIS][index][C.LABELS][C.ENABLED]);\n      var suffix = cJSON[C.VAXIS][index][C.SUFFIX];\n      var prefix = cJSON[C.VAXIS][index][C.PREFIX];\n\n      hccJSON[HCC.VAXIS][index][HCC.LABELS].formatter = function () {\n        return GeneralUtilities.concatString([prefix, Highcharts.numberFormat(Math.abs(this.value), -1), suffix]);\n      };\n\n      cJSON[C.VAXIS][index][C.PREFIX] && (hccJSON[HCC.VAXIS][index][HCC.PREFIX] = cJSON[C.VAXIS][index][C.PREFIX]);\n      cJSON[C.VAXIS][index][C.SUFFIX] && (hccJSON[HCC.VAXIS][index][HCC.SUFFIX] = cJSON[C.VAXIS][index][C.SUFFIX]);\n      cJSON[C.VAXIS][index][C.LABELS][C.FONT_SIZE] && (hccJSON[HCC.VAXIS][index][HCC.LABELS][HCC.STYLE][HCC.FONT_SIZE] = cJSON[C.VAXIS][index][C.LABELS][C.FONT_SIZE]);\n\n      if (cJSON[C.VAXIS][index][C.LABELS][C.FONT_COLOR].indexOf(C.AUTO_COLOR) != -1) {\n        hccJSON[HCC.VAXIS][index][HCC.LABELS][HCC.STYLE][HCC.FONT_COLOR] = GeneralUtilities.findAutoColor(HCUtils.getBGColor(bgColor), KL.V_LABELS_FONT_COLOR);\n      } else {\n        hccJSON[HCC.VAXIS][index][HCC.LABELS][HCC.STYLE][HCC.FONT_COLOR] = cJSON[C.VAXIS][index][C.LABELS][C.FONT_COLOR];\n      }\n\n      cJSON[C.VAXIS][index][C.LABELS][C.FONT_WEIGHT] && (hccJSON[HCC.VAXIS][index][HCC.LABELS][HCC.STYLE][HCC.FONT_WEIGHT] = cJSON[C.VAXIS][index][C.LABELS][C.FONT_WEIGHT]);\n      cJSON[C.VAXIS][index][C.LABELS][C.FONT_STYLE] && (hccJSON[HCC.VAXIS][index][HCC.LABELS][HCC.STYLE][HCC.FONT_STYLE] = cJSON[C.VAXIS][index][C.LABELS][C.FONT_STYLE]);\n\n      if (chartType.indexOf(C.STACKED_COL) != -1 || chartType.indexOf(C.STACKED_BAR) != -1) {\n        cJSON[C.VAXIS][index][C.STACK_LABELS][C.ENABLED] != null && (hccJSON[HCC.VAXIS][index][HCC.STACK_LABELS][HCC.ENABLED] = cJSON[C.VAXIS][index][C.STACK_LABELS][C.ENABLED]);\n        cJSON[C.VAXIS][index][C.STACK_LABELS][C.FONT_SIZE] && (hccJSON[HCC.VAXIS][index][HCC.STACK_LABELS][HCC.STYLE][HCC.FONT_SIZE] = cJSON[C.VAXIS][index][C.STACK_LABELS][C.FONT_SIZE]);\n\n        if (cJSON[C.VAXIS][index][C.STACK_LABELS][C.FONT_COLOR].indexOf(C.AUTO_COLOR) != -1) {\n          hccJSON[HCC.VAXIS][index][HCC.STACK_LABELS][HCC.STYLE][HCC.FONT_COLOR] = GeneralUtilities.findAutoColor(HCUtils.getBGColor(bgColor), KL.V_STACK_LABELS_FONT_COLOR);\n        } else {\n          hccJSON[HCC.VAXIS][index][HCC.STACK_LABELS][HCC.STYLE][HCC.FONT_COLOR] = cJSON[C.VAXIS][index][C.STACK_LABELS][C.FONT_COLOR];\n        }\n\n        cJSON[C.VAXIS][index][C.STACK_LABELS][C.FONT_WEIGHT] && (hccJSON[HCC.VAXIS][index][HCC.STACK_LABELS][HCC.STYLE][HCC.FONT_WEIGHT] = cJSON[C.VAXIS][index][C.STACK_LABELS][C.FONT_WEIGHT]);\n        cJSON[C.VAXIS][index][C.STACK_LABELS][C.FONT_STYLE] && (hccJSON[HCC.VAXIS][index][HCC.STACK_LABELS][HCC.STYLE][HCC.FONT_STYLE] = cJSON[C.VAXIS][index][C.STACK_LABELS][C.FONT_STYLE]);\n      }\n    }\n\n    function setYPlotLines(index, cJSON, hccJSON, chartType) {\n      var bgColor = cJSON[C.CHART][C.BACKGROUND_COLOR];\n      var plotLinesLength = cJSON[C.VAXIS][index][C.PLOT_LINES] ? cJSON[C.VAXIS][index][C.PLOT_LINES].length : 0;\n\n      for (var i = 0; i < plotLinesLength; i++) {\n        hccJSON[HCC.VAXIS][index][HCC.PLOT_LINES][i] = HCArraySkeletonConstructor.get(HCKeyList.PLOT_LINES, chartType);\n        cJSON[C.VAXIS][index][C.PLOT_LINES][i][C.VALUE] && (hccJSON[HCC.VAXIS][index][HCC.PLOT_LINES][i][HCC.VALUE] = cJSON[C.VAXIS][index][C.PLOT_LINES][i][C.VALUE]);\n        cJSON[C.VAXIS][index][C.PLOT_LINES][i][C.LINE_TYPE] && (hccJSON[HCC.VAXIS][index][HCC.PLOT_LINES][i][HCC.DASH_STYLE] = cJSON[C.VAXIS][index][C.PLOT_LINES][i][C.LINE_TYPE]);\n        cJSON[C.VAXIS][index][C.PLOT_LINES][i][C.LINE_COLOR] && (hccJSON[HCC.VAXIS][index][HCC.PLOT_LINES][i][HCC.COLOR] = cJSON[C.VAXIS][index][C.PLOT_LINES][i][C.LINE_COLOR]);\n        cJSON[C.VAXIS][index][C.PLOT_LINES][i][C.LABEL][C.TEXT] && (hccJSON[HCC.VAXIS][index][HCC.PLOT_LINES][i][HCC.LABEL][HCC.TEXT] = cJSON[C.VAXIS][index][C.PLOT_LINES][i][C.LABEL][C.TEXT]);\n        cJSON[C.VAXIS][index][C.PLOT_LINES][i][C.LABEL][C.FONT_SIZE] && (hccJSON[HCC.VAXIS][index][HCC.PLOT_LINES][i][HCC.LABEL][HCC.STYLE][HCC.FONT_SIZE] = cJSON[C.VAXIS][index][C.PLOT_LINES][i][C.LABEL][C.FONT_SIZE]);\n\n        if (cJSON[C.VAXIS][index][C.PLOT_LINES][i][C.LABEL][C.FONT_COLOR].indexOf(C.AUTO_COLOR) != -1) {\n          hccJSON[HCC.VAXIS][index][HCC.PLOT_LINES][i][HCC.LABEL][HCC.STYLE][HCC.FONT_COLOR] = GeneralUtilities.findAutoColor(HCUtils.getBGColor(bgColor), KL.PLOTLINES_LABELS_FONT_COLOR);\n        } else {\n          hccJSON[HCC.VAXIS][index][HCC.PLOT_LINES][i][HCC.LABEL][HCC.STYLE][HCC.FONT_COLOR] = cJSON[C.VAXIS][index][C.PLOT_LINES][i][C.LABEL][C.FONT_COLOR];\n        }\n\n        cJSON[C.VAXIS][index][C.PLOT_LINES][i][C.LABEL][C.FONT_STYLE] && (hccJSON[HCC.VAXIS][index][HCC.PLOT_LINES][i][HCC.LABEL][HCC.STYLE][HCC.FONT_STYLE] = cJSON[C.VAXIS][index][C.PLOT_LINES][i][C.LABEL][C.FONT_STYLE]);\n        cJSON[C.VAXIS][index][C.PLOT_LINES][i][C.LABEL][C.FONT_WEIGHT] && (hccJSON[HCC.VAXIS][index][HCC.PLOT_LINES][i][HCC.LABEL][HCC.STYLE][HCC.FONT_WEIGHT] = cJSON[C.VAXIS][index][C.PLOT_LINES][i][C.LABEL][C.FONT_WEIGHT]);\n      }\n    }\n\n    function setVGridlines(index, cJSON, hccJSON) {\n      var bgColor = cJSON[C.CHART][C.BACKGROUND_COLOR];\n\n      if (cJSON[C.VAXIS][index][C.GRIDLINES][C.MAJOR_GRIDLINE_ENABLED] != null) {\n        hccJSON[HCC.VAXIS][index][HCC.GRIDLINE_WIDTH] = cJSON[C.VAXIS][index][C.GRIDLINES][C.MAJOR_GRIDLINE_ENABLED] ? HCDefaults.GRIDLINE_WIDTH : HCDefaults.GRIDLINE_NONE_WIDTH;\n      }\n\n      var count = cJSON[C.VAXIS][index][C.GRIDLINES][C.MAJOR_GRIDLINE_COUNT];\n\n      if (count != null) {\n        if (GeneralUtilities.isString(count) && count.indexOf(HCC.GRIDLINE_COUNT_AUTO) != -1) {\n          hccJSON[HCC.VAXIS][index][HCC.TICK_AMOUNT] = undefined;\n        } else {\n          hccJSON[HCC.VAXIS][index][HCC.TICK_AMOUNT] = count;\n        }\n      }\n\n      if (cJSON[C.VAXIS][index][C.GRIDLINES][C.MAJOR_GRIDLINE_LINE_TYPE] != null) {\n        hccJSON[HCC.VAXIS][index][HCC.MAJOR_GRIDLINE_LINE_TYPE] = cJSON[C.VAXIS][index][C.GRIDLINES][C.MAJOR_GRIDLINE_LINE_TYPE];\n      }\n\n      if (cJSON[C.VAXIS][index][C.GRIDLINES][C.MAJOR_GRIDLINE_LINE_COLOR] != null) {\n        if (cJSON[C.VAXIS][index][C.GRIDLINES][C.MAJOR_GRIDLINE_LINE_COLOR].indexOf(C.AUTO_COLOR) != -1) {\n          hccJSON[HCC.VAXIS][index][HCC.MAJOR_GRIDLINE_LINE_COLOR] = GeneralUtilities.findAutoColor(HCUtils.getBGColor(bgColor), KL.V_MAJOR_GRIDLINE_LINE_COLOR);\n        } else {\n          hccJSON[HCC.VAXIS][index][HCC.MAJOR_GRIDLINE_LINE_COLOR] = cJSON[C.VAXIS][index][C.GRIDLINES][C.MAJOR_GRIDLINE_LINE_COLOR];\n        }\n      }\n\n      if (cJSON[C.VAXIS][index][C.GRIDLINES][C.MINOR_GRIDLINE_ENABLED] != null) {\n        hccJSON[HCC.VAXIS][index][HCC.MINOR_GRIDLINE_WIDTH] = cJSON[C.VAXIS][index][C.GRIDLINES][C.MINOR_GRIDLINE_ENABLED] ? HCDefaults.GRIDLINE_WIDTH : HCDefaults.GRIDLINE_NONE_WIDTH;\n        hccJSON[HCC.VAXIS][index][HCC.MINOR_TICK_INTERVAL] = cJSON[C.VAXIS][index][C.GRIDLINES][C.MINOR_GRIDLINE_ENABLED] ? HCDefaults.MINOR_GL_ENABLED : HCDefaults.MINOR_GL_DISABLED;\n      }\n\n      if (cJSON[C.VAXIS][index][C.GRIDLINES][C.MINOR_GRIDLINE_LINE_TYPE] != null) {\n        hccJSON[HCC.VAXIS][index][HCC.MINOR_GRIDLINE_LINE_TYPE] = cJSON[C.VAXIS][index][C.GRIDLINES][C.MINOR_GRIDLINE_LINE_TYPE];\n      }\n\n      if (cJSON[C.VAXIS][index][C.GRIDLINES][C.MINOR_GRIDLINE_LINE_COLOR] != null) {\n        if (cJSON[C.VAXIS][index][C.GRIDLINES][C.MINOR_GRIDLINE_LINE_COLOR].indexOf(C.AUTO_COLOR) != -1) {\n          hccJSON[HCC.VAXIS][index][HCC.MINOR_GRIDLINE_LINE_COLOR] = GeneralUtilities.findAutoColor(HCUtils.getBGColor(bgColor), KL.V_MINOR_GRIDLINE_LINE_COLOR);\n        } else {\n          hccJSON[HCC.VAXIS][index][HCC.MINOR_GRIDLINE_LINE_COLOR] = cJSON[C.VAXIS][index][C.GRIDLINES][C.MINOR_GRIDLINE_LINE_COLOR];\n        }\n      }\n    }\n\n    function setVAxis(cJSON, hccJSON, type, chartType) {\n      var bgColor = cJSON[C.CHART][C.BACKGROUND_COLOR];\n      var vaxis_length = cJSON[C.VAXIS] ? cJSON[C.VAXIS].length : 0;\n\n      for (var i = 0; i < vaxis_length; i++) {\n        hccJSON[HCC.VAXIS][i] = HCArraySkeletonConstructor.get(HCKeyList.VAXIS, chartType);\n        keyToFunction[HCKeyList.V_LABELS](i, cJSON, hccJSON, type, chartType);\n        cJSON[C.VAXIS][i][C.TITLE][C.TEXT] != null && (hccJSON[HCC.VAXIS][i][HCC.TITLE][HCC.TEXT] = cJSON[C.VAXIS][i][C.TITLE][C.TEXT]);\n        cJSON[C.VAXIS][i][C.TITLE][C.FONT_SIZE] && (hccJSON[HCC.VAXIS][i][HCC.TITLE][HCC.STYLE][HCC.FONT_SIZE] = cJSON[C.VAXIS][i][C.TITLE][C.FONT_SIZE]);\n\n        if (cJSON[C.VAXIS][i][C.TITLE][C.FONT_COLOR].indexOf(C.AUTO_COLOR) != -1) {\n          hccJSON[HCC.VAXIS][i][HCC.TITLE][HCC.STYLE][HCC.FONT_COLOR] = GeneralUtilities.findAutoColor(HCUtils.getBGColor(bgColor), KL.VTITLE_FONT_COLOR);\n        } else {\n          hccJSON[HCC.VAXIS][i][HCC.TITLE][HCC.STYLE][HCC.FONT_COLOR] = cJSON[C.VAXIS][i][C.TITLE][C.FONT_COLOR];\n        }\n\n        cJSON[C.VAXIS][i][C.TITLE][C.FONT_WEIGHT] && (hccJSON[HCC.VAXIS][i][HCC.TITLE][HCC.STYLE][HCC.FONT_WEIGHT] = cJSON[C.VAXIS][i][C.TITLE][C.FONT_WEIGHT]);\n        cJSON[C.VAXIS][i][C.TITLE][C.FONT_STYLE] && (hccJSON[HCC.VAXIS][i][HCC.TITLE][HCC.STYLE][HCC.FONT_STYLE] = cJSON[C.VAXIS][i][C.TITLE][C.FONT_STYLE]);\n        cJSON[C.VAXIS][i][C.SCALE_TYPE] && (hccJSON[HCC.VAXIS][i][HCC.SCALE_TYPE] = cJSON[C.VAXIS][i][C.SCALE_TYPE]);\n        cJSON[C.VAXIS][i][C.MIN] != null && (hccJSON[HCC.VAXIS][i][HCC.MIN] = cJSON[C.VAXIS][i][C.MIN]);\n        cJSON[C.VAXIS][i][C.MAX] != null && (hccJSON[HCC.VAXIS][i][HCC.MAX] = cJSON[C.VAXIS][i][C.MAX]);\n        cJSON[C.VAXIS][i][C.VISIBLE] != null && (hccJSON[HCC.VAXIS][i][HCC.VISIBLE] = cJSON[C.VAXIS][i][C.VISIBLE]);\n        cJSON[C.VAXIS][i][C.OPPOSITE] != null && (hccJSON[HCC.VAXIS][i][HCC.OPPOSITE] = cJSON[C.VAXIS][i][C.OPPOSITE]);\n        cJSON[C.VAXIS][i][C.TICK_INTERVAL] != null && (hccJSON[HCC.VAXIS][i][HCC.TICK_INTERVAL] = cJSON[C.VAXIS][i][C.TICK_INTERVAL]);\n        cJSON[C.VAXIS][i][C.BASE_VALUE] != null && (hccJSON[HCC.VAXIS][i][HCC.BASE_VALUE] = cJSON[C.VAXIS][i][C.BASE_VALUE]);\n        keyToFunction[HCKeyList.PLOT_LINES](i, cJSON, hccJSON, chartType);\n        keyToFunction[HCKeyList.V_GRIDLINES](i, cJSON, hccJSON);\n      }\n    }\n\n    var keyToFunction = {};\n    keyToFunction[HCKeyList.RENDER_TO] = setChartRenderTo;\n    keyToFunction[HCKeyList.ANIMATION_DURATION] = setAnimationDuration;\n    keyToFunction[HCKeyList.CHART_FONT_FAMILY] = setChartFontFamily;\n    keyToFunction[HCKeyList.CHART_WIDTH] = setChartWidth;\n    keyToFunction[HCKeyList.CHART_HEIGHT] = setChartHeight;\n    keyToFunction[HCKeyList.INVERTED] = setInverted;\n    keyToFunction[HCKeyList.TYPE] = setChartType;\n    keyToFunction[HCKeyList.BORDER_COLOR] = setBorderColor;\n    keyToFunction[HCKeyList.BACKGROUND_COLOR] = setBackGroundColor;\n    keyToFunction[HCKeyList.GRADIENT_ENABLED] = setBackGroundColor;\n    keyToFunction[HCKeyList.COLORS] = setColors;\n    keyToFunction[HCKeyList.CAPTION_ENABLED] = setCaptionStatus;\n    keyToFunction[HCKeyList.CAPTION_TEXT] = setCaptionText;\n    keyToFunction[HCKeyList.CAPTION_FONT_SIZE] = setCaptionFontSize;\n    keyToFunction[HCKeyList.CAPTION_FONT_COLOR] = setCaptionFontColor;\n    keyToFunction[HCKeyList.CAPTION_FONT_STYLE] = setCaptionFontStyle;\n    keyToFunction[HCKeyList.CAPTION_FONT_WEIGHT] = setCaptionFontWeight;\n    keyToFunction[HCKeyList.TITLE_TEXT] = setTitleText;\n    keyToFunction[HCKeyList.TITLE_FONT_SIZE] = setTitleFontSize;\n    keyToFunction[HCKeyList.TITLE_FONT_COLOR] = setTitleFontColor;\n    keyToFunction[HCKeyList.TITLE_FONT_STYLE] = setTitleFontStyle;\n    keyToFunction[HCKeyList.TITLE_FONT_WEIGHT] = setTitleFontWeight;\n    keyToFunction[HCKeyList.SUBTITLE_TEXT] = setSubTitleText;\n    keyToFunction[HCKeyList.SUBTITLE_FONT_SIZE] = setSubtitleFontSize;\n    keyToFunction[HCKeyList.SUBTITLE_FONT_COLOR] = setSubtitleFontColor;\n    keyToFunction[HCKeyList.SUBTITLE_FONT_STYLE] = setSubtitleFontStyle;\n    keyToFunction[HCKeyList.SUBTITLE_FONT_WEIGHT] = setSubtitleFontWeight;\n    keyToFunction[HCKeyList.LEGEND_HALIGN] = setLegendHAlign;\n    keyToFunction[HCKeyList.LEGEND_VALIGN] = setLegendVAlign;\n    keyToFunction[HCKeyList.LEGEND_STATUS] = setLegendStatus;\n    keyToFunction[HCKeyList.LEGEND_FONT_SIZE] = setLegendFontSize;\n    keyToFunction[HCKeyList.LEGEND_FONT_COLOR] = setLegendFontColor;\n    keyToFunction[HCKeyList.LEGEND_FONT_STYLE] = setLegendFontStyle;\n    keyToFunction[HCKeyList.LEGEND_FONT_WEIGHT] = setLegendFontWeight;\n    keyToFunction[HCKeyList.HAXIS] = setHAxis;\n    keyToFunction[HCKeyList.H_GRIDLINES] = setHGridlines;\n    keyToFunction[HCKeyList.VAXIS] = setVAxis;\n    keyToFunction[HCKeyList.V_GRIDLINES] = setVGridlines;\n    keyToFunction[HCKeyList.V_LABELS] = setYAxisLabels;\n    keyToFunction[HCKeyList.PLOT_LINES] = setYPlotLines;\n    keyToFunction[HCKeyList.TOOLTIP_ENABLED] = setTooltip;\n\n    function getJSON(keyList, chartJSON, hcJSON, type, chartType) {\n      var keysLen = keyList ? keyList.length : 0;\n\n      for (var i = 0; i < keysLen; i++) {\n        if (keyToFunction[keyList[i]]) {\n          keyToFunction[keyList[i]](chartJSON, hcJSON, type, chartType);\n        }\n      }\n    }\n\n    return {\n      convert: function convert(type, chartType, chartJSON, hcJSON) {\n        var keyList = chartTypeToHCKeys[chartType];\n        return getJSON(keyList, chartJSON, hcJSON, type, chartType);\n      }\n    };\n  }();\n\n  ctx.HCJSONConvertor = HCJSONConvertor;\n})(window || this);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/Utils/HCJSONConvertor.js\n");

/***/ }),

/***/ "./js/Utils/HCKeyList.js":
/*!*******************************!*\
  !*** ./js/Utils/HCKeyList.js ***!
  \*******************************/
/***/ (function() {

"use strict";
eval("/*$Id$*/\n //No I18N\n\n(function (ctx) {\n  var HCKeyList = ctx.HCKeyList = {}; //Only for skeleton construction and json parsing\n\n  HCKeyList.CHART = \"chart\"; //No I18N\n\n  HCKeyList.CHART_WIDTH = \"chart_width\"; //No I18N\n\n  HCKeyList.CHART_HEIGHT = \"chart_height\"; //No I18N\n\n  HCKeyList.CHART_STYLE = \"chart_style\"; //No I18N\n\n  HCKeyList.CHART_FONT_FAMILY = \"chart_font_family\"; //No I18N\n\n  HCKeyList.RENDER_TO = \"renderTo\"; //No I18N\n\n  HCKeyList.INVERTED = \"inverted\"; //No I18N\n\n  HCKeyList.TYPE = \"type\"; //No I18N\n\n  HCKeyList.BORDER_COLOR = \"border_color\"; //No I18N\n\n  HCKeyList.BACKGROUND_COLOR = \"bg_color\"; //No I18N\n\n  HCKeyList.COLORS = \"colors\"; //No I18N\n\n  HCKeyList.TITLE = \"title\"; //No I18N\n\n  HCKeyList.TITLE_TEXT = \"title_text\"; //No I18N\n\n  HCKeyList.TITLE_STYLE = \"title_style\"; //No I18N\n\n  HCKeyList.TITLE_FONT_STYLE = \"title_font_style\"; //No I18N\n\n  HCKeyList.TITLE_FONT_WEIGHT = \"title_font_weight\"; //No I18N\n\n  HCKeyList.TITLE_FONT_SIZE = \"title_font_size\"; //No I18N\n\n  HCKeyList.TITLE_FONT_COLOR = \"title_font_color\"; //No I18N\n\n  HCKeyList.SUBTITLE = \"subtitle\"; //No I18N\n\n  HCKeyList.SUBTITLE_TEXT = \"subtitle_text\"; //No I18N\n\n  HCKeyList.SUBTITLE_FONT_STYLE = \"subtitle_font_style\"; //No I18N\n\n  HCKeyList.SUBTITLE_FONT_WEIGHT = \"subtitle_font_weight\"; //No I18N\n\n  HCKeyList.SUBTITLE_FONT_SIZE = \"subtitle_font_size\"; //No I18N\n\n  HCKeyList.SUBTITLE_FONT_COLOR = \"subtitle_font_color\"; //No I18N\n\n  HCKeyList.SUBTITLE_STYLE = \"subtitle_style\"; //No I18N\n\n  HCKeyList.LEGEND = \"legend\"; //No I18N\n\n  HCKeyList.LEGEND_STYLE = \"legend_style\"; //No I18N\n\n  HCKeyList.LEGEND_HALIGN = \"hAlign\"; //No I18N\n\n  HCKeyList.LEGEND_VALIGN = \"vAlign\"; //No I18N\n\n  HCKeyList.LEGEND_STATUS = \"legend_status\"; //No I18N\n\n  HCKeyList.LEGEND_FONT_STYLE = \"legend_font_style\"; //No I18N\n\n  HCKeyList.LEGEND_FONT_WEIGHT = \"legend_font_weight\"; //No I18N\n\n  HCKeyList.LEGEND_FONT_SIZE = \"legend_font_size\"; //No I18N\n\n  HCKeyList.LEGEND_FONT_COLOR = \"legend_font_color\"; //No I18N\n\n  HCKeyList.DATALABEL = \"datalabel\"; //No I18N\n\n  HCKeyList.DATALABEL_ENABLED = \"datalabel_enabled\"; //No I18N\n\n  HCKeyList.DATALABEL_STYLE = \"datalabel_style\"; //No I18N\n\n  HCKeyList.DATALABEL_FONT_STYLE = \"datalabel_font_style\"; //No I18N\n\n  HCKeyList.DATALABEL_FONT_WEIGHT = \"datalabel_font_weight\"; //No I18N\n\n  HCKeyList.DATALABEL_FONT_SIZE = \"datalabel_font_size\"; //No I18N\n\n  HCKeyList.DATALABEL_FONT_COLOR = \"datalabel_font_color\"; //No I18N\n\n  HCKeyList.DATALABEL_FORMAT = \"datalabel_format\"; //No I18N\n\n  HCKeyList.DATALABEL_POSITION = \"datalabel_position\"; //No I18N\n\n  HCKeyList.SERIES_COLOR = \"series_color\"; //No I18N\n\n  HCKeyList.DATA_COLOR = \"data_color\"; //No I18N\n\n  HCKeyList.DATA_BORDER_COLOR = \"data_border_color\"; //No I18N\n\n  HCKeyList.THRESHOLD_VALUE = \"threshold_value\"; //No I18N\n\n  HCKeyList.NEGATIVE_COLOR = \"negative_value\"; //No I18N\n\n  HCKeyList.SERIES_BORDER_COLOR = \"series_border_color\"; //No I18N\n\n  HCKeyList.MARKER = \"marker\"; //No I18N\n\n  HCKeyList.MARKER_STATUS = \"marker_status\"; //No I18N\n\n  HCKeyList.MARKER_SHAPE = \"marker_shape\"; //No I18N\n\n  HCKeyList.MARKER_SIZE = \"marker_size\"; //No I18N\n\n  HCKeyList.MARKER_COLOR = \"marker_color\"; //No I18N\n\n  HCKeyList.MARKER_BORDER_COLOR = \"marker_border_color\"; //No I18N\n\n  HCKeyList.LINE_TYPE = \"line_type\"; //No I18N\n\n  HCKeyList.AREA_OPACITY = \"area_opacity\"; //No I18N\n\n  HCKeyList.START_ANGLE = \"start_angle\"; //No I18N\n\n  HCKeyList.TARGET_OPTIONS = \"target_options\"; //No I18N\n\n  HCKeyList.TARGET_COLOR = \"target_color\"; //No I18N\n\n  HCKeyList.SORT_ORDER = \"sort_order\"; //No I18N\n\n  HCKeyList.HAXIS = \"horizontal_axis\"; //No I18N\n\n  HCKeyList.H_LABELS = \"h_labels\"; //No I18N\n\n  HCKeyList.H_LABELS_ENABLED = \"h_labels_enabled\"; //No I18N\n\n  HCKeyList.H_TITLE = \"h_title\"; //No I18N\n\n  HCKeyList.H_TITLE_TEXT = \"h_title_text\"; //No I18N\n\n  HCKeyList.HTITLE_STYLE = \"htitle_style\"; //No I18N\n\n  HCKeyList.HTITLE_FONT_STYLE = \"htitle_font_style\"; //No I18N\n\n  HCKeyList.HTITLE_FONT_WEIGHT = \"htitle_font_weight\"; //No I18N\n\n  HCKeyList.HTITLE_FONT_SIZE = \"htitle_font_size\"; //No I18N\n\n  HCKeyList.HTITLE_FONT_COLOR = \"htitle_font_color\"; //No I18N\n\n  HCKeyList.VAXIS = \"vertical_axis\"; //No I18N\n\n  HCKeyList.V_LABELS = \"v_labels\"; //No I18N\n\n  HCKeyList.V_LABELS_ENABLED = \"v_labels_enabled\"; //No I18N\n\n  HCKeyList.V_TITLE = \"v_title\"; //No I18N\n\n  HCKeyList.V_TITLE_TEXT = \"v_title_text\"; //No I18N\n\n  HCKeyList.VTITLE_STYLE = \"vtitle_style\"; //No I18N\n\n  HCKeyList.VTITLE_FONT_STYLE = \"vtitle_font_style\"; //No I18N\n\n  HCKeyList.VTITLE_FONT_WEIGHT = \"vtitle_font_weight\"; //No I18N\n\n  HCKeyList.VTITLE_FONT_SIZE = \"vtitle_font_size\"; //No I18N\n\n  HCKeyList.VTITLE_FONT_COLOR = \"vtitle_font_color\"; //No I18N\n\n  HCKeyList.V_MIN = \"v_min\"; //No I18N\n\n  HCKeyList.V_MAX = \"v_max\"; //No I18N\n\n  HCKeyList.V_TICK_INTERVAL = \"v_tick_interval\"; //No I18N\n\n  HCKeyList.BASE_VALUE = \"baseValue\"; //No I18N\n\n  HCKeyList.CREDITS = \"credits\"; //No I18N\n\n  HCKeyList.COLORS = \"colors\"; //No I18N\n\n  HCKeyList.PLOT_LINES = \"plotLines\"; //No I18N\n\n  HCKeyList.PLOT_LINES_VALUE = \"plotLines_value\"; //No I18N\n\n  HCKeyList.PLOT_LINES_TEXT = \"plotLines_text\"; //No I18N\n\n  HCKeyList.PLOT_LINES_FONT_STYLE = \"plotLines_font_style\"; //No I18N\n\n  HCKeyList.PLOT_LINES_FONT_WEIGHT = \"plotLines_font_weight\"; //No I18N\n\n  HCKeyList.PLOT_LINES_FONT_SIZE = \"plotLines_font_size\"; //No I18N\n\n  HCKeyList.PLOT_LINES_FONT_COLOR = \"plotLines_font_color\"; //No I18N\n\n  HCKeyList.V_GRIDLINES = \"v_gridLines\"; //No I18N\n\n  HCKeyList.H_GRIDLINES = \"h_gridLines\"; //No I18N\n\n  HCKeyList.TOOLTIP = \"tooltip\"; //No I18N\n\n  HCKeyList.TOOLTIP_ENABLED = \"tooltip_enabled\"; //No I18N\n\n  HCKeyList.CAPTION = \"caption\"; //No I18N\n\n  HCKeyList.CAPTION_ENABLED = \"caption_enabled\"; //No I18N\n\n  HCKeyList.CAPTION_TEXT = \"caption_text\"; //No I18N\n\n  HCKeyList.CAPTION_STYLE = \"caption_style\"; //No I18N\n\n  HCKeyList.CAPTION_FONT_STYLE = \"caption_font_style\"; //No I18N\n\n  HCKeyList.CAPTION_FONT_WEIGHT = \"caption_font_weight\"; //No I18N\n\n  HCKeyList.CAPTION_FONT_SIZE = \"caption_font_size\"; //No I18N\n\n  HCKeyList.CAPTION_FONT_COLOR = \"caption_font_color\"; //No I18N\n\n  HCKeyList.ANIMATION = \"animation\"; //No I18N\n\n  HCKeyList.BINNING_INTERVAL = \"binningInterval\"; //No I18N\n\n  HCKeyList.ANIMATION_DURATION = \"animation_duration\"; //No I18N\n})(window || this);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RyxFQUFBQSxTQUFTLENBQUMyRyxnQkFBVixHQUFpRCxpQkFBakQsQ0FqSFUsQ0FpSDBEOztBQUNwRTNHLEVBQUFBLFNBQVMsQ0FBQzRHLGtCQUFWLEdBQWlELG9CQUFqRCxDQWxIVSxDQWtINkQ7QUFDMUUsQ0FuSEQsRUFtSEdDLE1BQU0sSUFBSSxJQW5IYiIsInNvdXJjZXMiOlsid2VicGFjazovL211bHRpLWNoYXJ0LWZyYW1ld29yay8uL2pzL1V0aWxzL0hDS2V5TGlzdC5qcz9kMjU3Il0sInNvdXJjZXNDb250ZW50IjpbIi8qJElkJCovXG5cInVzZSBzdHJpY3RcIjsvL05vIEkxOE5cbihmdW5jdGlvbihjdHgpe1xuICAgIHZhciBIQ0tleUxpc3QgPSBjdHguSENLZXlMaXN0ID0ge307XG5cbiAgICAvL09ubHkgZm9yIHNrZWxldG9uIGNvbnN0cnVjdGlvbiBhbmQganNvbiBwYXJzaW5nXG4gICAgSENLZXlMaXN0LkNIQVJUICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9ICAgIFwiY2hhcnRcIjsgICAvL05vIEkxOE5cbiAgICBIQ0tleUxpc3QuQ0hBUlRfV0lEVEggICAgICAgICAgICAgICAgICAgICAgID0gICAgXCJjaGFydF93aWR0aFwiOyAvL05vIEkxOE5cbiAgICBIQ0tleUxpc3QuQ0hBUlRfSEVJR0hUICAgICAgICAgICAgICAgICAgICAgID0gICAgXCJjaGFydF9oZWlnaHRcIjsgICAgLy9ObyBJMThOXG4gICAgSENLZXlMaXN0LkNIQVJUX1NUWUxFICAgICAgICAgICAgICAgICAgICAgICA9ICAgIFwiY2hhcnRfc3R5bGVcIjsgLy9ObyBJMThOXG4gICAgSENLZXlMaXN0LkNIQVJUX0ZPTlRfRkFNSUxZICAgICAgICAgICAgICAgICA9ICAgIFwiY2hhcnRfZm9udF9mYW1pbHlcIjsgICAvL05vIEkxOE5cbiAgICBIQ0tleUxpc3QuUkVOREVSX1RPICAgICAgICAgICAgICAgICAgICAgICAgID0gICAgXCJyZW5kZXJUb1wiOyAgICAvL05vIEkxOE5cbiAgICBIQ0tleUxpc3QuSU5WRVJURUQgICAgICAgICAgICAgICAgICAgICAgICAgID0gICAgXCJpbnZlcnRlZFwiOyAgICAvL05vIEkxOE5cbiAgICBIQ0tleUxpc3QuVFlQRSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID0gICAgXCJ0eXBlXCI7ICAgIC8vTm8gSTE4TlxuICAgIEhDS2V5TGlzdC5CT1JERVJfQ09MT1IgICAgICAgICAgICAgICAgICAgICAgPSAgICBcImJvcmRlcl9jb2xvclwiOyAgICAvL05vIEkxOE5cbiAgICBIQ0tleUxpc3QuQkFDS0dST1VORF9DT0xPUiAgICAgICAgICAgICAgICAgID0gICAgXCJiZ19jb2xvclwiOyAgICAvL05vIEkxOE5cbiAgICBIQ0tleUxpc3QuQ09MT1JTICAgICAgICAgICAgICAgICAgICAgICAgICAgID0gICAgXCJjb2xvcnNcIjsgIC8vTm8gSTE4TlxuICAgIEhDS2V5TGlzdC5USVRMRSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSAgICBcInRpdGxlXCI7ICAgLy9ObyBJMThOXG4gICAgSENLZXlMaXN0LlRJVExFX1RFWFQgICAgICAgICAgICAgICAgICAgICAgICA9ICAgIFwidGl0bGVfdGV4dFwiOyAgLy9ObyBJMThOXG4gICAgSENLZXlMaXN0LlRJVExFX1NUWUxFICAgICAgICAgICAgICAgICAgICAgICA9ICAgIFwidGl0bGVfc3R5bGVcIjsgLy9ObyBJMThOXG4gICAgSENLZXlMaXN0LlRJVExFX0ZPTlRfU1RZTEUgICAgICAgICAgICAgICAgICA9ICAgIFwidGl0bGVfZm9udF9zdHlsZVwiOyAgICAvL05vIEkxOE5cbiAgICBIQ0tleUxpc3QuVElUTEVfRk9OVF9XRUlHSFQgICAgICAgICAgICAgICAgID0gICAgXCJ0aXRsZV9mb250X3dlaWdodFwiOyAgIC8vTm8gSTE4TlxuICAgIEhDS2V5TGlzdC5USVRMRV9GT05UX1NJWkUgICAgICAgICAgICAgICAgICAgPSAgICBcInRpdGxlX2ZvbnRfc2l6ZVwiOyAvL05vIEkxOE5cbiAgICBIQ0tleUxpc3QuVElUTEVfRk9OVF9DT0xPUiAgICAgICAgICAgICAgICAgID0gICAgXCJ0aXRsZV9mb250X2NvbG9yXCI7ICAgIC8vTm8gSTE4TlxuICAgIEhDS2V5TGlzdC5TVUJUSVRMRSAgICAgICAgICAgICAgICAgICAgICAgICAgPSAgICBcInN1YnRpdGxlXCI7ICAgIC8vTm8gSTE4TlxuICAgIEhDS2V5TGlzdC5TVUJUSVRMRV9URVhUICAgICAgICAgICAgICAgICAgICAgPSAgICBcInN1YnRpdGxlX3RleHRcIjsgICAvL05vIEkxOE5cbiAgICBIQ0tleUxpc3QuU1VCVElUTEVfRk9OVF9TVFlMRSAgICAgICAgICAgICAgID0gICAgXCJzdWJ0aXRsZV9mb250X3N0eWxlXCI7IC8vTm8gSTE4TlxuICAgIEhDS2V5TGlzdC5TVUJUSVRMRV9GT05UX1dFSUdIVCAgICAgICAgICAgICAgPSAgICBcInN1YnRpdGxlX2ZvbnRfd2VpZ2h0XCI7ICAgIC8vTm8gSTE4TlxuICAgIEhDS2V5TGlzdC5TVUJUSVRMRV9GT05UX1NJWkUgICAgICAgICAgICAgICAgPSAgICBcInN1YnRpdGxlX2ZvbnRfc2l6ZVwiOyAgLy9ObyBJMThOXG4gICAgSENLZXlMaXN0LlNVQlRJVExFX0ZPTlRfQ09MT1IgICAgICAgICAgICAgICA9ICAgIFwic3VidGl0bGVfZm9udF9jb2xvclwiOyAvL05vIEkxOE5cbiAgICBIQ0tleUxpc3QuU1VCVElUTEVfU1RZTEUgICAgICAgICAgICAgICAgICAgID0gICAgXCJzdWJ0aXRsZV9zdHlsZVwiOyAgLy9ObyBJMThOXG4gICAgSENLZXlMaXN0LkxFR0VORCAgICAgICAgICAgICAgICAgICAgICAgICAgICA9ICAgIFwibGVnZW5kXCI7ICAvL05vIEkxOE5cbiAgICBIQ0tleUxpc3QuTEVHRU5EX1NUWUxFICAgICAgICAgICAgICAgICAgICAgID0gICAgXCJsZWdlbmRfc3R5bGVcIjsgICAgLy9ObyBJMThOXG4gICAgSENLZXlMaXN0LkxFR0VORF9IQUxJR04gICAgICAgICAgICAgICAgICAgICA9ICAgIFwiaEFsaWduXCI7ICAvL05vIEkxOE5cbiAgICBIQ0tleUxpc3QuTEVHRU5EX1ZBTElHTiAgICAgICAgICAgICAgICAgICAgID0gICAgXCJ2QWxpZ25cIjsgIC8vTm8gSTE4TlxuICAgIEhDS2V5TGlzdC5MRUdFTkRfU1RBVFVTICAgICAgICAgICAgICAgICAgICAgPSAgICBcImxlZ2VuZF9zdGF0dXNcIjsgICAvL05vIEkxOE5cbiAgICBIQ0tleUxpc3QuTEVHRU5EX0ZPTlRfU1RZTEUgICAgICAgICAgICAgICAgID0gICAgXCJsZWdlbmRfZm9udF9zdHlsZVwiOyAgIC8vTm8gSTE4TlxuICAgIEhDS2V5TGlzdC5MRUdFTkRfRk9OVF9XRUlHSFQgICAgICAgICAgICAgICAgPSAgICBcImxlZ2VuZF9mb250X3dlaWdodFwiOyAgLy9ObyBJMThOXG4gICAgSENLZXlMaXN0LkxFR0VORF9GT05UX1NJWkUgICAgICAgICAgICAgICAgICA9ICAgIFwibGVnZW5kX2ZvbnRfc2l6ZVwiOyAgICAvL05vIEkxOE5cbiAgICBIQ0tleUxpc3QuTEVHRU5EX0ZPTlRfQ09MT1IgICAgICAgICAgICAgICAgID0gICAgXCJsZWdlbmRfZm9udF9jb2xvclwiOyAgIC8vTm8gSTE4TlxuICAgIEhDS2V5TGlzdC5EQVRBTEFCRUwgICAgICAgICAgICAgICAgICAgICAgICAgPSAgICBcImRhdGFsYWJlbFwiOyAgIC8vTm8gSTE4TlxuICAgIEhDS2V5TGlzdC5EQVRBTEFCRUxfRU5BQkxFRCAgICAgICAgICAgICAgICAgPSAgICBcImRhdGFsYWJlbF9lbmFibGVkXCI7ICAgLy9ObyBJMThOXG4gICAgSENLZXlMaXN0LkRBVEFMQUJFTF9TVFlMRSAgICAgICAgICAgICAgICAgICA9ICAgIFwiZGF0YWxhYmVsX3N0eWxlXCI7IC8vTm8gSTE4TlxuICAgIEhDS2V5TGlzdC5EQVRBTEFCRUxfRk9OVF9TVFlMRSAgICAgICAgICAgICAgPSAgICBcImRhdGFsYWJlbF9mb250X3N0eWxlXCI7Ly9ObyBJMThOXG4gICAgSENLZXlMaXN0LkRBVEFMQUJFTF9GT05UX1dFSUdIVCAgICAgICAgICAgICA9ICAgIFwiZGF0YWxhYmVsX2ZvbnRfd2VpZ2h0XCI7IC8vTm8gSTE4TlxuICAgIEhDS2V5TGlzdC5EQVRBTEFCRUxfRk9OVF9TSVpFICAgICAgICAgICAgICAgPSAgICBcImRhdGFsYWJlbF9mb250X3NpemVcIjsgLy9ObyBJMThOXG4gICAgSENLZXlMaXN0LkRBVEFMQUJFTF9GT05UX0NPTE9SICAgICAgICAgICAgICA9ICAgIFwiZGF0YWxhYmVsX2ZvbnRfY29sb3JcIjsgLy9ObyBJMThOXG4gICAgSENLZXlMaXN0LkRBVEFMQUJFTF9GT1JNQVQgICAgICAgICAgICAgICAgICA9ICAgIFwiZGF0YWxhYmVsX2Zvcm1hdFwiOyAvL05vIEkxOE5cbiAgICBIQ0tleUxpc3QuREFUQUxBQkVMX1BPU0lUSU9OICAgICAgICAgICAgICAgID0gICAgXCJkYXRhbGFiZWxfcG9zaXRpb25cIjsgLy9ObyBJMThOXG4gICAgSENLZXlMaXN0LlNFUklFU19DT0xPUiAgICAgICAgICAgICAgICAgICAgICA9ICAgIFwic2VyaWVzX2NvbG9yXCI7IC8vTm8gSTE4TlxuICAgIEhDS2V5TGlzdC5EQVRBX0NPTE9SICAgICAgICAgICAgICAgICAgICAgICAgPSAgICBcImRhdGFfY29sb3JcIjsgLy9ObyBJMThOXG4gICAgSENLZXlMaXN0LkRBVEFfQk9SREVSX0NPTE9SICAgICAgICAgICAgICAgICA9ICAgIFwiZGF0YV9ib3JkZXJfY29sb3JcIjsgLy9ObyBJMThOXG4gICAgSENLZXlMaXN0LlRIUkVTSE9MRF9WQUxVRSAgICAgICAgICAgICAgICAgICA9ICAgIFwidGhyZXNob2xkX3ZhbHVlXCI7IC8vTm8gSTE4TlxuICAgIEhDS2V5TGlzdC5ORUdBVElWRV9DT0xPUiAgICAgICAgICAgICAgICAgICAgPSAgICBcIm5lZ2F0aXZlX3ZhbHVlXCI7IC8vTm8gSTE4TlxuICAgIEhDS2V5TGlzdC5TRVJJRVNfQk9SREVSX0NPTE9SICAgICAgICAgICAgICAgPSAgICBcInNlcmllc19ib3JkZXJfY29sb3JcIjsgLy9ObyBJMThOXG4gICAgSENLZXlMaXN0Lk1BUktFUiAgICAgICAgICAgICAgICAgICAgICAgICAgICA9ICAgIFwibWFya2VyXCI7IC8vTm8gSTE4TlxuICAgIEhDS2V5TGlzdC5NQVJLRVJfU1RBVFVTICAgICAgICAgICAgICAgICAgICAgPSAgICBcIm1hcmtlcl9zdGF0dXNcIjsgLy9ObyBJMThOXG4gICAgSENLZXlMaXN0Lk1BUktFUl9TSEFQRSAgICAgICAgICAgICAgICAgICAgICA9ICAgIFwibWFya2VyX3NoYXBlXCI7Ly9ObyBJMThOXG4gICAgSENLZXlMaXN0Lk1BUktFUl9TSVpFICAgICAgICAgICAgICAgICAgICAgICA9ICAgIFwibWFya2VyX3NpemVcIjsgLy9ObyBJMThOXG4gICAgSENLZXlMaXN0Lk1BUktFUl9DT0xPUiAgICAgICAgICAgICAgICAgICAgICA9ICAgIFwibWFya2VyX2NvbG9yXCI7IC8vTm8gSTE4TlxuICAgIEhDS2V5TGlzdC5NQVJLRVJfQk9SREVSX0NPTE9SICAgICAgICAgICAgICAgPSAgICBcIm1hcmtlcl9ib3JkZXJfY29sb3JcIjsgLy9ObyBJMThOXG4gICAgSENLZXlMaXN0LkxJTkVfVFlQRSAgICAgICAgICAgICAgICAgICAgICAgICA9ICAgIFwibGluZV90eXBlXCI7IC8vTm8gSTE4TlxuICAgIEhDS2V5TGlzdC5BUkVBX09QQUNJVFkgICAgICAgICAgICAgICAgICAgICAgPSAgICBcImFyZWFfb3BhY2l0eVwiOyAvL05vIEkxOE5cbiAgICBIQ0tleUxpc3QuU1RBUlRfQU5HTEUgICAgICAgICAgICAgICAgICAgICAgID0gICAgXCJzdGFydF9hbmdsZVwiOyAvL05vIEkxOE5cbiAgICBIQ0tleUxpc3QuVEFSR0VUX09QVElPTlMgICAgICAgICAgICAgICAgICAgID0gICAgXCJ0YXJnZXRfb3B0aW9uc1wiOyAvL05vIEkxOE5cbiAgICBIQ0tleUxpc3QuVEFSR0VUX0NPTE9SICAgICAgICAgICAgICAgICAgICAgID0gICAgXCJ0YXJnZXRfY29sb3JcIjsgLy9ObyBJMThOXG4gICAgSENLZXlMaXN0LlNPUlRfT1JERVIgICAgICAgICAgICAgICAgICAgICAgICA9ICAgIFwic29ydF9vcmRlclwiOyAvL05vIEkxOE5cblxuICAgIEhDS2V5TGlzdC5IQVhJUyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSAgICBcImhvcml6b250YWxfYXhpc1wiOyAvL05vIEkxOE5cbiAgICBIQ0tleUxpc3QuSF9MQUJFTFMgICAgICAgICAgICAgICAgICAgICAgICAgID0gICAgXCJoX2xhYmVsc1wiOyAgICAvL05vIEkxOE5cbiAgICBIQ0tleUxpc3QuSF9MQUJFTFNfRU5BQkxFRCAgICAgICAgICAgICAgICAgID0gICAgXCJoX2xhYmVsc19lbmFibGVkXCI7ICAgIC8vTm8gSTE4TlxuICAgIEhDS2V5TGlzdC5IX1RJVExFICAgICAgICAgICAgICAgICAgICAgICAgICAgPSAgICBcImhfdGl0bGVcIjsgLy9ObyBJMThOXG4gICAgSENLZXlMaXN0LkhfVElUTEVfVEVYVCAgICAgICAgICAgICAgICAgICAgICA9ICAgIFwiaF90aXRsZV90ZXh0XCI7ICAgIC8vTm8gSTE4TlxuICAgIEhDS2V5TGlzdC5IVElUTEVfU1RZTEUgICAgICAgICAgICAgICAgICAgICAgPSAgICBcImh0aXRsZV9zdHlsZVwiOyAgICAvL05vIEkxOE5cbiAgICBIQ0tleUxpc3QuSFRJVExFX0ZPTlRfU1RZTEUgICAgICAgICAgICAgICAgID0gICAgXCJodGl0bGVfZm9udF9zdHlsZVwiOyAgIC8vTm8gSTE4TlxuICAgIEhDS2V5TGlzdC5IVElUTEVfRk9OVF9XRUlHSFQgICAgICAgICAgICAgICAgPSAgICBcImh0aXRsZV9mb250X3dlaWdodFwiOyAgLy9ObyBJMThOXG4gICAgSENLZXlMaXN0LkhUSVRMRV9GT05UX1NJWkUgICAgICAgICAgICAgICAgICA9ICAgIFwiaHRpdGxlX2ZvbnRfc2l6ZVwiOyAgICAvL05vIEkxOE5cbiAgICBIQ0tleUxpc3QuSFRJVExFX0ZPTlRfQ09MT1IgICAgICAgICAgICAgICAgID0gICAgXCJodGl0bGVfZm9udF9jb2xvclwiOyAgIC8vTm8gSTE4TlxuICAgIEhDS2V5TGlzdC5WQVhJUyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSAgICBcInZlcnRpY2FsX2F4aXNcIjsgICAvL05vIEkxOE5cbiAgICBIQ0tleUxpc3QuVl9MQUJFTFMgICAgICAgICAgICAgICAgICAgICAgICAgID0gICAgXCJ2X2xhYmVsc1wiOyAgICAvL05vIEkxOE5cbiAgICBIQ0tleUxpc3QuVl9MQUJFTFNfRU5BQkxFRCAgICAgICAgICAgICAgICAgID0gICAgXCJ2X2xhYmVsc19lbmFibGVkXCI7ICAgIC8vTm8gSTE4TlxuICAgIEhDS2V5TGlzdC5WX1RJVExFICAgICAgICAgICAgICAgICAgICAgICAgICAgPSAgICBcInZfdGl0bGVcIjsgLy9ObyBJMThOXG4gICAgSENLZXlMaXN0LlZfVElUTEVfVEVYVCAgICAgICAgICAgICAgICAgICAgICA9ICAgIFwidl90aXRsZV90ZXh0XCI7ICAgIC8vTm8gSTE4TlxuICAgIEhDS2V5TGlzdC5WVElUTEVfU1RZTEUgICAgICAgICAgICAgICAgICAgICAgPSAgICBcInZ0aXRsZV9zdHlsZVwiOyAgICAvL05vIEkxOE5cbiAgICBIQ0tleUxpc3QuVlRJVExFX0ZPTlRfU1RZTEUgICAgICAgICAgICAgICAgID0gICAgXCJ2dGl0bGVfZm9udF9zdHlsZVwiOyAgIC8vTm8gSTE4TlxuICAgIEhDS2V5TGlzdC5WVElUTEVfRk9OVF9XRUlHSFQgICAgICAgICAgICAgICAgPSAgICBcInZ0aXRsZV9mb250X3dlaWdodFwiOyAgLy9ObyBJMThOXG4gICAgSENLZXlMaXN0LlZUSVRMRV9GT05UX1NJWkUgICAgICAgICAgICAgICAgICA9ICAgIFwidnRpdGxlX2ZvbnRfc2l6ZVwiOyAgICAvL05vIEkxOE5cbiAgICBIQ0tleUxpc3QuVlRJVExFX0ZPTlRfQ09MT1IgICAgICAgICAgICAgICAgID0gICAgXCJ2dGl0bGVfZm9udF9jb2xvclwiOyAgIC8vTm8gSTE4TlxuICAgIEhDS2V5TGlzdC5WX01JTiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPSAgICBcInZfbWluXCI7ICAgLy9ObyBJMThOXG4gICAgSENLZXlMaXN0LlZfTUFYICAgICAgICAgICAgICAgICAgICAgICAgICAgICA9ICAgIFwidl9tYXhcIjsgICAvL05vIEkxOE5cbiAgICBIQ0tleUxpc3QuVl9USUNLX0lOVEVSVkFMICAgICAgICAgICAgICAgICAgID0gICAgXCJ2X3RpY2tfaW50ZXJ2YWxcIjsgLy9ObyBJMThOXG4gICAgSENLZXlMaXN0LkJBU0VfVkFMVUUgICAgICAgICAgICAgICAgICAgICAgICA9ICAgIFwiYmFzZVZhbHVlXCI7ICAgLy9ObyBJMThOXG4gICAgSENLZXlMaXN0LkNSRURJVFMgICAgICAgICAgICAgICAgICAgICAgICAgICA9ICAgIFwiY3JlZGl0c1wiICAvL05vIEkxOE5cbiAgICBIQ0tleUxpc3QuQ09MT1JTICAgICAgICAgICAgICAgICAgICAgICAgICAgID0gICAgXCJjb2xvcnNcIjsgIC8vTm8gSTE4TlxuICAgIEhDS2V5TGlzdC5QTE9UX0xJTkVTICAgICAgICAgICAgICAgICAgICAgICAgPSAgICBcInBsb3RMaW5lc1wiOyAgIC8vTm8gSTE4TlxuICAgIEhDS2V5TGlzdC5QTE9UX0xJTkVTX1ZBTFVFICAgICAgICAgICAgICAgICAgPSAgICBcInBsb3RMaW5lc192YWx1ZVwiOyAvL05vIEkxOE5cbiAgICBIQ0tleUxpc3QuUExPVF9MSU5FU19URVhUICAgICAgICAgICAgICAgICAgID0gICAgXCJwbG90TGluZXNfdGV4dFwiOyAgLy9ObyBJMThOXG4gICAgSENLZXlMaXN0LlBMT1RfTElORVNfRk9OVF9TVFlMRSAgICAgICAgICAgICA9ICAgIFwicGxvdExpbmVzX2ZvbnRfc3R5bGVcIjsgICAgLy9ObyBJMThOXG4gICAgSENLZXlMaXN0LlBMT1RfTElORVNfRk9OVF9XRUlHSFQgICAgICAgICAgICA9ICAgIFwicGxvdExpbmVzX2ZvbnRfd2VpZ2h0XCI7ICAgLy9ObyBJMThOXG4gICAgSENLZXlMaXN0LlBMT1RfTElORVNfRk9OVF9TSVpFICAgICAgICAgICAgICA9ICAgIFwicGxvdExpbmVzX2ZvbnRfc2l6ZVwiOyAvL05vIEkxOE5cbiAgICBIQ0tleUxpc3QuUExPVF9MSU5FU19GT05UX0NPTE9SICAgICAgICAgICAgID0gICAgXCJwbG90TGluZXNfZm9udF9jb2xvclwiOyAgICAvL05vIEkxOE5cbiAgICBIQ0tleUxpc3QuVl9HUklETElORVMgICAgICAgICAgICAgICAgICAgICAgID0gICAgXCJ2X2dyaWRMaW5lc1wiOyAvL05vIEkxOE5cbiAgICBIQ0tleUxpc3QuSF9HUklETElORVMgICAgICAgICAgICAgICAgICAgICAgID0gICAgXCJoX2dyaWRMaW5lc1wiOyAvL05vIEkxOE5cbiAgICBIQ0tleUxpc3QuVE9PTFRJUCAgICAgICAgICAgICAgICAgICAgICAgICAgID0gICAgXCJ0b29sdGlwXCI7IC8vTm8gSTE4TlxuICAgIEhDS2V5TGlzdC5UT09MVElQX0VOQUJMRUQgICAgICAgICAgICAgICAgICAgPSAgICBcInRvb2x0aXBfZW5hYmxlZFwiOyAvL05vIEkxOE5cbiAgICBcbiAgICBIQ0tleUxpc3QuQ0FQVElPTiAgICAgICAgICAgICAgICAgICAgICAgICAgID0gICAgXCJjYXB0aW9uXCI7IC8vTm8gSTE4TlxuICAgIEhDS2V5TGlzdC5DQVBUSU9OX0VOQUJMRUQgICAgICAgICAgICAgICAgICAgPSAgICBcImNhcHRpb25fZW5hYmxlZFwiOyAvL05vIEkxOE5cbiAgICBIQ0tleUxpc3QuQ0FQVElPTl9URVhUICAgICAgICAgICAgICAgICAgICAgID0gICAgXCJjYXB0aW9uX3RleHRcIjsgICAgLy9ObyBJMThOXG4gICAgSENLZXlMaXN0LkNBUFRJT05fU1RZTEUgICAgICAgICAgICAgICAgICAgICA9ICAgIFwiY2FwdGlvbl9zdHlsZVwiOyAgIC8vTm8gSTE4TlxuICAgIEhDS2V5TGlzdC5DQVBUSU9OX0ZPTlRfU1RZTEUgICAgICAgICAgICAgICAgPSAgICBcImNhcHRpb25fZm9udF9zdHlsZVwiOyAgLy9ObyBJMThOXG4gICAgSENLZXlMaXN0LkNBUFRJT05fRk9OVF9XRUlHSFQgICAgICAgICAgICAgICA9ICAgIFwiY2FwdGlvbl9mb250X3dlaWdodFwiOyAvL05vIEkxOE5cbiAgICBIQ0tleUxpc3QuQ0FQVElPTl9GT05UX1NJWkUgICAgICAgICAgICAgICAgID0gICAgXCJjYXB0aW9uX2ZvbnRfc2l6ZVwiOyAgIC8vTm8gSTE4TlxuICAgIEhDS2V5TGlzdC5DQVBUSU9OX0ZPTlRfQ09MT1IgICAgICAgICAgICAgICAgPSAgICBcImNhcHRpb25fZm9udF9jb2xvclwiOyAgLy9ObyBJMThOXG4gICAgSENLZXlMaXN0LkFOSU1BVElPTiAgICAgICAgICAgICAgICAgICAgICAgICA9ICAgIFwiYW5pbWF0aW9uXCI7IC8vTm8gSTE4TlxuICAgIEhDS2V5TGlzdC5CSU5OSU5HX0lOVEVSVkFMICAgICAgICAgICAgICAgICAgPSAgICBcImJpbm5pbmdJbnRlcnZhbFwiOyAvL05vIEkxOE5cbiAgICBIQ0tleUxpc3QuQU5JTUFUSU9OX0RVUkFUSU9OICAgICAgICAgICAgICAgID0gICAgXCJhbmltYXRpb25fZHVyYXRpb25cIjsgLy9ObyBJMThOXG59KSh3aW5kb3cgfHwgdGhpcykiXSwibmFtZXMiOlsiY3R4IiwiSENLZXlMaXN0IiwiQ0hBUlQiLCJDSEFSVF9XSURUSCIsIkNIQVJUX0hFSUdIVCIsIkNIQVJUX1NUWUxFIiwiQ0hBUlRfRk9OVF9GQU1JTFkiLCJSRU5ERVJfVE8iLCJJTlZFUlRFRCIsIlRZUEUiLCJCT1JERVJfQ09MT1IiLCJCQUNLR1JPVU5EX0NPTE9SIiwiQ09MT1JTIiwiVElUTEUiLCJUSVRMRV9URVhUIiwiVElUTEVfU1RZTEUiLCJUSVRMRV9GT05UX1NUWUxFIiwiVElUTEVfRk9OVF9XRUlHSFQiLCJUSVRMRV9GT05UX1NJWkUiLCJUSVRMRV9GT05UX0NPTE9SIiwiU1VCVElUTEUiLCJTVUJUSVRMRV9URVhUIiwiU1VCVElUTEVfRk9OVF9TVFlMRSIsIlNVQlRJVExFX0ZPTlRfV0VJR0hUIiwiU1VCVElUTEVfRk9OVF9TSVpFIiwiU1VCVElUTEVfRk9OVF9DT0xPUiIsIlNVQlRJVExFX1NUWUxFIiwiTEVHRU5EIiwiTEVHRU5EX1NUWUxFIiwiTEVHRU5EX0hBTElHTiIsIkxFR0VORF9WQUxJR04iLCJMRUdFTkRfU1RBVFVTIiwiTEVHRU5EX0ZPTlRfU1RZTEUiLCJMRUdFTkRfRk9OVF9XRUlHSFQiLCJMRUdFTkRfRk9OVF9TSVpFIiwiTEVHRU5EX0ZPTlRfQ09MT1IiLCJEQVRBTEFCRUwiLCJEQVRBTEFCRUxfRU5BQkxFRCIsIkRBVEFMQUJFTF9TVFlMRSIsIkRBVEFMQUJFTF9GT05UX1NUWUxFIiwiREFUQUxBQkVMX0ZPTlRfV0VJR0hUIiwiREFUQUxBQkVMX0ZPTlRfU0laRSIsIkRBVEFMQUJFTF9GT05UX0NPTE9SIiwiREFUQUxBQkVMX0ZPUk1BVCIsIkRBVEFMQUJFTF9QT1NJVElPTiIsIlNFUklFU19DT0xPUiIsIkRBVEFfQ09MT1IiLCJEQVRBX0JPUkRFUl9DT0xPUiIsIlRIUkVTSE9MRF9WQUxVRSIsIk5FR0FUSVZFX0NPTE9SIiwiU0VSSUVTX0JPUkRFUl9DT0xPUiIsIk1BUktFUiIsIk1BUktFUl9TVEFUVVMiLCJNQVJLRVJfU0hBUEUiLCJNQVJLRVJfU0laRSIsIk1BUktFUl9DT0xPUiIsIk1BUktFUl9CT1JERVJfQ09MT1IiLCJMSU5FX1RZUEUiLCJBUkVBX09QQUNJVFkiLCJTVEFSVF9BTkdMRSIsIlRBUkdFVF9PUFRJT05TIiwiVEFSR0VUX0NPTE9SIiwiU09SVF9PUkRFUiIsIkhBWElTIiwiSF9MQUJFTFMiLCJIX0xBQkVMU19FTkFCTEVEIiwiSF9USVRMRSIsIkhfVElUTEVfVEVYVCIsIkhUSVRMRV9TVFlMRSIsIkhUSVRMRV9GT05UX1NUWUxFIiwiSFRJVExFX0ZPTlRfV0VJR0hUIiwiSFRJVExFX0ZPTlRfU0laRSIsIkhUSVRMRV9GT05UX0NPTE9SIiwiVkFYSVMiLCJWX0xBQkVMUyIsIlZfTEFCRUxTX0VOQUJMRUQiLCJWX1RJVExFIiwiVl9USVRMRV9URVhUIiwiVlRJVExFX1NUWUxFIiwiVlRJVExFX0ZPTlRfU1RZTEUiLCJWVElUTEVfRk9OVF9XRUlHSFQiLCJWVElUTEVfRk9OVF9TSVpFIiwiVlRJVExFX0ZPTlRfQ09MT1IiLCJWX01JTiIsIlZfTUFYIiwiVl9USUNLX0lOVEVSVkFMIiwiQkFTRV9WQUxVRSIsIkNSRURJVFMiLCJQTE9UX0xJTkVTIiwiUExPVF9MSU5FU19WQUxVRSIsIlBMT1RfTElORVNfVEVYVCIsIlBMT1RfTElORVNfRk9OVF9TVFlMRSIsIlBMT1RfTElORVNfRk9OVF9XRUlHSFQiLCJQTE9UX0xJTkVTX0ZPTlRfU0laRSIsIlBMT1RfTElORVNfRk9OVF9DT0xPUiIsIlZfR1JJRExJTkVTIiwiSF9HUklETElORVMiLCJUT09MVElQIiwiVE9PTFRJUF9FTkFCTEVEIiwiQ0FQVElPTiIsIkNBUFRJT05fRU5BQkxFRCIsIkNBUFRJT05fVEVYVCIsIkNBUFRJT05fU1RZTEUiLCJDQVBUSU9OX0ZPTlRfU1RZTEUiLCJDQVBUSU9OX0ZPTlRfV0VJR0hUIiwiQ0FQVElPTl9GT05UX1NJWkUiLCJDQVBUSU9OX0ZPTlRfQ09MT1IiLCJBTklNQVRJT04iLCJCSU5OSU5HX0lOVEVSVkFMIiwiQU5JTUFUSU9OX0RVUkFUSU9OIiwid2luZG93Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./js/Utils/HCKeyList.js\n");

/***/ }),

/***/ "./js/Utils/HCMaps.js":
/*!****************************!*\
  !*** ./js/Utils/HCMaps.js ***!
  \****************************/
/***/ (function() {

"use strict";
eval("/*$Id$*/\n //No I18N\n\n(function (ctx) {\n  var C = ctx.ChartConstants;\n  var HCConstants = ctx.HCConstants;\n  var HCKL = ctx.HCKeyList;\n  var HCMaps = ctx.HCMaps = {};\n  /* Chart Type to Applicable Highcharts JSON Keys Map */\n\n  var chartTypeToHCKeys = HCMaps.chartTypeToHCKeys = {};\n  chartTypeToHCKeys[C.COL] = [HCKL.CHART, HCKL.CHART_WIDTH, HCKL.CHART_HEIGHT, HCKL.RENDER_TO, HCKL.TYPE, HCKL.CHART_STYLE, HCKL.CHART_FONT_FAMILY, HCKL.BORDER_COLOR, HCKL.BACKGROUND_COLOR, HCKL.TITLE, HCKL.TITLE_TEXT, HCKL.TITLE_STYLE, HCKL.TITLE_FONT_SIZE, HCKL.TITLE_FONT_COLOR, HCKL.TITLE_FONT_STYLE, HCKL.TITLE_FONT_WEIGHT, HCKL.SUBTITLE, HCKL.SUBTITLE_TEXT, HCKL.SUBTITLE_FONT_SIZE, HCKL.SUBTITLE_FONT_COLOR, HCKL.SUBTITLE_FONT_STYLE, HCKL.SUBTITLE_FONT_WEIGHT, HCKL.SUBTITLE_STYLE, HCKL.LEGEND, HCKL.LEGEND_HALIGN, HCKL.LEGEND_VALIGN, HCKL.LEGEND_STATUS, HCKL.LEGEND_STYLE, HCKL.LEGEND_FONT_STYLE, HCKL.LEGEND_FONT_WEIGHT, HCKL.LEGEND_FONT_SIZE, HCKL.LEGEND_FONT_COLOR, HCKL.DATALABEL, HCKL.DATALABEL_ENABLED, HCKL.HAXIS, HCKL.VAXIS, HCKL.CREDITS, HCKL.COLORS, HCKL.TOOLTIP, HCKL.TOOLTIP_ENABLED];\n  chartTypeToHCKeys[C.GROUPED_COL] = [HCKL.CHART, HCKL.CHART_WIDTH, HCKL.CHART_HEIGHT, HCKL.RENDER_TO, HCKL.TYPE, HCKL.CHART_STYLE, HCKL.CHART_FONT_FAMILY, HCKL.BORDER_COLOR, HCKL.BACKGROUND_COLOR, HCKL.TITLE, HCKL.TITLE_TEXT, HCKL.TITLE_STYLE, HCKL.TITLE_FONT_SIZE, HCKL.TITLE_FONT_COLOR, HCKL.TITLE_FONT_STYLE, HCKL.TITLE_FONT_WEIGHT, HCKL.SUBTITLE, HCKL.SUBTITLE_TEXT, HCKL.SUBTITLE_FONT_SIZE, HCKL.SUBTITLE_FONT_COLOR, HCKL.SUBTITLE_FONT_STYLE, HCKL.SUBTITLE_FONT_WEIGHT, HCKL.SUBTITLE_STYLE, HCKL.LEGEND, HCKL.LEGEND_HALIGN, HCKL.LEGEND_VALIGN, HCKL.LEGEND_STATUS, HCKL.LEGEND_STYLE, HCKL.LEGEND_FONT_STYLE, HCKL.LEGEND_FONT_WEIGHT, HCKL.LEGEND_FONT_SIZE, HCKL.LEGEND_FONT_COLOR, HCKL.DATALABEL, HCKL.DATALABEL_ENABLED, HCKL.HAXIS, HCKL.VAXIS, HCKL.CREDITS, HCKL.COLORS, HCKL.TOOLTIP, HCKL.TOOLTIP_ENABLED];\n  chartTypeToHCKeys[C.STACKED_COL] = [HCKL.CHART, HCKL.CHART_WIDTH, HCKL.CHART_HEIGHT, HCKL.RENDER_TO, HCKL.TYPE, HCKL.CHART_STYLE, HCKL.CHART_FONT_FAMILY, HCKL.BORDER_COLOR, HCKL.BACKGROUND_COLOR, HCKL.TITLE, HCKL.TITLE_TEXT, HCKL.TITLE_STYLE, HCKL.TITLE_FONT_SIZE, HCKL.TITLE_FONT_COLOR, HCKL.TITLE_FONT_STYLE, HCKL.TITLE_FONT_WEIGHT, HCKL.SUBTITLE, HCKL.SUBTITLE_TEXT, HCKL.SUBTITLE_FONT_SIZE, HCKL.SUBTITLE_FONT_COLOR, HCKL.SUBTITLE_FONT_STYLE, HCKL.SUBTITLE_FONT_WEIGHT, HCKL.SUBTITLE_STYLE, HCKL.LEGEND, HCKL.LEGEND_HALIGN, HCKL.LEGEND_VALIGN, HCKL.LEGEND_STATUS, HCKL.LEGEND_STYLE, HCKL.LEGEND_FONT_STYLE, HCKL.LEGEND_FONT_WEIGHT, HCKL.LEGEND_FONT_SIZE, HCKL.LEGEND_FONT_COLOR, HCKL.DATALABEL, HCKL.DATALABEL_ENABLED, HCKL.HAXIS, HCKL.VAXIS, HCKL.CREDITS, HCKL.COLORS, HCKL.TOOLTIP, HCKL.TOOLTIP_ENABLED];\n  chartTypeToHCKeys[C.STACKED_PERCENT_COL] = [HCKL.CHART, HCKL.CHART_WIDTH, HCKL.CHART_HEIGHT, HCKL.RENDER_TO, HCKL.TYPE, HCKL.CHART_STYLE, HCKL.CHART_FONT_FAMILY, HCKL.BORDER_COLOR, HCKL.BACKGROUND_COLOR, HCKL.TITLE, HCKL.TITLE_TEXT, HCKL.TITLE_STYLE, HCKL.TITLE_FONT_SIZE, HCKL.TITLE_FONT_COLOR, HCKL.TITLE_FONT_STYLE, HCKL.TITLE_FONT_WEIGHT, HCKL.SUBTITLE, HCKL.SUBTITLE_TEXT, HCKL.SUBTITLE_FONT_SIZE, HCKL.SUBTITLE_FONT_COLOR, HCKL.SUBTITLE_FONT_STYLE, HCKL.SUBTITLE_FONT_WEIGHT, HCKL.SUBTITLE_STYLE, HCKL.LEGEND, HCKL.LEGEND_HALIGN, HCKL.LEGEND_VALIGN, HCKL.LEGEND_STATUS, HCKL.LEGEND_STYLE, HCKL.LEGEND_FONT_STYLE, HCKL.LEGEND_FONT_WEIGHT, HCKL.LEGEND_FONT_SIZE, HCKL.LEGEND_FONT_COLOR, HCKL.DATALABEL, HCKL.DATALABEL_ENABLED, HCKL.HAXIS, HCKL.VAXIS, HCKL.CREDITS, HCKL.COLORS, HCKL.TOOLTIP, HCKL.TOOLTIP_ENABLED];\n  chartTypeToHCKeys[C.BAR] = [HCKL.CHART, HCKL.CHART_WIDTH, HCKL.CHART_HEIGHT, HCKL.RENDER_TO, HCKL.TYPE, HCKL.CHART_STYLE, HCKL.CHART_FONT_FAMILY, HCKL.BORDER_COLOR, HCKL.BACKGROUND_COLOR, HCKL.TITLE, HCKL.TITLE_TEXT, HCKL.TITLE_STYLE, HCKL.TITLE_FONT_SIZE, HCKL.TITLE_FONT_COLOR, HCKL.TITLE_FONT_STYLE, HCKL.TITLE_FONT_WEIGHT, HCKL.SUBTITLE, HCKL.SUBTITLE_TEXT, HCKL.SUBTITLE_FONT_SIZE, HCKL.SUBTITLE_FONT_COLOR, HCKL.SUBTITLE_FONT_STYLE, HCKL.SUBTITLE_FONT_WEIGHT, HCKL.SUBTITLE_STYLE, HCKL.LEGEND, HCKL.LEGEND_HALIGN, HCKL.LEGEND_VALIGN, HCKL.LEGEND_STATUS, HCKL.LEGEND_STYLE, HCKL.LEGEND_FONT_STYLE, HCKL.LEGEND_FONT_WEIGHT, HCKL.LEGEND_FONT_SIZE, HCKL.LEGEND_FONT_COLOR, HCKL.DATALABEL, HCKL.DATALABEL_ENABLED, HCKL.HAXIS, HCKL.VAXIS, HCKL.CREDITS, HCKL.COLORS, HCKL.TOOLTIP, HCKL.TOOLTIP_ENABLED];\n  chartTypeToHCKeys[C.GROUPED_BAR] = [HCKL.CHART, HCKL.CHART_WIDTH, HCKL.CHART_HEIGHT, HCKL.RENDER_TO, HCKL.TYPE, HCKL.CHART_STYLE, HCKL.CHART_FONT_FAMILY, HCKL.BORDER_COLOR, HCKL.BACKGROUND_COLOR, HCKL.TITLE, HCKL.TITLE_TEXT, HCKL.TITLE_STYLE, HCKL.TITLE_FONT_SIZE, HCKL.TITLE_FONT_COLOR, HCKL.TITLE_FONT_STYLE, HCKL.TITLE_FONT_WEIGHT, HCKL.SUBTITLE, HCKL.SUBTITLE_TEXT, HCKL.SUBTITLE_FONT_SIZE, HCKL.SUBTITLE_FONT_COLOR, HCKL.SUBTITLE_FONT_STYLE, HCKL.SUBTITLE_FONT_WEIGHT, HCKL.SUBTITLE_STYLE, HCKL.LEGEND, HCKL.LEGEND_HALIGN, HCKL.LEGEND_VALIGN, HCKL.LEGEND_STATUS, HCKL.LEGEND_STYLE, HCKL.LEGEND_FONT_STYLE, HCKL.LEGEND_FONT_WEIGHT, HCKL.LEGEND_FONT_SIZE, HCKL.LEGEND_FONT_COLOR, HCKL.DATALABEL, HCKL.DATALABEL_ENABLED, HCKL.HAXIS, HCKL.VAXIS, HCKL.CREDITS, HCKL.COLORS, HCKL.TOOLTIP, HCKL.TOOLTIP_ENABLED];\n  chartTypeToHCKeys[C.STACKED_BAR] = [HCKL.CHART, HCKL.CHART_WIDTH, HCKL.CHART_HEIGHT, HCKL.RENDER_TO, HCKL.TYPE, HCKL.CHART_STYLE, HCKL.CHART_FONT_FAMILY, HCKL.BORDER_COLOR, HCKL.BACKGROUND_COLOR, HCKL.TITLE, HCKL.TITLE_TEXT, HCKL.TITLE_STYLE, HCKL.TITLE_FONT_SIZE, HCKL.TITLE_FONT_COLOR, HCKL.TITLE_FONT_STYLE, HCKL.TITLE_FONT_WEIGHT, HCKL.SUBTITLE, HCKL.SUBTITLE_TEXT, HCKL.SUBTITLE_FONT_SIZE, HCKL.SUBTITLE_FONT_COLOR, HCKL.SUBTITLE_FONT_STYLE, HCKL.SUBTITLE_FONT_WEIGHT, HCKL.SUBTITLE_STYLE, HCKL.LEGEND, HCKL.LEGEND_HALIGN, HCKL.LEGEND_VALIGN, HCKL.LEGEND_STATUS, HCKL.LEGEND_STYLE, HCKL.LEGEND_FONT_STYLE, HCKL.LEGEND_FONT_WEIGHT, HCKL.LEGEND_FONT_SIZE, HCKL.LEGEND_FONT_COLOR, HCKL.DATALABEL, HCKL.DATALABEL_ENABLED, HCKL.HAXIS, HCKL.VAXIS, HCKL.CREDITS, HCKL.COLORS, HCKL.TOOLTIP, HCKL.TOOLTIP_ENABLED];\n  chartTypeToHCKeys[C.STACKED_PERCENT_BAR] = [HCKL.CHART, HCKL.CHART_WIDTH, HCKL.CHART_HEIGHT, HCKL.RENDER_TO, HCKL.TYPE, HCKL.CHART_STYLE, HCKL.CHART_FONT_FAMILY, HCKL.BORDER_COLOR, HCKL.BACKGROUND_COLOR, HCKL.TITLE, HCKL.TITLE_TEXT, HCKL.TITLE_STYLE, HCKL.TITLE_FONT_SIZE, HCKL.TITLE_FONT_COLOR, HCKL.TITLE_FONT_STYLE, HCKL.TITLE_FONT_WEIGHT, HCKL.SUBTITLE, HCKL.SUBTITLE_TEXT, HCKL.SUBTITLE_FONT_SIZE, HCKL.SUBTITLE_FONT_COLOR, HCKL.SUBTITLE_FONT_STYLE, HCKL.SUBTITLE_FONT_WEIGHT, HCKL.SUBTITLE_STYLE, HCKL.LEGEND, HCKL.LEGEND_HALIGN, HCKL.LEGEND_VALIGN, HCKL.LEGEND_STATUS, HCKL.LEGEND_STYLE, HCKL.LEGEND_FONT_STYLE, HCKL.LEGEND_FONT_WEIGHT, HCKL.LEGEND_FONT_SIZE, HCKL.LEGEND_FONT_COLOR, HCKL.DATALABEL, HCKL.DATALABEL_ENABLED, HCKL.HAXIS, HCKL.VAXIS, HCKL.CREDITS, HCKL.COLORS, HCKL.TOOLTIP, HCKL.TOOLTIP_ENABLED];\n  chartTypeToHCKeys[C.LINE] = [HCKL.CHART, HCKL.CHART_WIDTH, HCKL.CHART_HEIGHT, HCKL.RENDER_TO, HCKL.TYPE, HCKL.CHART_STYLE, HCKL.CHART_FONT_FAMILY, HCKL.BORDER_COLOR, HCKL.BACKGROUND_COLOR, HCKL.TITLE, HCKL.TITLE_TEXT, HCKL.TITLE_STYLE, HCKL.TITLE_FONT_SIZE, HCKL.TITLE_FONT_COLOR, HCKL.TITLE_FONT_STYLE, HCKL.TITLE_FONT_WEIGHT, HCKL.SUBTITLE, HCKL.SUBTITLE_TEXT, HCKL.SUBTITLE_FONT_SIZE, HCKL.SUBTITLE_FONT_COLOR, HCKL.SUBTITLE_FONT_STYLE, HCKL.SUBTITLE_FONT_WEIGHT, HCKL.SUBTITLE_STYLE, HCKL.LEGEND, HCKL.LEGEND_HALIGN, HCKL.LEGEND_VALIGN, HCKL.LEGEND_STATUS, HCKL.LEGEND_STYLE, HCKL.LEGEND_FONT_STYLE, HCKL.LEGEND_FONT_WEIGHT, HCKL.LEGEND_FONT_SIZE, HCKL.LEGEND_FONT_COLOR, HCKL.DATALABEL, HCKL.DATALABEL_ENABLED, HCKL.HAXIS, HCKL.VAXIS, HCKL.CREDITS, HCKL.COLORS, HCKL.TOOLTIP, HCKL.TOOLTIP_ENABLED, HCKL.INVERTED];\n  chartTypeToHCKeys[C.SPLINE] = [HCKL.CHART, HCKL.CHART_WIDTH, HCKL.CHART_HEIGHT, HCKL.RENDER_TO, HCKL.TYPE, HCKL.CHART_STYLE, HCKL.CHART_FONT_FAMILY, HCKL.BORDER_COLOR, HCKL.BACKGROUND_COLOR, HCKL.TITLE, HCKL.TITLE_TEXT, HCKL.TITLE_STYLE, HCKL.TITLE_FONT_SIZE, HCKL.TITLE_FONT_COLOR, HCKL.TITLE_FONT_STYLE, HCKL.TITLE_FONT_WEIGHT, HCKL.SUBTITLE, HCKL.SUBTITLE_TEXT, HCKL.SUBTITLE_FONT_SIZE, HCKL.SUBTITLE_FONT_COLOR, HCKL.SUBTITLE_FONT_STYLE, HCKL.SUBTITLE_FONT_WEIGHT, HCKL.SUBTITLE_STYLE, HCKL.LEGEND, HCKL.LEGEND_HALIGN, HCKL.LEGEND_VALIGN, HCKL.LEGEND_STATUS, HCKL.LEGEND_STYLE, HCKL.LEGEND_FONT_STYLE, HCKL.LEGEND_FONT_WEIGHT, HCKL.LEGEND_FONT_SIZE, HCKL.LEGEND_FONT_COLOR, HCKL.DATALABEL, HCKL.DATALABEL_ENABLED, HCKL.HAXIS, HCKL.VAXIS, HCKL.CREDITS, HCKL.COLORS, HCKL.TOOLTIP, HCKL.TOOLTIP_ENABLED, HCKL.INVERTED];\n  chartTypeToHCKeys[C.STEP_LINE] = [HCKL.CHART, HCKL.CHART_WIDTH, HCKL.CHART_HEIGHT, HCKL.RENDER_TO, HCKL.TYPE, HCKL.CHART_STYLE, HCKL.CHART_FONT_FAMILY, HCKL.BORDER_COLOR, HCKL.BACKGROUND_COLOR, HCKL.TITLE, HCKL.TITLE_TEXT, HCKL.TITLE_STYLE, HCKL.TITLE_FONT_SIZE, HCKL.TITLE_FONT_COLOR, HCKL.TITLE_FONT_STYLE, HCKL.TITLE_FONT_WEIGHT, HCKL.SUBTITLE, HCKL.SUBTITLE_TEXT, HCKL.SUBTITLE_FONT_SIZE, HCKL.SUBTITLE_FONT_COLOR, HCKL.SUBTITLE_FONT_STYLE, HCKL.SUBTITLE_FONT_WEIGHT, HCKL.SUBTITLE_STYLE, HCKL.LEGEND, HCKL.LEGEND_HALIGN, HCKL.LEGEND_VALIGN, HCKL.LEGEND_STATUS, HCKL.LEGEND_STYLE, HCKL.LEGEND_FONT_STYLE, HCKL.LEGEND_FONT_WEIGHT, HCKL.LEGEND_FONT_SIZE, HCKL.LEGEND_FONT_COLOR, HCKL.DATALABEL, HCKL.DATALABEL_ENABLED, HCKL.HAXIS, HCKL.VAXIS, HCKL.CREDITS, HCKL.COLORS, HCKL.TOOLTIP, HCKL.TOOLTIP_ENABLED, HCKL.INVERTED];\n  chartTypeToHCKeys[C.AREA] = [HCKL.CHART, HCKL.CHART_WIDTH, HCKL.CHART_HEIGHT, HCKL.RENDER_TO, HCKL.TYPE, HCKL.CHART_STYLE, HCKL.CHART_FONT_FAMILY, HCKL.BORDER_COLOR, HCKL.BACKGROUND_COLOR, HCKL.TITLE, HCKL.TITLE_TEXT, HCKL.TITLE_STYLE, HCKL.TITLE_FONT_SIZE, HCKL.TITLE_FONT_COLOR, HCKL.TITLE_FONT_STYLE, HCKL.TITLE_FONT_WEIGHT, HCKL.SUBTITLE, HCKL.SUBTITLE_TEXT, HCKL.SUBTITLE_FONT_SIZE, HCKL.SUBTITLE_FONT_COLOR, HCKL.SUBTITLE_FONT_STYLE, HCKL.SUBTITLE_FONT_WEIGHT, HCKL.SUBTITLE_STYLE, HCKL.LEGEND, HCKL.LEGEND_HALIGN, HCKL.LEGEND_VALIGN, HCKL.LEGEND_STATUS, HCKL.LEGEND_STYLE, HCKL.LEGEND_FONT_STYLE, HCKL.LEGEND_FONT_WEIGHT, HCKL.LEGEND_FONT_SIZE, HCKL.LEGEND_FONT_COLOR, HCKL.DATALABEL, HCKL.DATALABEL_ENABLED, HCKL.HAXIS, HCKL.VAXIS, HCKL.CREDITS, HCKL.COLORS, HCKL.TOOLTIP, HCKL.TOOLTIP_ENABLED, HCKL.INVERTED];\n  chartTypeToHCKeys[C.AREA_SPLINE] = [HCKL.CHART, HCKL.CHART_WIDTH, HCKL.CHART_HEIGHT, HCKL.RENDER_TO, HCKL.TYPE, HCKL.CHART_STYLE, HCKL.CHART_FONT_FAMILY, HCKL.BORDER_COLOR, HCKL.BACKGROUND_COLOR, HCKL.TITLE, HCKL.TITLE_TEXT, HCKL.TITLE_STYLE, HCKL.TITLE_FONT_SIZE, HCKL.TITLE_FONT_COLOR, HCKL.TITLE_FONT_STYLE, HCKL.TITLE_FONT_WEIGHT, HCKL.SUBTITLE, HCKL.SUBTITLE_TEXT, HCKL.SUBTITLE_FONT_SIZE, HCKL.SUBTITLE_FONT_COLOR, HCKL.SUBTITLE_FONT_STYLE, HCKL.SUBTITLE_FONT_WEIGHT, HCKL.SUBTITLE_STYLE, HCKL.LEGEND, HCKL.LEGEND_HALIGN, HCKL.LEGEND_VALIGN, HCKL.LEGEND_STATUS, HCKL.LEGEND_STYLE, HCKL.LEGEND_FONT_STYLE, HCKL.LEGEND_FONT_WEIGHT, HCKL.LEGEND_FONT_SIZE, HCKL.LEGEND_FONT_COLOR, HCKL.DATALABEL, HCKL.DATALABEL_ENABLED, HCKL.HAXIS, HCKL.VAXIS, HCKL.CREDITS, HCKL.COLORS, HCKL.TOOLTIP, HCKL.TOOLTIP_ENABLED, HCKL.INVERTED];\n  chartTypeToHCKeys[C.STACKED_AREA] = [HCKL.CHART, HCKL.CHART_WIDTH, HCKL.CHART_HEIGHT, HCKL.RENDER_TO, HCKL.TYPE, HCKL.CHART_STYLE, HCKL.CHART_FONT_FAMILY, HCKL.BORDER_COLOR, HCKL.BACKGROUND_COLOR, HCKL.TITLE, HCKL.TITLE_TEXT, HCKL.TITLE_STYLE, HCKL.TITLE_FONT_SIZE, HCKL.TITLE_FONT_COLOR, HCKL.TITLE_FONT_STYLE, HCKL.TITLE_FONT_WEIGHT, HCKL.SUBTITLE, HCKL.SUBTITLE_TEXT, HCKL.SUBTITLE_FONT_SIZE, HCKL.SUBTITLE_FONT_COLOR, HCKL.SUBTITLE_FONT_STYLE, HCKL.SUBTITLE_FONT_WEIGHT, HCKL.SUBTITLE_STYLE, HCKL.LEGEND, HCKL.LEGEND_HALIGN, HCKL.LEGEND_VALIGN, HCKL.LEGEND_STATUS, HCKL.LEGEND_STYLE, HCKL.LEGEND_FONT_STYLE, HCKL.LEGEND_FONT_WEIGHT, HCKL.LEGEND_FONT_SIZE, HCKL.LEGEND_FONT_COLOR, HCKL.DATALABEL, HCKL.DATALABEL_ENABLED, HCKL.HAXIS, HCKL.VAXIS, HCKL.CREDITS, HCKL.COLORS, HCKL.TOOLTIP, HCKL.TOOLTIP_ENABLED, HCKL.INVERTED];\n  chartTypeToHCKeys[C.STACKED_PERCENT_AREA] = [HCKL.CHART, HCKL.CHART_WIDTH, HCKL.CHART_HEIGHT, HCKL.RENDER_TO, HCKL.TYPE, HCKL.CHART_STYLE, HCKL.CHART_FONT_FAMILY, HCKL.BORDER_COLOR, HCKL.BACKGROUND_COLOR, HCKL.TITLE, HCKL.TITLE_TEXT, HCKL.TITLE_STYLE, HCKL.TITLE_FONT_SIZE, HCKL.TITLE_FONT_COLOR, HCKL.TITLE_FONT_STYLE, HCKL.TITLE_FONT_WEIGHT, HCKL.SUBTITLE, HCKL.SUBTITLE_TEXT, HCKL.SUBTITLE_FONT_SIZE, HCKL.SUBTITLE_FONT_COLOR, HCKL.SUBTITLE_FONT_STYLE, HCKL.SUBTITLE_FONT_WEIGHT, HCKL.SUBTITLE_STYLE, HCKL.LEGEND, HCKL.LEGEND_HALIGN, HCKL.LEGEND_VALIGN, HCKL.LEGEND_STATUS, HCKL.LEGEND_STYLE, HCKL.LEGEND_FONT_STYLE, HCKL.LEGEND_FONT_WEIGHT, HCKL.LEGEND_FONT_SIZE, HCKL.LEGEND_FONT_COLOR, HCKL.DATALABEL, HCKL.DATALABEL_ENABLED, HCKL.HAXIS, HCKL.VAXIS, HCKL.CREDITS, HCKL.COLORS, HCKL.TOOLTIP, HCKL.TOOLTIP_ENABLED, HCKL.INVERTED];\n  chartTypeToHCKeys[C.PIE] = [HCKL.CHART, HCKL.CHART_WIDTH, HCKL.CHART_HEIGHT, HCKL.RENDER_TO, HCKL.TYPE, HCKL.CHART_STYLE, HCKL.CHART_FONT_FAMILY, HCKL.BORDER_COLOR, HCKL.BACKGROUND_COLOR, HCKL.TITLE, HCKL.TITLE_TEXT, HCKL.TITLE_STYLE, HCKL.TITLE_FONT_SIZE, HCKL.TITLE_FONT_COLOR, HCKL.TITLE_FONT_STYLE, HCKL.TITLE_FONT_WEIGHT, HCKL.SUBTITLE, HCKL.SUBTITLE_TEXT, HCKL.SUBTITLE_FONT_SIZE, HCKL.SUBTITLE_FONT_COLOR, HCKL.SUBTITLE_FONT_STYLE, HCKL.SUBTITLE_FONT_WEIGHT, HCKL.SUBTITLE_STYLE, HCKL.LEGEND, HCKL.LEGEND_HALIGN, HCKL.LEGEND_VALIGN, HCKL.LEGEND_STATUS, HCKL.LEGEND_STYLE, HCKL.LEGEND_FONT_STYLE, HCKL.LEGEND_FONT_WEIGHT, HCKL.LEGEND_FONT_SIZE, HCKL.LEGEND_FONT_COLOR, HCKL.DATALABEL, HCKL.DATALABEL_ENABLED, HCKL.CREDITS, HCKL.COLORS, HCKL.TOOLTIP, HCKL.TOOLTIP_ENABLED];\n  chartTypeToHCKeys[C.SEMI_PIE] = [HCKL.CHART, HCKL.CHART_WIDTH, HCKL.CHART_HEIGHT, HCKL.RENDER_TO, HCKL.TYPE, HCKL.CHART_STYLE, HCKL.CHART_FONT_FAMILY, HCKL.BORDER_COLOR, HCKL.BACKGROUND_COLOR, HCKL.TITLE, HCKL.TITLE_TEXT, HCKL.TITLE_STYLE, HCKL.TITLE_FONT_SIZE, HCKL.TITLE_FONT_COLOR, HCKL.TITLE_FONT_STYLE, HCKL.TITLE_FONT_WEIGHT, HCKL.SUBTITLE, HCKL.SUBTITLE_TEXT, HCKL.SUBTITLE_FONT_SIZE, HCKL.SUBTITLE_FONT_COLOR, HCKL.SUBTITLE_FONT_STYLE, HCKL.SUBTITLE_FONT_WEIGHT, HCKL.SUBTITLE_STYLE, HCKL.LEGEND, HCKL.LEGEND_HALIGN, HCKL.LEGEND_VALIGN, HCKL.LEGEND_STATUS, HCKL.LEGEND_STYLE, HCKL.LEGEND_FONT_STYLE, HCKL.LEGEND_FONT_WEIGHT, HCKL.LEGEND_FONT_SIZE, HCKL.LEGEND_FONT_COLOR, HCKL.DATALABEL, HCKL.DATALABEL_ENABLED, HCKL.CREDITS, HCKL.COLORS, HCKL.TOOLTIP, HCKL.TOOLTIP_ENABLED];\n  chartTypeToHCKeys[C.DONUT] = [HCKL.CHART, HCKL.CHART_WIDTH, HCKL.CHART_HEIGHT, HCKL.RENDER_TO, HCKL.TYPE, HCKL.CHART_STYLE, HCKL.CHART_FONT_FAMILY, HCKL.BORDER_COLOR, HCKL.BACKGROUND_COLOR, HCKL.TITLE, HCKL.TITLE_TEXT, HCKL.TITLE_STYLE, HCKL.TITLE_FONT_SIZE, HCKL.TITLE_FONT_COLOR, HCKL.TITLE_FONT_STYLE, HCKL.TITLE_FONT_WEIGHT, HCKL.SUBTITLE, HCKL.SUBTITLE_TEXT, HCKL.SUBTITLE_FONT_SIZE, HCKL.SUBTITLE_FONT_COLOR, HCKL.SUBTITLE_FONT_STYLE, HCKL.SUBTITLE_FONT_WEIGHT, HCKL.SUBTITLE_STYLE, HCKL.LEGEND, HCKL.LEGEND_HALIGN, HCKL.LEGEND_VALIGN, HCKL.LEGEND_STATUS, HCKL.LEGEND_STYLE, HCKL.LEGEND_FONT_STYLE, HCKL.LEGEND_FONT_WEIGHT, HCKL.LEGEND_FONT_SIZE, HCKL.LEGEND_FONT_COLOR, HCKL.DATALABEL, HCKL.DATALABEL_ENABLED, HCKL.CREDITS, HCKL.COLORS, HCKL.TOOLTIP, HCKL.TOOLTIP_ENABLED];\n  chartTypeToHCKeys[C.SEMI_DONUT] = [HCKL.CHART, HCKL.CHART_WIDTH, HCKL.CHART_HEIGHT, HCKL.RENDER_TO, HCKL.TYPE, HCKL.CHART_STYLE, HCKL.CHART_FONT_FAMILY, HCKL.BORDER_COLOR, HCKL.BACKGROUND_COLOR, HCKL.TITLE, HCKL.TITLE_TEXT, HCKL.TITLE_STYLE, HCKL.TITLE_FONT_SIZE, HCKL.TITLE_FONT_COLOR, HCKL.TITLE_FONT_STYLE, HCKL.TITLE_FONT_WEIGHT, HCKL.SUBTITLE, HCKL.SUBTITLE_TEXT, HCKL.SUBTITLE_FONT_SIZE, HCKL.SUBTITLE_FONT_COLOR, HCKL.SUBTITLE_FONT_STYLE, HCKL.SUBTITLE_FONT_WEIGHT, HCKL.SUBTITLE_STYLE, HCKL.LEGEND, HCKL.LEGEND_HALIGN, HCKL.LEGEND_VALIGN, HCKL.LEGEND_STATUS, HCKL.LEGEND_STYLE, HCKL.LEGEND_FONT_STYLE, HCKL.LEGEND_FONT_WEIGHT, HCKL.LEGEND_FONT_SIZE, HCKL.LEGEND_FONT_COLOR, HCKL.DATALABEL, HCKL.DATALABEL_ENABLED, HCKL.CREDITS, HCKL.COLORS, HCKL.TOOLTIP, HCKL.TOOLTIP_ENABLED];\n  chartTypeToHCKeys[C.RACEBAR] = [HCKL.CHART, HCKL.CHART_WIDTH, HCKL.CHART_HEIGHT, HCKL.RENDER_TO, HCKL.TYPE, HCKL.CHART_STYLE, HCKL.CHART_FONT_FAMILY, HCKL.BORDER_COLOR, HCKL.BACKGROUND_COLOR, HCKL.ANIMATION, HCKL.ANIMATION_DURATION, HCKL.TITLE, HCKL.TITLE_TEXT, HCKL.TITLE_STYLE, HCKL.TITLE_FONT_SIZE, HCKL.TITLE_FONT_COLOR, HCKL.TITLE_FONT_STYLE, HCKL.TITLE_FONT_WEIGHT, HCKL.SUBTITLE, HCKL.SUBTITLE_TEXT, HCKL.SUBTITLE_FONT_SIZE, HCKL.SUBTITLE_FONT_COLOR, HCKL.SUBTITLE_FONT_STYLE, HCKL.SUBTITLE_FONT_WEIGHT, HCKL.SUBTITLE_STYLE, HCKL.LEGEND, HCKL.LEGEND_HALIGN, HCKL.LEGEND_VALIGN, HCKL.LEGEND_STATUS, HCKL.LEGEND_STYLE, HCKL.LEGEND_FONT_STYLE, HCKL.LEGEND_FONT_WEIGHT, HCKL.LEGEND_FONT_SIZE, HCKL.LEGEND_FONT_COLOR, HCKL.DATALABEL, HCKL.DATALABEL_ENABLED, HCKL.HAXIS, HCKL.VAXIS, HCKL.CREDITS, HCKL.COLORS, HCKL.TOOLTIP, HCKL.TOOLTIP_ENABLED, HCKL.CAPTION, HCKL.CAPTION_ENABLED, HCKL.CAPTION_TEXT, HCKL.CAPTION_STYLE, HCKL.CAPTION_FONT_STYLE, HCKL.CAPTION_FONT_WEIGHT, HCKL.CAPTION_FONT_SIZE, HCKL.CAPTION_FONT_COLOR];\n  chartTypeToHCKeys[C.SCATTER] = [HCKL.CHART, HCKL.CHART_WIDTH, HCKL.CHART_HEIGHT, HCKL.RENDER_TO, HCKL.TYPE, HCKL.CHART_STYLE, HCKL.CHART_FONT_FAMILY, HCKL.BORDER_COLOR, HCKL.BACKGROUND_COLOR, HCKL.TITLE, HCKL.TITLE_TEXT, HCKL.TITLE_STYLE, HCKL.TITLE_FONT_SIZE, HCKL.TITLE_FONT_COLOR, HCKL.TITLE_FONT_STYLE, HCKL.TITLE_FONT_WEIGHT, HCKL.SUBTITLE, HCKL.SUBTITLE_TEXT, HCKL.SUBTITLE_FONT_SIZE, HCKL.SUBTITLE_FONT_COLOR, HCKL.SUBTITLE_FONT_STYLE, HCKL.SUBTITLE_FONT_WEIGHT, HCKL.SUBTITLE_STYLE, HCKL.LEGEND, HCKL.LEGEND_HALIGN, HCKL.LEGEND_VALIGN, HCKL.LEGEND_STATUS, HCKL.LEGEND_STYLE, HCKL.LEGEND_FONT_STYLE, HCKL.LEGEND_FONT_WEIGHT, HCKL.LEGEND_FONT_SIZE, HCKL.LEGEND_FONT_COLOR, HCKL.DATALABEL, HCKL.DATALABEL_ENABLED, HCKL.HAXIS, HCKL.VAXIS, HCKL.CREDITS, HCKL.COLORS, HCKL.TOOLTIP, HCKL.TOOLTIP_ENABLED, HCKL.INVERTED];\n  chartTypeToHCKeys[C.SCATTER_LINE] = [HCKL.CHART, HCKL.CHART_WIDTH, HCKL.CHART_HEIGHT, HCKL.RENDER_TO, HCKL.TYPE, HCKL.CHART_STYLE, HCKL.CHART_FONT_FAMILY, HCKL.BORDER_COLOR, HCKL.BACKGROUND_COLOR, HCKL.TITLE, HCKL.TITLE_TEXT, HCKL.TITLE_STYLE, HCKL.TITLE_FONT_SIZE, HCKL.TITLE_FONT_COLOR, HCKL.TITLE_FONT_STYLE, HCKL.TITLE_FONT_WEIGHT, HCKL.SUBTITLE, HCKL.SUBTITLE_TEXT, HCKL.SUBTITLE_FONT_SIZE, HCKL.SUBTITLE_FONT_COLOR, HCKL.SUBTITLE_FONT_STYLE, HCKL.SUBTITLE_FONT_WEIGHT, HCKL.SUBTITLE_STYLE, HCKL.LEGEND, HCKL.LEGEND_HALIGN, HCKL.LEGEND_VALIGN, HCKL.LEGEND_STATUS, HCKL.LEGEND_STYLE, HCKL.LEGEND_FONT_STYLE, HCKL.LEGEND_FONT_WEIGHT, HCKL.LEGEND_FONT_SIZE, HCKL.LEGEND_FONT_COLOR, HCKL.DATALABEL, HCKL.DATALABEL_ENABLED, HCKL.HAXIS, HCKL.VAXIS, HCKL.CREDITS, HCKL.COLORS, HCKL.TOOLTIP, HCKL.TOOLTIP_ENABLED, HCKL.INVERTED];\n  chartTypeToHCKeys[C.SCATTER_LINE_MARKERS] = [HCKL.CHART, HCKL.CHART_WIDTH, HCKL.CHART_HEIGHT, HCKL.RENDER_TO, HCKL.TYPE, HCKL.CHART_STYLE, HCKL.CHART_FONT_FAMILY, HCKL.BORDER_COLOR, HCKL.BACKGROUND_COLOR, HCKL.TITLE, HCKL.TITLE_TEXT, HCKL.TITLE_STYLE, HCKL.TITLE_FONT_SIZE, HCKL.TITLE_FONT_COLOR, HCKL.TITLE_FONT_STYLE, HCKL.TITLE_FONT_WEIGHT, HCKL.SUBTITLE, HCKL.SUBTITLE_TEXT, HCKL.SUBTITLE_FONT_SIZE, HCKL.SUBTITLE_FONT_COLOR, HCKL.SUBTITLE_FONT_STYLE, HCKL.SUBTITLE_FONT_WEIGHT, HCKL.SUBTITLE_STYLE, HCKL.LEGEND, HCKL.LEGEND_HALIGN, HCKL.LEGEND_VALIGN, HCKL.LEGEND_STATUS, HCKL.LEGEND_STYLE, HCKL.LEGEND_FONT_STYLE, HCKL.LEGEND_FONT_WEIGHT, HCKL.LEGEND_FONT_SIZE, HCKL.LEGEND_FONT_COLOR, HCKL.DATALABEL, HCKL.DATALABEL_ENABLED, HCKL.HAXIS, HCKL.VAXIS, HCKL.CREDITS, HCKL.COLORS, HCKL.TOOLTIP, HCKL.TOOLTIP_ENABLED, HCKL.INVERTED];\n  chartTypeToHCKeys[C.BUBBLE] = [HCKL.CHART, HCKL.CHART_WIDTH, HCKL.CHART_HEIGHT, HCKL.RENDER_TO, HCKL.TYPE, HCKL.CHART_STYLE, HCKL.CHART_FONT_FAMILY, HCKL.BORDER_COLOR, HCKL.BACKGROUND_COLOR, HCKL.TITLE, HCKL.TITLE_TEXT, HCKL.TITLE_STYLE, HCKL.TITLE_FONT_SIZE, HCKL.TITLE_FONT_COLOR, HCKL.TITLE_FONT_STYLE, HCKL.TITLE_FONT_WEIGHT, HCKL.SUBTITLE, HCKL.SUBTITLE_TEXT, HCKL.SUBTITLE_FONT_SIZE, HCKL.SUBTITLE_FONT_COLOR, HCKL.SUBTITLE_FONT_STYLE, HCKL.SUBTITLE_FONT_WEIGHT, HCKL.SUBTITLE_STYLE, HCKL.LEGEND, HCKL.LEGEND_HALIGN, HCKL.LEGEND_VALIGN, HCKL.LEGEND_STATUS, HCKL.LEGEND_STYLE, HCKL.LEGEND_FONT_STYLE, HCKL.LEGEND_FONT_WEIGHT, HCKL.LEGEND_FONT_SIZE, HCKL.LEGEND_FONT_COLOR, HCKL.DATALABEL, HCKL.DATALABEL_ENABLED, HCKL.HAXIS, HCKL.VAXIS, HCKL.CREDITS, HCKL.COLORS, HCKL.TOOLTIP, HCKL.TOOLTIP_ENABLED];\n  chartTypeToHCKeys[C.FUNNEL] = [HCKL.CHART, HCKL.CHART_WIDTH, HCKL.CHART_HEIGHT, HCKL.RENDER_TO, HCKL.TYPE, HCKL.CHART_STYLE, HCKL.CHART_FONT_FAMILY, HCKL.BORDER_COLOR, HCKL.BACKGROUND_COLOR, HCKL.TITLE, HCKL.TITLE_TEXT, HCKL.TITLE_STYLE, HCKL.TITLE_FONT_SIZE, HCKL.TITLE_FONT_COLOR, HCKL.TITLE_FONT_STYLE, HCKL.TITLE_FONT_WEIGHT, HCKL.SUBTITLE, HCKL.SUBTITLE_TEXT, HCKL.SUBTITLE_FONT_SIZE, HCKL.SUBTITLE_FONT_COLOR, HCKL.SUBTITLE_FONT_STYLE, HCKL.SUBTITLE_FONT_WEIGHT, HCKL.SUBTITLE_STYLE, HCKL.LEGEND, HCKL.LEGEND_HALIGN, HCKL.LEGEND_VALIGN, HCKL.LEGEND_STATUS, HCKL.LEGEND_STYLE, HCKL.LEGEND_FONT_STYLE, HCKL.LEGEND_FONT_WEIGHT, HCKL.LEGEND_FONT_SIZE, HCKL.LEGEND_FONT_COLOR, HCKL.DATALABEL, HCKL.DATALABEL_ENABLED, HCKL.CREDITS, HCKL.COLORS, HCKL.TOOLTIP, HCKL.TOOLTIP_ENABLED];\n  chartTypeToHCKeys[C.WEIGHTED_FUNNEL] = [HCKL.CHART, HCKL.CHART_WIDTH, HCKL.CHART_HEIGHT, HCKL.RENDER_TO, HCKL.TYPE, HCKL.CHART_STYLE, HCKL.CHART_FONT_FAMILY, HCKL.BORDER_COLOR, HCKL.BACKGROUND_COLOR, HCKL.TITLE, HCKL.TITLE_TEXT, HCKL.TITLE_STYLE, HCKL.TITLE_FONT_SIZE, HCKL.TITLE_FONT_COLOR, HCKL.TITLE_FONT_STYLE, HCKL.TITLE_FONT_WEIGHT, HCKL.SUBTITLE, HCKL.SUBTITLE_TEXT, HCKL.SUBTITLE_FONT_SIZE, HCKL.SUBTITLE_FONT_COLOR, HCKL.SUBTITLE_FONT_STYLE, HCKL.SUBTITLE_FONT_WEIGHT, HCKL.SUBTITLE_STYLE, HCKL.LEGEND, HCKL.LEGEND_HALIGN, HCKL.LEGEND_VALIGN, HCKL.LEGEND_STATUS, HCKL.LEGEND_STYLE, HCKL.LEGEND_FONT_STYLE, HCKL.LEGEND_FONT_WEIGHT, HCKL.LEGEND_FONT_SIZE, HCKL.LEGEND_FONT_COLOR, HCKL.DATALABEL, HCKL.DATALABEL_ENABLED, HCKL.HAXIS, HCKL.VAXIS, HCKL.CREDITS, HCKL.COLORS, HCKL.TOOLTIP, HCKL.TOOLTIP_ENABLED];\n  chartTypeToHCKeys[C.WORDCLOUD] = [HCKL.CHART, HCKL.CHART_WIDTH, HCKL.CHART_HEIGHT, HCKL.RENDER_TO, HCKL.TYPE, HCKL.CHART_STYLE, HCKL.CHART_FONT_FAMILY, HCKL.BORDER_COLOR, HCKL.BACKGROUND_COLOR, HCKL.TITLE, HCKL.TITLE_TEXT, HCKL.TITLE_STYLE, HCKL.TITLE_FONT_SIZE, HCKL.TITLE_FONT_COLOR, HCKL.TITLE_FONT_STYLE, HCKL.TITLE_FONT_WEIGHT, HCKL.SUBTITLE, HCKL.SUBTITLE_TEXT, HCKL.SUBTITLE_FONT_SIZE, HCKL.SUBTITLE_FONT_COLOR, HCKL.SUBTITLE_FONT_STYLE, HCKL.SUBTITLE_FONT_WEIGHT, HCKL.SUBTITLE_STYLE, HCKL.CREDITS, HCKL.COLORS, HCKL.TOOLTIP, HCKL.TOOLTIP_ENABLED];\n  chartTypeToHCKeys[C.BULLET_COL] = [HCKL.CHART, HCKL.CHART_WIDTH, HCKL.CHART_HEIGHT, HCKL.RENDER_TO, HCKL.TYPE, HCKL.CHART_STYLE, HCKL.CHART_FONT_FAMILY, HCKL.BORDER_COLOR, HCKL.BACKGROUND_COLOR, HCKL.TITLE, HCKL.TITLE_TEXT, HCKL.TITLE_STYLE, HCKL.TITLE_FONT_SIZE, HCKL.TITLE_FONT_COLOR, HCKL.TITLE_FONT_STYLE, HCKL.TITLE_FONT_WEIGHT, HCKL.SUBTITLE, HCKL.SUBTITLE_TEXT, HCKL.SUBTITLE_FONT_SIZE, HCKL.SUBTITLE_FONT_COLOR, HCKL.SUBTITLE_FONT_STYLE, HCKL.SUBTITLE_FONT_WEIGHT, HCKL.SUBTITLE_STYLE, HCKL.LEGEND, HCKL.LEGEND_HALIGN, HCKL.LEGEND_VALIGN, HCKL.LEGEND_STATUS, HCKL.LEGEND_STYLE, HCKL.LEGEND_FONT_STYLE, HCKL.LEGEND_FONT_WEIGHT, HCKL.LEGEND_FONT_SIZE, HCKL.LEGEND_FONT_COLOR, HCKL.DATALABEL, HCKL.DATALABEL_ENABLED, HCKL.HAXIS, HCKL.VAXIS, HCKL.CREDITS, HCKL.COLORS, HCKL.TOOLTIP, HCKL.TOOLTIP_ENABLED];\n  chartTypeToHCKeys[C.BULLET_BAR] = [HCKL.CHART, HCKL.CHART_WIDTH, HCKL.CHART_HEIGHT, HCKL.RENDER_TO, HCKL.TYPE, HCKL.CHART_STYLE, HCKL.CHART_FONT_FAMILY, HCKL.BORDER_COLOR, HCKL.BACKGROUND_COLOR, HCKL.TITLE, HCKL.TITLE_TEXT, HCKL.TITLE_STYLE, HCKL.TITLE_FONT_SIZE, HCKL.TITLE_FONT_COLOR, HCKL.TITLE_FONT_STYLE, HCKL.TITLE_FONT_WEIGHT, HCKL.SUBTITLE, HCKL.SUBTITLE_TEXT, HCKL.SUBTITLE_FONT_SIZE, HCKL.SUBTITLE_FONT_COLOR, HCKL.SUBTITLE_FONT_STYLE, HCKL.SUBTITLE_FONT_WEIGHT, HCKL.SUBTITLE_STYLE, HCKL.LEGEND, HCKL.LEGEND_HALIGN, HCKL.LEGEND_VALIGN, HCKL.LEGEND_STATUS, HCKL.LEGEND_STYLE, HCKL.LEGEND_FONT_STYLE, HCKL.LEGEND_FONT_WEIGHT, HCKL.LEGEND_FONT_SIZE, HCKL.LEGEND_FONT_COLOR, HCKL.DATALABEL, HCKL.DATALABEL_ENABLED, HCKL.HAXIS, HCKL.VAXIS, HCKL.CREDITS, HCKL.COLORS, HCKL.TOOLTIP, HCKL.TOOLTIP_ENABLED];\n  chartTypeToHCKeys[C.HISTOGRAM] = [HCKL.CHART, HCKL.CHART_WIDTH, HCKL.CHART_HEIGHT, HCKL.RENDER_TO, HCKL.TYPE, HCKL.CHART_STYLE, HCKL.CHART_FONT_FAMILY, HCKL.BORDER_COLOR, HCKL.BACKGROUND_COLOR, HCKL.TITLE, HCKL.TITLE_TEXT, HCKL.TITLE_STYLE, HCKL.TITLE_FONT_SIZE, HCKL.TITLE_FONT_COLOR, HCKL.TITLE_FONT_STYLE, HCKL.TITLE_FONT_WEIGHT, HCKL.SUBTITLE, HCKL.SUBTITLE_TEXT, HCKL.SUBTITLE_FONT_SIZE, HCKL.SUBTITLE_FONT_COLOR, HCKL.SUBTITLE_FONT_STYLE, HCKL.SUBTITLE_FONT_WEIGHT, HCKL.SUBTITLE_STYLE, HCKL.LEGEND, HCKL.LEGEND_HALIGN, HCKL.LEGEND_VALIGN, HCKL.LEGEND_STATUS, HCKL.LEGEND_STYLE, HCKL.LEGEND_FONT_STYLE, HCKL.LEGEND_FONT_WEIGHT, HCKL.LEGEND_FONT_SIZE, HCKL.LEGEND_FONT_COLOR, HCKL.DATALABEL, HCKL.DATALABEL_ENABLED, HCKL.HAXIS, HCKL.VAXIS, HCKL.CREDITS, HCKL.COLORS, HCKL.TOOLTIP, HCKL.TOOLTIP_ENABLED];\n  chartTypeToHCKeys[C.LINE_TIME_SERIES] = [HCKL.CHART, HCKL.CHART_WIDTH, HCKL.CHART_HEIGHT, HCKL.RENDER_TO, HCKL.TYPE, HCKL.CHART_STYLE, HCKL.CHART_FONT_FAMILY, HCKL.BORDER_COLOR, HCKL.BACKGROUND_COLOR, HCKL.TITLE, HCKL.TITLE_TEXT, HCKL.TITLE_STYLE, HCKL.TITLE_FONT_SIZE, HCKL.TITLE_FONT_COLOR, HCKL.TITLE_FONT_STYLE, HCKL.TITLE_FONT_WEIGHT, HCKL.SUBTITLE, HCKL.SUBTITLE_TEXT, HCKL.SUBTITLE_FONT_SIZE, HCKL.SUBTITLE_FONT_COLOR, HCKL.SUBTITLE_FONT_STYLE, HCKL.SUBTITLE_FONT_WEIGHT, HCKL.SUBTITLE_STYLE, HCKL.LEGEND, HCKL.LEGEND_HALIGN, HCKL.LEGEND_VALIGN, HCKL.LEGEND_STATUS, HCKL.LEGEND_STYLE, HCKL.LEGEND_FONT_STYLE, HCKL.LEGEND_FONT_WEIGHT, HCKL.LEGEND_FONT_SIZE, HCKL.LEGEND_FONT_COLOR, HCKL.DATALABEL, HCKL.DATALABEL_ENABLED, HCKL.HAXIS, HCKL.VAXIS, HCKL.CREDITS, HCKL.COLORS, HCKL.TOOLTIP, HCKL.TOOLTIP_ENABLED, HCKL.INVERTED];\n  chartTypeToHCKeys[C.AREA_TIME_SERIES] = [HCKL.CHART, HCKL.CHART_WIDTH, HCKL.CHART_HEIGHT, HCKL.RENDER_TO, HCKL.TYPE, HCKL.CHART_STYLE, HCKL.CHART_FONT_FAMILY, HCKL.BORDER_COLOR, HCKL.BACKGROUND_COLOR, HCKL.TITLE, HCKL.TITLE_TEXT, HCKL.TITLE_STYLE, HCKL.TITLE_FONT_SIZE, HCKL.TITLE_FONT_COLOR, HCKL.TITLE_FONT_STYLE, HCKL.TITLE_FONT_WEIGHT, HCKL.SUBTITLE, HCKL.SUBTITLE_TEXT, HCKL.SUBTITLE_FONT_SIZE, HCKL.SUBTITLE_FONT_COLOR, HCKL.SUBTITLE_FONT_STYLE, HCKL.SUBTITLE_FONT_WEIGHT, HCKL.SUBTITLE_STYLE, HCKL.LEGEND, HCKL.LEGEND_HALIGN, HCKL.LEGEND_VALIGN, HCKL.LEGEND_STATUS, HCKL.LEGEND_STYLE, HCKL.LEGEND_FONT_STYLE, HCKL.LEGEND_FONT_WEIGHT, HCKL.LEGEND_FONT_SIZE, HCKL.LEGEND_FONT_COLOR, HCKL.DATALABEL, HCKL.DATALABEL_ENABLED, HCKL.HAXIS, HCKL.VAXIS, HCKL.CREDITS, HCKL.COLORS, HCKL.TOOLTIP, HCKL.TOOLTIP_ENABLED, HCKL.INVERTED];\n  chartTypeToHCKeys[C.COMBO] = [HCKL.CHART, HCKL.CHART_WIDTH, HCKL.CHART_HEIGHT, HCKL.RENDER_TO, HCKL.TYPE, HCKL.CHART_STYLE, HCKL.CHART_FONT_FAMILY, HCKL.BORDER_COLOR, HCKL.BACKGROUND_COLOR, HCKL.TITLE, HCKL.TITLE_TEXT, HCKL.TITLE_STYLE, HCKL.TITLE_FONT_SIZE, HCKL.TITLE_FONT_COLOR, HCKL.TITLE_FONT_STYLE, HCKL.TITLE_FONT_WEIGHT, HCKL.SUBTITLE, HCKL.SUBTITLE_TEXT, HCKL.SUBTITLE_FONT_SIZE, HCKL.SUBTITLE_FONT_COLOR, HCKL.SUBTITLE_FONT_STYLE, HCKL.SUBTITLE_FONT_WEIGHT, HCKL.SUBTITLE_STYLE, HCKL.LEGEND, HCKL.LEGEND_HALIGN, HCKL.LEGEND_VALIGN, HCKL.LEGEND_STATUS, HCKL.LEGEND_STYLE, HCKL.LEGEND_FONT_STYLE, HCKL.LEGEND_FONT_WEIGHT, HCKL.LEGEND_FONT_SIZE, HCKL.LEGEND_FONT_COLOR, HCKL.DATALABEL, HCKL.DATALABEL_ENABLED, HCKL.HAXIS, HCKL.VAXIS, HCKL.CREDITS, HCKL.COLORS, HCKL.TOOLTIP, HCKL.TOOLTIP_ENABLED];\n  /* Map Chart type to Highcharts chart type */\n\n  var chartTypeToHCType = HCMaps.chartTypeToHCType = {};\n  chartTypeToHCType[C.COL] = HCConstants.COL;\n  chartTypeToHCType[C.GROUPED_COL] = HCConstants.COL;\n  chartTypeToHCType[C.STACKED_COL] = HCConstants.COL;\n  chartTypeToHCType[C.STACKED_PERCENT_COL] = HCConstants.COL;\n  chartTypeToHCType[C.BAR] = HCConstants.BAR;\n  chartTypeToHCType[C.GROUPED_BAR] = HCConstants.BAR;\n  chartTypeToHCType[C.STACKED_BAR] = HCConstants.BAR;\n  chartTypeToHCType[C.STACKED_PERCENT_BAR] = HCConstants.BAR;\n  chartTypeToHCType[C.AREA] = HCConstants.AREA;\n  chartTypeToHCType[C.AREA_SPLINE] = HCConstants.AREA_SPLINE;\n  chartTypeToHCType[C.STACKED_PERCENT_AREA] = HCConstants.AREA;\n  chartTypeToHCType[C.STACKED_AREA] = HCConstants.AREA;\n  chartTypeToHCType[C.LINE] = HCConstants.LINE;\n  chartTypeToHCType[C.SPLINE] = HCConstants.SPLINE;\n  chartTypeToHCType[C.STEP_LINE] = HCConstants.LINE;\n  chartTypeToHCType[C.PIE] = HCConstants.PIE;\n  chartTypeToHCType[C.SEMI_PIE] = HCConstants.PIE;\n  chartTypeToHCType[C.DONUT] = HCConstants.PIE;\n  chartTypeToHCType[C.SEMI_DONUT] = HCConstants.PIE;\n  chartTypeToHCType[C.RACEBAR] = HCConstants.RACEBAR;\n  chartTypeToHCType[C.SCATTER] = HCConstants.SCATTER;\n  chartTypeToHCType[C.SCATTER_LINE] = HCConstants.SCATTER;\n  chartTypeToHCType[C.SCATTER_LINE_MARKERS] = HCConstants.SCATTER;\n  chartTypeToHCType[C.BUBBLE] = HCConstants.BUBBLE;\n  chartTypeToHCType[C.FUNNEL] = HCConstants.FUNNEL;\n  chartTypeToHCType[C.WEIGHTED_FUNNEL] = HCConstants.WEIGHTED_FUNNEL;\n  chartTypeToHCType[C.WORDCLOUD] = HCConstants.WORDCLOUD;\n  chartTypeToHCType[C.BULLET_COL] = HCConstants.BULLET;\n  chartTypeToHCType[C.BULLET_BAR] = HCConstants.BULLET;\n  chartTypeToHCType[C.HISTOGRAM] = HCConstants.COL;\n  chartTypeToHCType[C.LINE_TIME_SERIES] = HCConstants.LINE;\n  chartTypeToHCType[C.AREA_TIME_SERIES] = HCConstants.AREA;\n  chartTypeToHCType[C.COMBO] = HCConstants.LINE;\n  var chartTypeToSeriesKeys = HCMaps.chartTypeToSeriesKeys = {};\n  chartTypeToSeriesKeys[C.COL] = [HCKL.DATALABEL, HCKL.DATALABEL_ENABLED, HCKL.DATALABEL_STYLE, HCKL.DATALABEL_FONT_STYLE, HCKL.DATALABEL_FONT_WEIGHT, HCKL.DATALABEL_FONT_SIZE, HCKL.DATALABEL_FONT_COLOR, HCKL.DATALABEL_POSITION, HCKL.DATALABEL_FORMAT, HCKL.SERIES_COLOR, HCKL.DATA_COLORS, HCKL.THRESHOLD_VALUE, HCKL.NEGATIVE_COLOR, HCKL.SERIES_BORDER_COLOR, HCKL.DATA_COLOR, HCKL.DATA_BORDER_COLOR];\n  chartTypeToSeriesKeys[C.GROUPED_COL] = [HCKL.DATALABEL, HCKL.DATALABEL_ENABLED, HCKL.DATALABEL_STYLE, HCKL.DATALABEL_FONT_STYLE, HCKL.DATALABEL_FONT_WEIGHT, HCKL.DATALABEL_FONT_SIZE, HCKL.DATALABEL_FONT_COLOR, HCKL.DATALABEL_POSITION, HCKL.DATALABEL_FORMAT, HCKL.SERIES_COLOR, HCKL.DATA_COLORS, HCKL.THRESHOLD_VALUE, HCKL.NEGATIVE_COLOR, HCKL.SERIES_BORDER_COLOR, HCKL.DATA_COLOR, HCKL.DATA_BORDER_COLOR];\n  chartTypeToSeriesKeys[C.STACKED_COL] = [HCKL.DATALABEL, HCKL.DATALABEL_ENABLED, HCKL.DATALABEL_STYLE, HCKL.DATALABEL_FONT_STYLE, HCKL.DATALABEL_FONT_WEIGHT, HCKL.DATALABEL_FONT_SIZE, HCKL.DATALABEL_FONT_COLOR, HCKL.DATALABEL_POSITION, HCKL.DATALABEL_FORMAT, HCKL.SERIES_COLOR, HCKL.DATA_COLORS, HCKL.THRESHOLD_VALUE, HCKL.NEGATIVE_COLOR, HCKL.SERIES_BORDER_COLOR, HCKL.DATA_COLOR, HCKL.DATA_BORDER_COLOR];\n  chartTypeToSeriesKeys[C.STACKED_PERCENT_COL] = [HCKL.DATALABEL, HCKL.DATALABEL_ENABLED, HCKL.DATALABEL_STYLE, HCKL.DATALABEL_FONT_STYLE, HCKL.DATALABEL_FONT_WEIGHT, HCKL.DATALABEL_FONT_SIZE, HCKL.DATALABEL_FONT_COLOR, HCKL.DATALABEL_POSITION, HCKL.DATALABEL_FORMAT, HCKL.SERIES_COLOR, HCKL.DATA_COLORS, HCKL.THRESHOLD_VALUE, HCKL.NEGATIVE_COLOR, HCKL.SERIES_BORDER_COLOR, HCKL.DATA_COLOR, HCKL.DATA_BORDER_COLOR];\n  chartTypeToSeriesKeys[C.BAR] = [HCKL.DATALABEL, HCKL.DATALABEL_ENABLED, HCKL.DATALABEL_STYLE, HCKL.DATALABEL_FONT_STYLE, HCKL.DATALABEL_FONT_WEIGHT, HCKL.DATALABEL_FONT_SIZE, HCKL.DATALABEL_FONT_COLOR, HCKL.DATALABEL_POSITION, HCKL.DATALABEL_FORMAT, HCKL.SERIES_COLOR, HCKL.DATA_COLORS, HCKL.THRESHOLD_VALUE, HCKL.NEGATIVE_COLOR, HCKL.SERIES_BORDER_COLOR, HCKL.DATA_COLOR, HCKL.DATA_BORDER_COLOR];\n  chartTypeToSeriesKeys[C.GROUPED_BAR] = [HCKL.DATALABEL, HCKL.DATALABEL_ENABLED, HCKL.DATALABEL_STYLE, HCKL.DATALABEL_FONT_STYLE, HCKL.DATALABEL_FONT_WEIGHT, HCKL.DATALABEL_FONT_SIZE, HCKL.DATALABEL_FONT_COLOR, HCKL.DATALABEL_POSITION, HCKL.DATALABEL_FORMAT, HCKL.SERIES_COLOR, HCKL.DATA_COLORS, HCKL.THRESHOLD_VALUE, HCKL.NEGATIVE_COLOR, HCKL.SERIES_BORDER_COLOR, HCKL.DATA_COLOR, HCKL.DATA_BORDER_COLOR];\n  chartTypeToSeriesKeys[C.STACKED_BAR] = [HCKL.DATALABEL, HCKL.DATALABEL_ENABLED, HCKL.DATALABEL_STYLE, HCKL.DATALABEL_FONT_STYLE, HCKL.DATALABEL_FONT_WEIGHT, HCKL.DATALABEL_FONT_SIZE, HCKL.DATALABEL_FONT_COLOR, HCKL.DATALABEL_POSITION, HCKL.DATALABEL_FORMAT, HCKL.SERIES_COLOR, HCKL.DATA_COLORS, HCKL.THRESHOLD_VALUE, HCKL.NEGATIVE_COLOR, HCKL.SERIES_BORDER_COLOR, HCKL.DATA_COLOR, HCKL.DATA_BORDER_COLOR];\n  chartTypeToSeriesKeys[C.STACKED_PERCENT_BAR] = [HCKL.DATALABEL, HCKL.DATALABEL_ENABLED, HCKL.DATALABEL_STYLE, HCKL.DATALABEL_FONT_STYLE, HCKL.DATALABEL_FONT_WEIGHT, HCKL.DATALABEL_FONT_SIZE, HCKL.DATALABEL_FONT_COLOR, HCKL.DATALABEL_POSITION, HCKL.DATALABEL_FORMAT, HCKL.SERIES_COLOR, HCKL.DATA_COLORS, HCKL.THRESHOLD_VALUE, HCKL.NEGATIVE_COLOR, HCKL.SERIES_BORDER_COLOR, HCKL.DATA_COLOR, HCKL.DATA_BORDER_COLOR];\n  chartTypeToSeriesKeys[C.RACEBAR] = [HCKL.DATALABEL, HCKL.DATALABEL_ENABLED, HCKL.DATALABEL_STYLE, HCKL.DATALABEL_FONT_STYLE, HCKL.DATALABEL_FONT_WEIGHT, HCKL.DATALABEL_FONT_SIZE, HCKL.DATALABEL_FONT_COLOR, HCKL.DATALABEL_POSITION, HCKL.DATALABEL_FORMAT, HCKL.SERIES_COLOR, HCKL.DATA_COLORS, HCKL.THRESHOLD_VALUE, HCKL.NEGATIVE_COLOR, HCKL.SERIES_BORDER_COLOR, HCKL.DATA_COLOR, HCKL.DATA_BORDER_COLOR, HCKL.SORT_ORDER];\n  chartTypeToSeriesKeys[C.LINE] = [HCKL.DATALABEL, HCKL.DATALABEL_ENABLED, HCKL.DATALABEL_STYLE, HCKL.DATALABEL_FONT_STYLE, HCKL.DATALABEL_FONT_WEIGHT, HCKL.DATALABEL_FONT_SIZE, HCKL.DATALABEL_FONT_COLOR, HCKL.DATALABEL_POSITION, HCKL.DATALABEL_FORMAT, HCKL.SERIES_COLOR, HCKL.DATA_COLORS, HCKL.THRESHOLD_VALUE, HCKL.NEGATIVE_COLOR, HCKL.MARKER, HCKL.MARKER_STATUS, HCKL.MARKER_SHAPE, HCKL.MARKER_SIZE, HCKL.MARKER_COLOR, HCKL.MARKER_BORDER_COLOR, HCKL.LINE_TYPE];\n  chartTypeToSeriesKeys[C.SPLINE] = [HCKL.DATALABEL, HCKL.DATALABEL_ENABLED, HCKL.DATALABEL_STYLE, HCKL.DATALABEL_FONT_STYLE, HCKL.DATALABEL_FONT_WEIGHT, HCKL.DATALABEL_FONT_SIZE, HCKL.DATALABEL_FONT_COLOR, HCKL.DATALABEL_POSITION, HCKL.DATALABEL_FORMAT, HCKL.SERIES_COLOR, HCKL.DATA_COLORS, HCKL.THRESHOLD_VALUE, HCKL.NEGATIVE_COLOR, HCKL.MARKER, HCKL.MARKER_STATUS, HCKL.MARKER_SHAPE, HCKL.MARKER_SIZE, HCKL.MARKER_COLOR, HCKL.MARKER_BORDER_COLOR, HCKL.LINE_TYPE];\n  chartTypeToSeriesKeys[C.STEP_LINE] = [HCKL.DATALABEL, HCKL.DATALABEL_ENABLED, HCKL.DATALABEL_STYLE, HCKL.DATALABEL_FONT_STYLE, HCKL.DATALABEL_FONT_WEIGHT, HCKL.DATALABEL_FONT_SIZE, HCKL.DATALABEL_FONT_COLOR, HCKL.DATALABEL_POSITION, HCKL.DATALABEL_FORMAT, HCKL.SERIES_COLOR, HCKL.DATA_COLORS, HCKL.THRESHOLD_VALUE, HCKL.NEGATIVE_COLOR, HCKL.MARKER, HCKL.MARKER_STATUS, HCKL.MARKER_SHAPE, HCKL.MARKER_SIZE, HCKL.MARKER_COLOR, HCKL.MARKER_BORDER_COLOR, HCKL.LINE_TYPE];\n  chartTypeToSeriesKeys[C.AREA] = [HCKL.DATALABEL, HCKL.DATALABEL_ENABLED, HCKL.DATALABEL_STYLE, HCKL.DATALABEL_FONT_STYLE, HCKL.DATALABEL_FONT_WEIGHT, HCKL.DATALABEL_FONT_SIZE, HCKL.DATALABEL_FONT_COLOR, HCKL.DATALABEL_POSITION, HCKL.DATALABEL_FORMAT, HCKL.SERIES_COLOR, HCKL.DATA_COLORS, HCKL.THRESHOLD_VALUE, HCKL.NEGATIVE_COLOR, HCKL.MARKER, HCKL.MARKER_STATUS, HCKL.MARKER_SHAPE, HCKL.MARKER_SIZE, HCKL.MARKER_COLOR, HCKL.MARKER_BORDER_COLOR, HCKL.LINE_TYPE, HCKL.AREA_OPACITY];\n  chartTypeToSeriesKeys[C.AREA_SPLINE] = [HCKL.DATALABEL, HCKL.DATALABEL_ENABLED, HCKL.DATALABEL_STYLE, HCKL.DATALABEL_FONT_STYLE, HCKL.DATALABEL_FONT_WEIGHT, HCKL.DATALABEL_FONT_SIZE, HCKL.DATALABEL_FONT_COLOR, HCKL.DATALABEL_POSITION, HCKL.DATALABEL_FORMAT, HCKL.SERIES_COLOR, HCKL.DATA_COLORS, HCKL.THRESHOLD_VALUE, HCKL.NEGATIVE_COLOR, HCKL.MARKER, HCKL.MARKER_STATUS, HCKL.MARKER_SHAPE, HCKL.MARKER_SIZE, HCKL.MARKER_COLOR, HCKL.MARKER_BORDER_COLOR, HCKL.LINE_TYPE, HCKL.AREA_OPACITY];\n  chartTypeToSeriesKeys[C.STACKED_AREA] = [HCKL.DATALABEL, HCKL.DATALABEL_ENABLED, HCKL.DATALABEL_STYLE, HCKL.DATALABEL_FONT_STYLE, HCKL.DATALABEL_FONT_WEIGHT, HCKL.DATALABEL_FONT_SIZE, HCKL.DATALABEL_FONT_COLOR, HCKL.DATALABEL_POSITION, HCKL.DATALABEL_FORMAT, HCKL.SERIES_COLOR, HCKL.DATA_COLORS, HCKL.THRESHOLD_VALUE, HCKL.NEGATIVE_COLOR, HCKL.MARKER, HCKL.MARKER_STATUS, HCKL.MARKER_SHAPE, HCKL.MARKER_SIZE, HCKL.MARKER_COLOR, HCKL.MARKER_BORDER_COLOR, HCKL.LINE_TYPE, HCKL.AREA_OPACITY];\n  chartTypeToSeriesKeys[C.STACKED_PERCENT_AREA] = [HCKL.DATALABEL, HCKL.DATALABEL_ENABLED, HCKL.DATALABEL_STYLE, HCKL.DATALABEL_FONT_STYLE, HCKL.DATALABEL_FONT_WEIGHT, HCKL.DATALABEL_FONT_SIZE, HCKL.DATALABEL_FONT_COLOR, HCKL.DATALABEL_POSITION, HCKL.DATALABEL_FORMAT, HCKL.SERIES_COLOR, HCKL.DATA_COLORS, HCKL.THRESHOLD_VALUE, HCKL.NEGATIVE_COLOR, HCKL.MARKER, HCKL.MARKER_STATUS, HCKL.MARKER_SHAPE, HCKL.MARKER_SIZE, HCKL.MARKER_COLOR, HCKL.MARKER_BORDER_COLOR, HCKL.LINE_TYPE, HCKL.AREA_OPACITY];\n  chartTypeToSeriesKeys[C.PIE] = [HCKL.DATALABEL, HCKL.DATALABEL_ENABLED, HCKL.DATALABEL_STYLE, HCKL.DATALABEL_FONT_STYLE, HCKL.DATALABEL_FONT_WEIGHT, HCKL.DATALABEL_FONT_SIZE, HCKL.DATALABEL_FONT_COLOR, HCKL.DATALABEL_POSITION, HCKL.DATALABEL_FORMAT, HCKL.SERIES_COLOR, HCKL.DATA_COLORS, HCKL.THRESHOLD_VALUE, HCKL.NEGATIVE_COLOR, HCKL.SERIES_BORDER_COLOR, HCKL.DATA_COLOR, HCKL.DATA_BORDER_COLOR, HCKL.START_ANGLE];\n  chartTypeToSeriesKeys[C.SEMI_PIE] = [HCKL.DATALABEL, HCKL.DATALABEL_ENABLED, HCKL.DATALABEL_STYLE, HCKL.DATALABEL_FONT_STYLE, HCKL.DATALABEL_FONT_WEIGHT, HCKL.DATALABEL_FONT_SIZE, HCKL.DATALABEL_FONT_COLOR, HCKL.DATALABEL_POSITION, HCKL.DATALABEL_FORMAT, HCKL.SERIES_COLOR, HCKL.DATA_COLORS, HCKL.THRESHOLD_VALUE, HCKL.NEGATIVE_COLOR, HCKL.SERIES_BORDER_COLOR, HCKL.DATA_COLOR, HCKL.DATA_BORDER_COLOR, HCKL.START_ANGLE];\n  chartTypeToSeriesKeys[C.DONUT] = [HCKL.DATALABEL, HCKL.DATALABEL_ENABLED, HCKL.DATALABEL_STYLE, HCKL.DATALABEL_FONT_STYLE, HCKL.DATALABEL_FONT_WEIGHT, HCKL.DATALABEL_FONT_SIZE, HCKL.DATALABEL_FONT_COLOR, HCKL.DATALABEL_POSITION, HCKL.DATALABEL_FORMAT, HCKL.SERIES_COLOR, HCKL.DATA_COLORS, HCKL.THRESHOLD_VALUE, HCKL.NEGATIVE_COLOR, HCKL.SERIES_BORDER_COLOR, HCKL.DATA_COLOR, HCKL.DATA_BORDER_COLOR, HCKL.START_ANGLE];\n  chartTypeToSeriesKeys[C.SEMI_DONUT] = [HCKL.DATALABEL, HCKL.DATALABEL_ENABLED, HCKL.DATALABEL_STYLE, HCKL.DATALABEL_FONT_STYLE, HCKL.DATALABEL_FONT_WEIGHT, HCKL.DATALABEL_FONT_SIZE, HCKL.DATALABEL_FONT_COLOR, HCKL.DATALABEL_POSITION, HCKL.DATALABEL_FORMAT, HCKL.SERIES_COLOR, HCKL.DATA_COLORS, HCKL.THRESHOLD_VALUE, HCKL.NEGATIVE_COLOR, HCKL.SERIES_BORDER_COLOR, HCKL.DATA_COLOR, HCKL.DATA_BORDER_COLOR, HCKL.START_ANGLE];\n  chartTypeToSeriesKeys[C.WORDCLOUD] = [HCKL.DATALABEL, HCKL.DATALABEL_ENABLED, HCKL.DATALABEL_STYLE, HCKL.DATALABEL_FONT_STYLE, HCKL.DATALABEL_FONT_WEIGHT, HCKL.DATALABEL_FONT_SIZE, HCKL.DATALABEL_FONT_COLOR, HCKL.DATALABEL_POSITION, HCKL.DATALABEL_FORMAT, HCKL.SERIES_COLOR, HCKL.DATA_COLORS, HCKL.THRESHOLD_VALUE, HCKL.NEGATIVE_COLOR];\n  chartTypeToSeriesKeys[C.SCATTER] = [HCKL.DATALABEL, HCKL.DATALABEL_ENABLED, HCKL.DATALABEL_STYLE, HCKL.DATALABEL_FONT_STYLE, HCKL.DATALABEL_FONT_WEIGHT, HCKL.DATALABEL_FONT_SIZE, HCKL.DATALABEL_FONT_COLOR, HCKL.DATALABEL_POSITION, HCKL.DATALABEL_FORMAT, HCKL.SERIES_COLOR, HCKL.DATA_COLORS, HCKL.THRESHOLD_VALUE, HCKL.NEGATIVE_COLOR, HCKL.MARKER, HCKL.MARKER_STATUS, HCKL.MARKER_SHAPE, HCKL.MARKER_SIZE, HCKL.MARKER_COLOR, HCKL.MARKER_BORDER_COLOR, HCKL.LINE_TYPE];\n  chartTypeToSeriesKeys[C.SCATTER_LINE] = [HCKL.DATALABEL, HCKL.DATALABEL_ENABLED, HCKL.DATALABEL_STYLE, HCKL.DATALABEL_FONT_STYLE, HCKL.DATALABEL_FONT_WEIGHT, HCKL.DATALABEL_FONT_SIZE, HCKL.DATALABEL_FONT_COLOR, HCKL.DATALABEL_POSITION, HCKL.DATALABEL_FORMAT, HCKL.SERIES_COLOR, HCKL.DATA_COLORS, HCKL.THRESHOLD_VALUE, HCKL.NEGATIVE_COLOR, HCKL.MARKER, HCKL.MARKER_STATUS, HCKL.MARKER_SHAPE, HCKL.MARKER_SIZE, HCKL.MARKER_COLOR, HCKL.MARKER_BORDER_COLOR, HCKL.LINE_TYPE];\n  chartTypeToSeriesKeys[C.SCATTER_LINE_MARKERS] = [HCKL.DATALABEL, HCKL.DATALABEL_ENABLED, HCKL.DATALABEL_STYLE, HCKL.DATALABEL_FONT_STYLE, HCKL.DATALABEL_FONT_WEIGHT, HCKL.DATALABEL_FONT_SIZE, HCKL.DATALABEL_FONT_COLOR, HCKL.DATALABEL_POSITION, HCKL.DATALABEL_FORMAT, HCKL.SERIES_COLOR, HCKL.DATA_COLORS, HCKL.THRESHOLD_VALUE, HCKL.NEGATIVE_COLOR, HCKL.MARKER, HCKL.MARKER_STATUS, HCKL.MARKER_SHAPE, HCKL.MARKER_SIZE, HCKL.MARKER_COLOR, HCKL.MARKER_BORDER_COLOR, HCKL.LINE_TYPE];\n  chartTypeToSeriesKeys[C.BUBBLE] = [HCKL.DATALABEL, HCKL.DATALABEL_ENABLED, HCKL.DATALABEL_STYLE, HCKL.DATALABEL_FONT_STYLE, HCKL.DATALABEL_FONT_WEIGHT, HCKL.DATALABEL_FONT_SIZE, HCKL.DATALABEL_FONT_COLOR, HCKL.DATALABEL_POSITION, HCKL.DATALABEL_FORMAT, HCKL.SERIES_COLOR, HCKL.DATA_COLORS, HCKL.THRESHOLD_VALUE, HCKL.NEGATIVE_COLOR];\n  chartTypeToSeriesKeys[C.FUNNEL] = [HCKL.DATALABEL, HCKL.DATALABEL_ENABLED, HCKL.DATALABEL_STYLE, HCKL.DATALABEL_FONT_STYLE, HCKL.DATALABEL_FONT_WEIGHT, HCKL.DATALABEL_FONT_SIZE, HCKL.DATALABEL_FONT_COLOR, HCKL.DATALABEL_POSITION, HCKL.DATALABEL_FORMAT, HCKL.SERIES_COLOR, HCKL.DATA_COLORS, HCKL.THRESHOLD_VALUE, HCKL.NEGATIVE_COLOR, HCKL.SERIES_BORDER_COLOR, HCKL.DATA_COLOR, HCKL.DATA_BORDER_COLOR];\n  chartTypeToSeriesKeys[C.WEIGHTED_FUNNEL] = [HCKL.DATALABEL, HCKL.DATALABEL_ENABLED, HCKL.DATALABEL_STYLE, HCKL.DATALABEL_FONT_STYLE, HCKL.DATALABEL_FONT_WEIGHT, HCKL.DATALABEL_FONT_SIZE, HCKL.DATALABEL_FONT_COLOR, HCKL.DATALABEL_POSITION, HCKL.DATALABEL_FORMAT, HCKL.SERIES_COLOR, HCKL.DATA_COLORS, HCKL.THRESHOLD_VALUE, HCKL.NEGATIVE_COLOR, HCKL.SERIES_BORDER_COLOR, HCKL.DATA_COLOR, HCKL.DATA_BORDER_COLOR];\n  chartTypeToSeriesKeys[C.BULLET_COL] = [HCKL.DATALABEL, HCKL.DATALABEL_ENABLED, HCKL.DATALABEL_STYLE, HCKL.DATALABEL_FONT_STYLE, HCKL.DATALABEL_FONT_WEIGHT, HCKL.DATALABEL_FONT_SIZE, HCKL.DATALABEL_FONT_COLOR, HCKL.DATALABEL_POSITION, HCKL.DATALABEL_FORMAT, HCKL.SERIES_COLOR, HCKL.DATA_COLORS, HCKL.THRESHOLD_VALUE, HCKL.NEGATIVE_COLOR, HCKL.SERIES_BORDER_COLOR, HCKL.DATA_COLOR, HCKL.DATA_BORDER_COLOR, HCKL.TARGET_COLOR, HCKL.TARGET_OPTIONS, HCKL.TARGET_COLOR];\n  chartTypeToSeriesKeys[C.BULLET_BAR] = [HCKL.DATALABEL, HCKL.DATALABEL_ENABLED, HCKL.DATALABEL_STYLE, HCKL.DATALABEL_FONT_STYLE, HCKL.DATALABEL_FONT_WEIGHT, HCKL.DATALABEL_FONT_SIZE, HCKL.DATALABEL_FONT_COLOR, HCKL.DATALABEL_POSITION, HCKL.DATALABEL_FORMAT, HCKL.SERIES_COLOR, HCKL.DATA_COLORS, HCKL.THRESHOLD_VALUE, HCKL.NEGATIVE_COLOR, HCKL.SERIES_BORDER_COLOR, HCKL.DATA_COLOR, HCKL.DATA_BORDER_COLOR, HCKL.TARGET_COLOR, HCKL.TARGET_OPTIONS, HCKL.TARGET_COLOR];\n  chartTypeToSeriesKeys[C.HISTOGRAM] = [HCKL.DATALABEL, HCKL.DATALABEL_ENABLED, HCKL.DATALABEL_STYLE, HCKL.DATALABEL_FONT_STYLE, HCKL.DATALABEL_FONT_WEIGHT, HCKL.DATALABEL_FONT_SIZE, HCKL.DATALABEL_FONT_COLOR, HCKL.DATALABEL_POSITION, HCKL.DATALABEL_FORMAT, HCKL.SERIES_COLOR, HCKL.DATA_COLORS, HCKL.THRESHOLD_VALUE, HCKL.NEGATIVE_COLOR, HCKL.SERIES_BORDER_COLOR, HCKL.DATA_COLOR, HCKL.DATA_BORDER_COLOR];\n  chartTypeToSeriesKeys[C.LINE_TIME_SERIES] = [HCKL.DATALABEL, HCKL.DATALABEL_ENABLED, HCKL.DATALABEL_STYLE, HCKL.DATALABEL_FONT_STYLE, HCKL.DATALABEL_FONT_WEIGHT, HCKL.DATALABEL_FONT_SIZE, HCKL.DATALABEL_FONT_COLOR, HCKL.DATALABEL_POSITION, HCKL.DATALABEL_FORMAT, HCKL.SERIES_COLOR, HCKL.DATA_COLORS, HCKL.THRESHOLD_VALUE, HCKL.NEGATIVE_COLOR, HCKL.MARKER, HCKL.MARKER_STATUS, HCKL.MARKER_SHAPE, HCKL.MARKER_SIZE, HCKL.MARKER_COLOR, HCKL.MARKER_BORDER_COLOR, HCKL.LINE_TYPE];\n  chartTypeToSeriesKeys[C.AREA_TIME_SERIES] = [HCKL.DATALABEL, HCKL.DATALABEL_ENABLED, HCKL.DATALABEL_STYLE, HCKL.DATALABEL_FONT_STYLE, HCKL.DATALABEL_FONT_WEIGHT, HCKL.DATALABEL_FONT_SIZE, HCKL.DATALABEL_FONT_COLOR, HCKL.DATALABEL_POSITION, HCKL.DATALABEL_FORMAT, HCKL.SERIES_COLOR, HCKL.DATA_COLORS, HCKL.THRESHOLD_VALUE, HCKL.NEGATIVE_COLOR, HCKL.MARKER, HCKL.MARKER_STATUS, HCKL.MARKER_SHAPE, HCKL.MARKER_SIZE, HCKL.MARKER_COLOR, HCKL.MARKER_BORDER_COLOR, HCKL.LINE_TYPE, HCKL.AREA_OPACITY];\n  chartTypeToSeriesKeys[C.COMBO] = [HCKL.DATALABEL, HCKL.DATALABEL_ENABLED, HCKL.DATALABEL_STYLE, HCKL.DATALABEL_FONT_STYLE, HCKL.DATALABEL_FONT_WEIGHT, HCKL.DATALABEL_FONT_SIZE, HCKL.DATALABEL_FONT_COLOR, HCKL.DATALABEL_POSITION, HCKL.DATALABEL_FORMAT, HCKL.SERIES_COLOR, HCKL.DATA_COLORS, HCKL.THRESHOLD_VALUE, HCKL.NEGATIVE_COLOR, HCKL.MARKER, HCKL.MARKER_STATUS, HCKL.MARKER_SHAPE, HCKL.MARKER_SIZE, HCKL.MARKER_COLOR, HCKL.MARKER_BORDER_COLOR, HCKL.LINE_TYPE];\n})(window || this);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/Utils/HCMaps.js\n");

/***/ }),

/***/ "./js/Utils/HCPropHandler.js":
/*!***********************************!*\
  !*** ./js/Utils/HCPropHandler.js ***!
  \***********************************/
/***/ (function() {

"use strict";
eval("/*$Id$*/\n //No I18N\n\n(function (ctx) {\n  var C = ctx.ChartConstants;\n  var HCC = ctx.HCConstants;\n  var HCD = ctx.HCDefaults;\n  var HCKeyList = ctx.HCKeyList;\n  var KL = ctx.ChartKeyList;\n  var GeneralUtilities = ctx.GeneralUtilities;\n  var ChartDefaults = ctx.ChartDefaults.DEFAULTS;\n  var HCArraySkeletonConstructor = ctx.HCArraySkeletonConstructor;\n  var HCDatalabelHandler = ctx.HCDatalabelHandler;\n\n  var HCPropHandler = function () {\n    function getSeriesObject(type, hcJSON) {\n      var series;\n\n      switch (type) {\n        case HCC.COL:\n        case HCC.BAR:\n        case HCC.SPLINE:\n        case HCC.LINE:\n        case HCC.AREA:\n          series = hcJSON[HCC.SERIES];\n          break;\n\n        case HCC.PIE:\n        case HCC.FUNNEL:\n          series = hcJSON[HCC.SERIES][0][HCC.DATA];\n          break;\n\n        case HCC.WEIGHTED_FUNNEL:\n          series = hcJSON[HCC.SERIES];\n          break;\n\n        default:\n          series = hcJSON[HCC.SERIES];\n          break;\n      }\n\n      return series;\n    }\n\n    return {\n      handleInverted: function handleInverted(status) {\n        var chartObj = {};\n        chartObj[HCC.CHART] = {};\n        chartObj[HCC.CHART][HCC.INVERTED] = status;\n        return chartObj;\n      },\n      handleAnimatedDuration: function handleAnimatedDuration(duration) {\n        var chartObj = {};\n        chartObj[HCC.CHART] = {};\n        chartObj[HCC.CHART][HCC.ANIMATION] = {};\n        chartObj[HCC.CHART][HCC.ANIMATION][HCC.DURATION] = duration;\n        return chartObj;\n      },\n      handleChartFontFamily: function handleChartFontFamily(fontFamily, hcJSON) {\n        hcJSON[HCC.CHART][HCC.STYLE][HCC.FONT_FAMILY] = fontFamily;\n        var chartObj = {};\n        chartObj[HCC.CHART] = hcJSON[HCC.CHART];\n        return chartObj;\n      },\n      handleGradient: function handleGradient(type, isEnabled, hcJSON) {\n        var bgColor;\n        var color = hcJSON[HCC.CHART][HCC.BACKGROUND_COLOR];\n\n        if (GeneralUtilities.isObject(color)) {\n          color = color[HCC.STOPS][0][1];\n        }\n\n        if (isEnabled) {\n          bgColor = {\n            radialGradient: {\n              cx: ChartDefaults.BG_CX,\n              cy: ChartDefaults.BG_CY,\n              r: ChartDefaults.BG_RADIUS\n            },\n            stops: [[0, color], [1, GeneralUtilities.getDiffShadeWithAlpha(color, ChartDefaults.BACKGROUND_BRIGHTNESS)] //brighten\n            ]\n          };\n        } else {\n          bgColor = color;\n        }\n\n        hcJSON[HCC.CHART][HCC.BACKGROUND_COLOR] = bgColor;\n      },\n      handleBackgroundColor: function handleBackgroundColor(bg_color, hcJSON) {\n        var bgColor;\n\n        if (GeneralUtilities.isObject(hcJSON[HCC.CHART][HCC.BACKGROUND_COLOR])) {\n          bgColor = hcJSON[HCC.CHART][HCC.BACKGROUND_COLOR];\n          bgColor[HCC.STOPS][0][1] = bg_color;\n          bgColor[HCC.STOPS][1][1] = GeneralUtilities.getDiffShadeWithAlpha(color, ChartDefaults.BACKGROUND_BRIGHTNESS);\n        } else {\n          bgColor = bg_color;\n        }\n\n        hcJSON[HCC.CHART][HCC.BACKGROUND_COLOR] = bgColor;\n      },\n      //Title\n      handleTitleTextChange: function handleTitleTextChange(title, hcJSON) {\n        hcJSON[HCConstants.TITLE][HCConstants.TEXT] = title;\n        return hcJSON[HCConstants.TITLE];\n      },\n      handleSubtitleTextChange: function handleSubtitleTextChange(subtitle, hcJSON) {\n        hcJSON[HCConstants.SUBTITLE][HCConstants.TEXT] = subtitle;\n        return hcJSON[HCConstants.SUBTITLE];\n      },\n      //Series properties\n      handleSeriesColor: function handleSeriesColor(type, index, color, hcJSON, chartType) {\n        var series = hcJSON[HCC.SERIES];\n        series[index] && (series[index][HCC.SERIES_COLOR] = color);\n      },\n      handleDataColor: function handleDataColor(type, color, seriesIndex, dataIndex, hcJSON, chartType) {\n        var series = hcJSON[HCC.SERIES];\n\n        if (chartType.indexOf(C.WEIGHTED_FUNNEL) != -1) {\n          if (series[seriesIndex]) {\n            series[seriesIndex][HCC.SERIES_COLOR] = color;\n          }\n        } else {\n          if (series[seriesIndex] && series[seriesIndex][HCC.DATA] && series[seriesIndex][HCC.DATA][dataIndex]) {\n            series[seriesIndex][HCC.DATA][dataIndex][HCC.DATA_COLOR] = color;\n          }\n        }\n      },\n      handleDataBorderColor: function handleDataBorderColor(type, color, seriesIndex, dataIndex, hcJSON, chartType) {\n        var series = hcJSON[HCC.SERIES];\n\n        if (chartType.indexOf(C.WEIGHTED_FUNNEL) != -1) {\n          if (series[seriesIndex]) {\n            HCPropHandler.setBorderColor(series[seriesIndex], color, series[seriesIndex][HCC.SERIES_COLOR]);\n          }\n        } else {\n          if (series[seriesIndex] && series[seriesIndex][HCC.DATA] && series[seriesIndex][HCC.DATA][dataIndex]) {\n            var seriesColor = series[seriesIndex][HCC.DATA][dataIndex][HCC.DATA_COLOR] || series[seriesIndex][HCC.SERIES_COLOR];\n            HCPropHandler.setBorderColor(series[seriesIndex][HCC.DATA][dataIndex], color, seriesColor);\n          }\n        }\n      },\n      handleTargetColor: function handleTargetColor(type, index, color, hcJSON, chartType) {\n        var series = getSeriesObject(type, hcJSON);\n        series[index][HCConstants.TARGET_OPTIONS] || (series[index][HCConstants.TARGET_OPTIONS] = {});\n        series[index][HCConstants.TARGET_OPTIONS][HCConstants.COLOR] = color;\n      },\n      handleAreaOpacity: function handleAreaOpacity(type, index, opacity, hcJSON, chartType) {\n        var series = getSeriesObject(type, hcJSON);\n        series[index] && (series[index][HCC.FILL_OPACITY] = opacity);\n      },\n      setBorderColor: function setBorderColor(obj, borderProperty, seriesColor) {\n        switch (borderProperty) {\n          case C.NONE:\n            obj && (obj[HCC.BORDER_COLOR] = null);\n            obj && (obj[HCC.BORDER_WIDTH] = HCD.BORDER_NONE);\n            break;\n\n          case C.DEFAULT:\n            if (obj) {\n              obj[HCC.BORDER_COLOR] = GeneralUtilities.getDiffShade(seriesColor, 1.25);\n              obj[HCC.BORDER_WIDTH] = HCD.BORDER_WIDTH;\n            }\n\n            break;\n\n          default:\n            obj && (obj[HCC.BORDER_COLOR] = borderProperty);\n            obj && (obj[HCC.BORDER_WIDTH] = HCD.BORDER_WIDTH);\n        }\n      },\n      handleBorderColor: function handleBorderColor(type, index, color, hcJSON, chartType) {\n        var series = hcJSON[HCC.SERIES];\n        series[index] && HCPropHandler.setBorderColor(series[index], color, series[[HCC.SERIES_COLOR]]);\n      },\n      handleMarkerStatus: function handleMarkerStatus(type, index, status, hcJSON) {\n        hcJSON[HCC.SERIES][index] && hcJSON[HCC.SERIES][index][HCC.MARKER] && (hcJSON[HCC.SERIES][index][HCC.MARKER][HCC.ENABLED] = status);\n      },\n      handleMarkerShape: function handleMarkerShape(type, index, shape, hcJSON) {\n        hcJSON[HCC.SERIES][index] && hcJSON[HCC.SERIES][index][HCC.MARKER] && (hcJSON[HCC.SERIES][index][HCC.MARKER][HCC.SYMBOL] = shape);\n      },\n      handleMarkerSize: function handleMarkerSize(type, index, size, hcJSON) {\n        hcJSON[HCC.SERIES][index] && hcJSON[HCC.SERIES][index][HCC.MARKER] && (hcJSON[HCC.SERIES][index][HCC.MARKER][HCC.RADIUS] = size);\n      },\n      handleMarkerColor: function handleMarkerColor(type, index, color, hcJSON) {\n        if (hcJSON[HCC.SERIES][index] && hcJSON[HCC.SERIES][index][HCC.MARKER]) {\n          switch (color) {\n            case C.DEFAULT:\n              hcJSON[HCC.SERIES][index][HCC.MARKER][HCC.FILL_COLOR] = undefined;\n              break;\n\n            default:\n              hcJSON[HCC.SERIES][index][HCC.MARKER][HCC.FILL_COLOR] = color;\n          }\n        }\n      },\n      handleMarkerBorderColor: function handleMarkerBorderColor(type, index, borderColor, hcJSON) {\n        if (hcJSON[HCC.SERIES][index] && hcJSON[HCC.SERIES][index][HCC.MARKER]) {\n          switch (borderColor) {\n            case C.DEFAULT:\n              hcJSON[HCC.SERIES][index][HCC.MARKER][HCC.LINE_COLOR] = undefined;\n              break;\n\n            default:\n              hcJSON[HCC.SERIES][index][HCC.MARKER][HCC.LINE_COLOR] = borderColor;\n          }\n\n          hcJSON[HCC.SERIES][index][HCC.MARKER][HCC.LINE_WIDTH] = HCD.BORDER_WIDTH;\n        }\n      },\n      handleSeriesLineType: function handleSeriesLineType(type, index, lineType, hcJSON) {\n        hcJSON[HCC.SERIES][index] && (hcJSON[HCC.SERIES][index][HCC.DASH_STYLE] = lineType); //Same line type\n      },\n      handleSeriesThresholdValue: function handleSeriesThresholdValue(type, index, value, hcJSON) {\n        hcJSON[HCC.SERIES][index] && (hcJSON[HCC.SERIES][index][HCC.THRESHOLD] = value);\n      },\n      handleSeriesNegativeColor: function handleSeriesNegativeColor(type, index, color, hcJSON) {\n        hcJSON[HCC.SERIES][index] && (hcJSON[HCC.SERIES][index][HCC.NEGATIVE_COLOR] = color);\n      },\n      handleSeriesSortingOrder: function handleSeriesSortingOrder(type, index, order, hcJSON) {\n        if (hcJSON[HCC.SERIES][index]) {\n          hcJSON[HCC.SERIES][index][HCC.DATA_SORTING] || (hcJSON[HCC.SERIES][index][HCC.DATA_SORTING] = {});\n\n          if (order) {\n            hcJSON[HCC.SERIES][index][HCC.DATA_SORTING][HCC.ENABLED] = true;\n            hcJSON[HCC.SERIES][index][HCC.DATA_SORTING][HCC.ORDER] = order;\n\n            if (order.indexOf(HCC.DESC) != -1) {\n              hcJSON[HCC.CAPTION][HCC.ALIGN] = HCC.ALIGN_RIGHT;\n              hcJSON[HCC.CAPTION][HCC.VERTICAL_ALIGN] = HCC.V_ALIGN_BOTTOM;\n              hcJSON[HCC.VAXIS][0][HCC.OPPOSITE] = true;\n            } else {\n              hcJSON[HCC.CAPTION][HCC.ALIGN] = HCC.ALIGN_RIGHT;\n              hcJSON[HCC.CAPTION][HCC.VERTICAL_ALIGN] = HCC.V_ALIGN_TOP;\n              hcJSON[HCC.VAXIS][0][HCC.OPPOSITE] = false;\n            }\n          } else {\n            hcJSON[HCC.SERIES][index][HCC.DATA_SORTING][HCC.ENABLED] = false;\n          }\n        }\n      },\n      handleStartAngle: function handleStartAngle(type, angle, hcJSON, chartType) {\n        if (chartType.indexOf(C.SEMI_PIE) != -1 && hcJSON[HCC.SERIES][0]) {\n          hcJSON[HCC.SERIES][0][HCC.START_ANGLE] = angle;\n          hcJSON[HCC.SERIES][0][HCC.END_ANGLE] = angle + 180;\n\n          if (angle >= 250 && angle <= 290) {\n            hcJSON[HCC.SERIES][0][HCC.CENTER] = [\"50%\", \"80%\"]; //hcJSON[HCC.SERIES][0][HCC.SIZE] = \"125%\";\n\n            hcJSON[HCC.SERIES][0][HCC.SIZE] = \"100%\";\n          } else if (angle >= 230 && angle <= 250 || angle >= 290 && angle <= 310) {\n            hcJSON[HCC.SERIES][0][HCC.CENTER] = [\"50%\", \"70%\"];\n            hcJSON[HCC.SERIES][0][HCC.SIZE] = \"100%\";\n          } else if (angle >= 220 && angle <= 230 || angle >= 310 && angle <= 320) {\n            hcJSON[HCC.SERIES][0][HCC.CENTER] = [\"50%\", \"60%\"];\n            hcJSON[HCC.SERIES][0][HCC.SIZE] = \"100%\";\n          } else {\n            hcJSON[HCC.SERIES][0][HCC.CENTER] = [\"50%\", \"50%\"];\n            hcJSON[HCC.SERIES][0][HCC.SIZE] = \"100%\";\n          }\n        } else if (chartType.indexOf(C.PIE) != -1 && hcJSON[HCC.SERIES][0]) {\n          hcJSON[HCC.SERIES][0].startAngle = angle;\n        } else if (chartType.indexOf(C.SEMI_DONUT) != -1) {\n          for (var i = 0; i < hcJSON[HCC.SERIES].length; i++) {\n            hcJSON[HCC.SERIES][i].startAngle = angle;\n            hcJSON[HCC.SERIES][i].endAngle = angle + 180;\n\n            if (angle >= 250 && angle <= 290) {\n              hcJSON[HCC.SERIES][i][HCC.CENTER] = [\"50%\", \"80%\"];\n            } else if (angle >= 230 && angle <= 250 || angle >= 290 && angle <= 310) {\n              hcJSON[HCC.SERIES][i][HCC.CENTER] = [\"50%\", \"70%\"];\n            } else if (angle >= 220 && angle <= 230 || angle >= 310 && angle <= 320) {\n              hcJSON[HCC.SERIES][i][HCC.CENTER] = [\"50%\", \"60%\"];\n            } else {\n              hcJSON[HCC.SERIES][i][HCC.CENTER] = [\"50%\", \"50%\"];\n            }\n          }\n        } else if (chartType.indexOf(C.DONUT) != -1) {\n          for (var i = 0; i < hcJSON[HCC.SERIES].length; i++) {\n            hcJSON[HCC.SERIES][i].startAngle = angle;\n          }\n        }\n      },\n      //caption\n      handleCaptionStatus: function handleCaptionStatus(type, isEnabled, hcJSON) {\n        hcJSON[HCC.CAPTION] && (hcJSON[HCC.CAPTION][HCC.STYLE][HCC.DISPLAY] = isEnabled ? HCC.BLOCK : HCC.NONE);\n      },\n      handleCaptionFontSize: function handleCaptionFontSize(type, size, hcJSON) {\n        hcJSON[HCC.CAPTION] && (hcJSON[HCC.CAPTION][HCC.STYLE][HCC.FONT_SIZE] = size);\n      },\n      handleCaptionFontColor: function handleCaptionFontColor(type, color, hcJSON) {\n        hcJSON[HCC.CAPTION] && (hcJSON[HCC.CAPTION][HCC.STYLE][HCC.FONT_COLOR] = color);\n      },\n      handleCaptionFontWeight: function handleCaptionFontWeight(type, weight, hcJSON) {\n        hcJSON[HCC.CAPTION] && (hcJSON[HCC.CAPTION][HCC.STYLE][HCC.FONT_WEIGHT] = weight);\n      },\n      handleCaptionFontStyle: function handleCaptionFontStyle(type, style, hcJSON) {\n        hcJSON[HCC.CAPTION] && (hcJSON[HCC.CAPTION][HCC.STYLE][HCC.FONT_STYLE] = style);\n      },\n      //Datalabel\n      handleDatalabelStatus: function handleDatalabelStatus(type, index, isEnabled, hcJSON, chartType) {\n        var series = hcJSON[HCC.SERIES];\n\n        if (chartType.indexOf(C.WEIGHTED_FUNNEL) != -1) {\n          var seriesLen = series ? series.length : 0;\n\n          for (var i = 0; i < seriesLen; i++) {\n            if (series[i]) {\n              series[i][HCC.DATALABELS][HCC.ENABLED] = isEnabled;\n            }\n          }\n        } else {\n          series[index] && (series[index][HCC.DATALABELS][HCC.ENABLED] = isEnabled);\n        }\n      },\n      handleDatalabelFontSize: function handleDatalabelFontSize(type, index, size, hcJSON, chartType) {\n        var series = hcJSON[HCC.SERIES];\n\n        if (chartType.indexOf(C.WEIGHTED_FUNNEL) != -1) {\n          var seriesLen = series ? series.length : 0;\n\n          for (var i = 0; i < seriesLen; i++) {\n            if (series[i]) {\n              series[i][HCC.DATALABELS][HCC.STYLE][HCC.FONT_SIZE] = size;\n            }\n          }\n        } else {\n          series[index] && (series[index][HCC.DATALABELS][HCC.STYLE][HCC.FONT_SIZE] = size);\n        }\n      },\n      handleDatalabelFontColor: function handleDatalabelFontColor(type, index, color, hcJSON, chartType) {\n        var series = hcJSON[HCC.SERIES];\n\n        if (chartType.indexOf(C.WEIGHTED_FUNNEL) != -1) {\n          var seriesLen = series ? series.length : 0;\n\n          for (var i = 0; i < seriesLen; i++) {\n            if (series[i]) {\n              series[i][HCC.DATALABELS][HCC.STYLE][HCC.FONT_COLOR] = color;\n            }\n          }\n        } else {\n          series[index] && (series[index][HCC.DATALABELS][HCC.STYLE][HCC.FONT_COLOR] = color);\n        }\n      },\n      handleDatalabelFontWeight: function handleDatalabelFontWeight(type, index, weight, hcJSON, chartType) {\n        var series = hcJSON[HCC.SERIES];\n\n        if (chartType.indexOf(C.WEIGHTED_FUNNEL) != -1) {\n          var seriesLen = series ? series.length : 0;\n\n          for (var i = 0; i < seriesLen; i++) {\n            if (series[i]) {\n              series[i][HCC.DATALABELS][HCC.STYLE][HCC.FONT_WEIGHT] = weight;\n            }\n          }\n        } else {\n          series[index] && (series[index][HCC.DATALABELS][HCC.STYLE][HCC.FONT_WEIGHT] = weight);\n        }\n      },\n      handleDatalabelFontStyle: function handleDatalabelFontStyle(type, index, style, hcJSON, chartType) {\n        var series = hcJSON[HCC.SERIES];\n\n        if (chartType.indexOf(C.WEIGHTED_FUNNEL) != -1) {\n          var seriesLen = series ? series.length : 0;\n\n          for (var i = 0; i < seriesLen; i++) {\n            if (series[i]) {\n              series[i][HCC.DATALABELS][HCC.STYLE][HCC.FONT_STYLE] = style;\n            }\n          }\n        } else {\n          series[index] && (series[index][HCC.DATALABELS][HCC.STYLE][HCC.FONT_STYLE] = style);\n        }\n      },\n      handleDatalabelPosition: function handleDatalabelPosition(type, index, position, hcJSON, chartType) {\n        var series = hcJSON[HCC.SERIES];\n\n        if (chartType.indexOf(C.WEIGHTED_FUNNEL) != -1) {\n          var seriesLen = series ? series.length : 0;\n\n          for (var i = 0; i < seriesLen; i++) {\n            if (series[i]) {\n              HCDatalabelHandler.handleDatalabelPosition(position, type, series, i, chartType);\n            }\n          }\n        } else {\n          HCDatalabelHandler.handleDatalabelPosition(position, type, series, index, chartType);\n        }\n      },\n      handleDatalabelFormat: function handleDatalabelFormat(type, index, format, hcJSON, chartType) {\n        var series = hcJSON[HCC.SERIES];\n\n        if (chartType.indexOf(C.WEIGHTED_FUNNEL) != -1) {\n          var seriesLen = series ? series.length : 0;\n\n          for (var i = 0; i < seriesLen; i++) {\n            if (series[i]) {\n              HCDatalabelHandler.handleDatalabelFormat(format, type, series, i, chartType);\n            }\n          }\n        } else {\n          HCDatalabelHandler.handleDatalabelFormat(format, type, series, index, chartType);\n        }\n      },\n      //Legend\n      handleLegendObject: function handleLegendObject(legendOptions, hcJSON) {\n        // If any conversion needed, this method handles it. Since both the chart meta and highcharts json shares same legend format now. No conversion is needed now.\n        var legend = hcJSON[HCC.LEGEND];\n        legendOptions[C.LEGEND_HALIGN] && (legend[HCC.LEGEND_HALIGN] = legendOptions[C.LEGEND_HALIGN]);\n        legendOptions[C.LEGEND_VALIGN] && (legend[HCC.LEGEND_VALIGN] = legendOptions[C.LEGEND_VALIGN]);\n        return legend;\n      },\n      handleLegendStatus: function handleLegendStatus(isEnabled, hcJSON) {\n        var legend = hcJSON[HCC.LEGEND];\n        legend[HCConstants.ENABLED] = isEnabled;\n        return legend;\n      },\n      handleLegendFontWeight: function handleLegendFontWeight(weight, hcJSON) {\n        hcJSON[HCC.LEGEND][HCC.LEGEND_STYLE][HCC.FONT_WEIGHT] = weight;\n      },\n      handleLegendFontStyle: function handleLegendFontStyle(style, hcJSON) {\n        hcJSON[HCC.LEGEND][HCC.LEGEND_STYLE][HCC.FONT_STYLE] = style;\n      },\n      handleLegendFontColor: function handleLegendFontColor(color, hcJSON) {\n        hcJSON[HCC.LEGEND][HCC.LEGEND_STYLE][HCC.FONT_COLOR] = color;\n      },\n      handleLegendFontSize: function handleLegendFontSize(size, hcJSON) {\n        hcJSON[HCC.LEGEND][HCC.LEGEND_STYLE][HCC.FONT_SIZE] = size;\n      },\n      handleYAxisSuffix: function handleYAxisSuffix(type, index, suffix, hcJSON) {\n        var prefix = hcJSON[HCC.VAXIS][index][HCC.PREFIX];\n        hcJSON[HCC.VAXIS][index][HCC.SUFFIX] = suffix;\n\n        hcJSON[HCC.VAXIS][index][HCC.LABELS].formatter = function () {\n          return GeneralUtilities.concatString([prefix, this.value, suffix]);\n        };\n      },\n      handleYAxisPrefix: function handleYAxisPrefix(type, index, prefix, hcJSON) {\n        var suffix = hcJSON[HCC.VAXIS][index][HCC.SUFFIX];\n        hcJSON[HCC.VAXIS][index][HCC.PREFIX] = prefix;\n\n        hcJSON[HCC.VAXIS][index][HCC.LABELS].formatter = function () {\n          return GeneralUtilities.concatString([prefix, this.value, suffix]);\n        };\n      },\n      handleYAxisMin: function handleYAxisMin(index, min, hcJSON) {\n        hcJSON[HCC.VAXIS][index][HCC.MIN] = min;\n      },\n      handleYAxisMax: function handleYAxisMax(index, max, hcJSON) {\n        hcJSON[HCC.VAXIS][index][HCC.MAX] = max;\n      },\n      handleYAxisInterval: function handleYAxisInterval(index, interval, hcJSON) {\n        hcJSON[HCC.VAXIS][index][HCC.TICK_INTERVAL] = interval;\n      },\n      handleYAxisBaseValue: function handleYAxisBaseValue(baseValue, index, hcJSON) {\n        hcJSON[HCC.VAXIS][index][HCC.BASE_VALUE] = baseValue;\n      },\n      handleYAxisPLValue: function handleYAxisPLValue(value, vIndex, plIndex, hcJSON) {\n        hcJSON[HCC.VAXIS][vIndex][HCC.PLOT_LINES][plIndex] && (hcJSON[HCC.VAXIS][vIndex][HCC.PLOT_LINES][plIndex][HCC.VALUE] = value);\n      },\n      handleYAxisPLText: function handleYAxisPLText(text, vIndex, plIndex, hcJSON) {\n        hcJSON[HCC.VAXIS][vIndex][HCC.PLOT_LINES][plIndex] && (hcJSON[HCC.VAXIS][vIndex][HCC.PLOT_LINES][plIndex][HCC.LABEL][HCC.TEXT] = text);\n      },\n      handleYAxisPLFontWeight: function handleYAxisPLFontWeight(weight, vIndex, plIndex, hcJSON) {\n        hcJSON[HCC.VAXIS][vIndex][HCC.PLOT_LINES][plIndex] && (hcJSON[HCC.VAXIS][vIndex][HCC.PLOT_LINES][plIndex][HCC.LABEL][HCC.STYLE][HCC.FONT_WEIGHT] = weight);\n      },\n      handleYAxisPLFontStyle: function handleYAxisPLFontStyle(style, vIndex, plIndex, hcJSON) {\n        hcJSON[HCC.VAXIS][vIndex][HCC.PLOT_LINES][plIndex] && (hcJSON[HCC.VAXIS][vIndex][HCC.PLOT_LINES][plIndex][HCC.LABEL][HCC.STYLE][HCC.FONT_STYLE] = style);\n      },\n      handleYAxisPLFontColor: function handleYAxisPLFontColor(color, vIndex, plIndex, hcJSON) {\n        hcJSON[HCC.VAXIS][vIndex][HCC.PLOT_LINES][plIndex] && (hcJSON[HCC.VAXIS][vIndex][HCC.PLOT_LINES][plIndex][HCC.LABEL][HCC.STYLE][HCC.FONT_COLOR] = color);\n      },\n      handleYAxisPLFontSize: function handleYAxisPLFontSize(size, vIndex, plIndex, hcJSON) {\n        hcJSON[HCC.VAXIS][vIndex][HCC.PLOT_LINES][plIndex] && (hcJSON[HCC.VAXIS][vIndex][HCC.PLOT_LINES][plIndex][HCC.LABEL][HCC.STYLE][HCC.FONT_SIZE] = size);\n      },\n      handleYAxisPLColor: function handleYAxisPLColor(color, vIndex, plIndex, hcJSON) {\n        hcJSON[HCC.VAXIS][vIndex][HCC.PLOT_LINES][plIndex] && (hcJSON[HCC.VAXIS][vIndex][HCC.PLOT_LINES][plIndex][HCC.COLOR] = color);\n      },\n      handleYAxisPLType: function handleYAxisPLType(type, vIndex, plIndex, hcJSON) {\n        hcJSON[HCC.VAXIS][vIndex][HCC.PLOT_LINES][plIndex] && (hcJSON[HCC.VAXIS][vIndex][HCC.PLOT_LINES][plIndex][HCC.DASH_STYLE] = type);\n      },\n      addVAxisPlotline: function addVAxisPlotline(index, plOptions, hcJSON, chartType) {\n        var plotLines = hcJSON[HCC.VAXIS][index][HCC.PLOT_LINES];\n        var plLen = plotLines.length;\n        plotLines[plLen] = HCArraySkeletonConstructor.get(HCKeyList.PLOT_LINES, chartType);\n        plOptions[C.VALUE] && (plotLines[plLen][HCC.VALUE] = plOptions[C.VALUE]);\n        plOptions[C.LABEL][C.TEXT] && (plotLines[plLen][HCC.LABEL][HCC.TEXT] = plOptions[C.LABEL][C.TEXT]);\n        plOptions[C.LABEL][C.FONT_WEIGHT] && (plotLines[plLen][HCC.LABEL][HCC.STYLE][HCC.FONT_WEIGHT] = plOptions[C.LABEL][C.FONT_WEIGHT]);\n        plOptions[C.LABEL][C.FONT_STYLE] && (plotLines[plLen][HCC.LABEL][HCC.STYLE][HCC.FONT_STYLE] = plOptions[C.LABEL][C.FONT_STYLE]);\n        plOptions[C.LABEL][C.FONT_COLOR] && (plotLines[plLen][HCC.LABEL][HCC.STYLE][HCC.FONT_COLOR] = plOptions[C.LABEL][C.FONT_COLOR]);\n        plOptions[C.LABEL][C.FONT_SIZE] && (plotLines[plLen][HCC.LABEL][HCC.STYLE][HCC.FONT_SIZE] = plOptions[C.LABEL][C.FONT_SIZE]);\n        plOptions[C.LINE_COLOR] && (plotLines[plLen][HCC.COLOR] = plOptions[C.LINE_COLOR]);\n        plOptions[C.LINE_TYPE] && (plotLines[plLen][HCC.DASH_STYLE] = plOptions[C.LINE_TYPE]);\n      },\n      removeVAxisPlotLine: function removeVAxisPlotLine(vIndex, plIndex, hcJSON) {\n        var plotLines = hcJSON[HCC.VAXIS][vIndex][HCC.PLOT_LINES];\n        hcJSON[HCC.VAXIS][vIndex][HCC.PLOT_LINES] = GeneralUtilities.removeArrayElement(plotLines, plIndex);\n      },\n      // H Axis Gridlines\n      handleHAxisMajorGLStatus: function handleHAxisMajorGLStatus(index, status, hcJSON) {\n        hcJSON[HCC.HAXIS][index][HCC.GRIDLINE_WIDTH] = status ? HCD.GRIDLINE_WIDTH : HCD.GRIDLINE_NONE_WIDTH;\n      },\n      handleHAxisMajorGLCount: function handleHAxisMajorGLCount(index, count, hcJSON) {\n        if (count != null) {\n          if (GeneralUtilities.isString(count) && count.indexOf(HCC.GRIDLINE_COUNT_AUTO) != -1) {\n            hcJSON[HCC.HAXIS][index][HCC.TICK_AMOUNT] = undefined;\n          } else {\n            hcJSON[HCC.HAXIS][index][HCC.TICK_AMOUNT] = count;\n          }\n        }\n      },\n      handleHAxisMajorGLType: function handleHAxisMajorGLType(index, type, hcJSON) {\n        hcJSON[HCC.HAXIS][index][HCC.MAJOR_GRIDLINE_LINE_TYPE] = type;\n      },\n      handleHAxisMajorGLColor: function handleHAxisMajorGLColor(index, color, hcJSON) {\n        hcJSON[HCC.HAXIS][index][HCC.MAJOR_GRIDLINE_LINE_COLOR] = color;\n      },\n      handleHAxisMinorGLStatus: function handleHAxisMinorGLStatus(index, status, hcJSON) {\n        hcJSON[HCC.VAXIS][index][HCC.MINOR_GRIDLINE_WIDTH] = status ? HCD.GRIDLINE_WIDTH : HCD.GRIDLINE_NONE_WIDTH;\n        hcJSON[HCC.HAXIS][index][HCC.MINOR_TICK_INTERVAL] = status ? HCD.MINOR_GL_ENABLED : HCD.MINOR_GL_DISABLED;\n      },\n      handleHAxisMinorGLType: function handleHAxisMinorGLType(index, type, hcJSON) {\n        hcJSON[HCC.HAXIS][index][HCC.MINOR_GRIDLINE_LINE_TYPE] = type;\n      },\n      handleHAxisMinorGLColor: function handleHAxisMinorGLColor(index, color, hcJSON) {\n        hcJSON[HCC.HAXIS][index][HCC.MINOR_GRIDLINE_LINE_COLOR] = color;\n      },\n      // V Axis Gridlines\n      handleVAxisMajorGLStatus: function handleVAxisMajorGLStatus(index, status, hcJSON) {\n        hcJSON[HCC.VAXIS][index][HCC.GRIDLINE_WIDTH] = status ? HCD.GRIDLINE_WIDTH : HCD.GRIDLINE_NONE_WIDTH;\n      },\n      handleVAxisMajorGLCount: function handleVAxisMajorGLCount(index, count, hcJSON) {\n        if (count != null) {\n          if (GeneralUtilities.isString(count) && count.indexOf(HCC.GRIDLINE_COUNT_AUTO) != -1) {\n            hcJSON[HCC.VAXIS][index][HCC.TICK_AMOUNT] = undefined;\n          } else {\n            hcJSON[HCC.VAXIS][index][HCC.TICK_AMOUNT] = count;\n          }\n        }\n      },\n      handleVAxisMajorGLType: function handleVAxisMajorGLType(index, type, hcJSON) {\n        hcJSON[HCC.VAXIS][index][HCC.MAJOR_GRIDLINE_LINE_TYPE] = type;\n      },\n      handleVAxisMajorGLColor: function handleVAxisMajorGLColor(index, color, hcJSON) {\n        hcJSON[HCC.VAXIS][index][HCC.MAJOR_GRIDLINE_LINE_COLOR] = color;\n      },\n      handleVAxisMinorGLStatus: function handleVAxisMinorGLStatus(index, status, hcJSON) {\n        hcJSON[HCC.VAXIS][index][HCC.MINOR_GRIDLINE_WIDTH] = status ? HCD.GRIDLINE_WIDTH : HCD.GRIDLINE_NONE_WIDTH;\n        hcJSON[HCC.VAXIS][index][HCC.MINOR_TICK_INTERVAL] = status ? HCD.MINOR_GL_ENABLED : HCD.MINOR_GL_DISABLED;\n      },\n      handleVAxisMinorGLType: function handleVAxisMinorGLType(index, type, hcJSON) {\n        hcJSON[HCC.VAXIS][index][HCC.MINOR_GRIDLINE_LINE_TYPE] = type;\n      },\n      handleVAxisMinorGLColor: function handleVAxisMinorGLColor(index, color, hcJSON) {\n        hcJSON[HCC.VAXIS][index][HCC.MINOR_GRIDLINE_LINE_COLOR] = color;\n      },\n      //Tooltip\n      handleTooltipStatus: function handleTooltipStatus(type, isEnabled, hcJSON) {\n        hcJSON[HCC.TOOLTIP][HCC.ENABLED] = isEnabled;\n      },\n      //Trendline\n      handleTrendlineStatus: function handleTrendlineStatus(type, index, isEnabled, hcJSON) {\n        //Remove all regression line\n        var seriesName = hcJSON[HCC.SERIES][index][HCC.REGRESSION_NAME] || \"Series \" + (index + 1);\n        var trendlineName = seriesName + \" Trendline\"; //No I18N\n\n        var i = 0;\n\n        while (hcJSON[HCC.SERIES][i] != null) {\n          if (hcJSON[HCC.SERIES][i][HCC.REGRESSION_NAME].indexOf(trendlineName) != -1) {\n            hcJSON[HCC.SERIES].splice(i, 1);\n          } else {\n            i++;\n          }\n        }\n\n        hcJSON[HCC.SERIES][index] && (hcJSON[HCC.SERIES][index][HCC.REGRESSION] = isEnabled);\n      },\n      handleTrendlineType: function handleTrendlineType(type, index, trendlinetype, hcJSON) {\n        //Remove all regression line\n        var seriesLen = hcJSON[HCC.SERIES] ? hcJSON[HCC.SERIES].length : 0;\n\n        for (var i = 0; i < seriesLen; i++) {\n          if (hcJSON[HCC.SERIES][i].isRegressionLine) {\n            delete hcJSON[HCC.SERIES][i];\n          }\n        }\n\n        hcJSON[HCC.SERIES][index] && hcJSON[HCC.SERIES][index][HCC.REGRESSION_SETTINGS] && (hcJSON[HCC.SERIES][index][HCC.REGRESSION_SETTINGS][HCC.TYPE] = trendlinetype);\n      },\n      handleTrendlineOrder: function handleTrendlineOrder(type, index, order, hcJSON) {\n        //Remove all regression line\n        var seriesLen = hcJSON[HCC.SERIES] ? hcJSON[HCC.SERIES].length : 0;\n\n        for (var i = 0; i < seriesLen; i++) {\n          if (hcJSON[HCC.SERIES][i].isRegressionLine) {\n            delete hcJSON[HCC.SERIES][i];\n          }\n        }\n\n        hcJSON[HCC.SERIES][index] && hcJSON[HCC.SERIES][index][HCC.REGRESSION_SETTINGS] && (hcJSON[HCC.SERIES][index][HCC.REGRESSION_SETTINGS][HCC.REGRESSION_ORDER] = order);\n      },\n      handleMultipleVAxis: function handleMultipleVAxis(status, vAxisProperties, hcJSON, chartType) {\n        if (!status) {\n          var vAxisLen = hcJSON[HCC.VAXIS] ? hcJSON[HCC.VAXIS].length : 0;\n\n          for (var i = 1; i < vAxisLen; i++) {\n            if (hcJSON[HCC.SERIES] && hcJSON[HCC.SERIES][i]) {\n              delete hcJSON[HCC.SERIES][i][HCC.VAXIS];\n            }\n\n            hcJSON[HCC.VAXIS][i][HCC.VISIBLE] = false;\n          }\n        } else {\n          var vAxisLen = vAxisProperties ? vAxisProperties.length : 0;\n\n          var formatterFunc = function formatterFunc(prefix, suffix) {\n            return function () {\n              return GeneralUtilities.concatString([prefix, this.value, suffix]);\n            };\n          };\n\n          for (var i = 0; i < vAxisLen; i++) {\n            if (hcJSON[HCC.SERIES] && hcJSON[HCC.SERIES][i]) {\n              hcJSON[HCC.SERIES][i][HCC.VAXIS] = i;\n            }\n\n            var newProp = vAxisProperties[i];\n            hcJSON[HCC.VAXIS][i] = HCArraySkeletonConstructor.get(HCKeyList.VAXIS, chartType);\n            var bgColor = HCUtils.getBGColor(hcJSON[HCC.CHART][HCC.BACKGROUND_COLOR]);\n            hcJSON[HCC.VAXIS][i][HCC.VISIBLE] = true; //Labels\n\n            newProp[C.LABELS][C.ENABLED] != null && (hcJSON[HCC.VAXIS][i][HCC.LABELS][HCC.ENABLED] = newProp[C.LABELS][C.ENABLED]);\n            var suffix = newProp[C.SUFFIX];\n            var prefix = newProp[C.PREFIX];\n            hcJSON[HCC.VAXIS][i][HCC.LABELS].formatter = formatterFunc(prefix, suffix);\n            newProp[C.PREFIX] && (hcJSON[HCC.VAXIS][i][HCC.PREFIX] = newProp[C.PREFIX]);\n            newProp[C.SUFFIX] && (hcJSON[HCC.VAXIS][i][HCC.SUFFIX] = newProp[C.SUFFIX]);\n            newProp[C.LABELS][C.FONT_SIZE] && (hcJSON[HCC.VAXIS][i][HCC.LABELS][HCC.STYLE][HCC.FONT_SIZE] = newProp[C.LABELS][C.FONT_SIZE]);\n\n            if (newProp[C.LABELS][C.FONT_COLOR].indexOf(C.AUTO_COLOR) != -1) {\n              hcJSON[HCC.VAXIS][i][HCC.LABELS][HCC.STYLE][HCC.FONT_COLOR] = GeneralUtilities.findAutoColor(HCUtils.getBGColor(bgColor), KL.V_LABELS_FONT_COLOR);\n            } else {\n              hcJSON[HCC.VAXIS][i][HCC.LABELS][HCC.STYLE][HCC.FONT_COLOR] = newProp[C.LABELS][C.FONT_COLOR];\n            }\n\n            newProp[C.LABELS][C.FONT_WEIGHT] && (hcJSON[HCC.VAXIS][i][HCC.LABELS][HCC.STYLE][HCC.FONT_WEIGHT] = newProp[C.LABELS][C.FONT_WEIGHT]);\n            newProp[C.LABELS][C.FONT_STYLE] && (hcJSON[HCC.VAXIS][i][HCC.LABELS][HCC.STYLE][HCC.FONT_STYLE] = newProp[C.LABELS][C.FONT_STYLE]);\n            newProp[C.TITLE][C.TEXT] != null && (hcJSON[HCC.VAXIS][i][HCC.TITLE][HCC.TEXT] = newProp[C.TITLE][C.TEXT]);\n            newProp[C.TITLE][C.FONT_SIZE] && (hcJSON[HCC.VAXIS][i][HCC.TITLE][HCC.STYLE][HCC.FONT_SIZE] = newProp[C.TITLE][C.FONT_SIZE]);\n\n            if (newProp[C.TITLE][C.FONT_COLOR].indexOf(C.AUTO_COLOR) != -1) {\n              hcJSON[HCC.VAXIS][i][HCC.TITLE][HCC.STYLE][HCC.FONT_COLOR] = GeneralUtilities.findAutoColor(HCUtils.getBGColor(bgColor), KL.VTITLE_FONT_COLOR);\n            } else {\n              hcJSON[HCC.VAXIS][i][HCC.TITLE][HCC.STYLE][HCC.FONT_COLOR] = newProp[C.TITLE][C.FONT_COLOR];\n            }\n\n            newProp[C.TITLE][C.FONT_WEIGHT] && (hcJSON[HCC.VAXIS][i][HCC.TITLE][HCC.STYLE][HCC.FONT_WEIGHT] = newProp[C.TITLE][C.FONT_WEIGHT]);\n            newProp[C.TITLE][C.FONT_STYLE] && (hcJSON[HCC.VAXIS][i][HCC.TITLE][HCC.STYLE][HCC.FONT_STYLE] = newProp[C.TITLE][C.FONT_STYLE]);\n            newProp[C.SCALE_TYPE] && (hcJSON[HCC.VAXIS][i][HCC.SCALE_TYPE] = newProp[C.SCALE_TYPE]);\n            newProp[C.MIN] != null && (hcJSON[HCC.VAXIS][i][HCC.MIN] = newProp[C.MIN]);\n            newProp[C.MAX] != null && (hcJSON[HCC.VAXIS][i][HCC.MAX] = newProp[C.MAX]);\n            newProp[C.VISIBLE] != null && (hcJSON[HCC.VAXIS][i][HCC.VISIBLE] = newProp[C.VISIBLE]);\n            newProp[C.OPPOSITE] != null && (hcJSON[HCC.VAXIS][i][HCC.OPPOSITE] = newProp[C.OPPOSITE]);\n            newProp[C.TICK_INTERVAL] != null && (hcJSON[HCC.VAXIS][i][HCC.TICK_INTERVAL] = newProp[C.TICK_INTERVAL]);\n            newProp[C.BASE_VALUE] != null && (hcJSON[HCC.VAXIS][i][HCC.BASE_VALUE] = newProp[C.BASE_VALUE]); //Plotlines\n\n            var plotLinesLength = newProp[C.PLOT_LINES] ? newProp[C.PLOT_LINES].length : 0;\n\n            for (var j = 0; j < plotLinesLength; j++) {\n              hcJSON[HCC.VAXIS][i][HCC.PLOT_LINES][j] = HCArraySkeletonConstructor.get(HCKeyList.PLOT_LINES, chartType);\n              newProp[C.PLOT_LINES][j][C.VALUE] && (hcJSON[HCC.VAXIS][j][HCC.PLOT_LINES][j][HCC.VALUE] = newProp[C.PLOT_LINES][j][C.VALUE]);\n              newProp[C.PLOT_LINES][j][C.LINE_TYPE] && (hcJSON[HCC.VAXIS][j][HCC.PLOT_LINES][j][HCC.DASH_STYLE] = newProp[C.PLOT_LINES][j][C.LINE_TYPE]);\n              newProp[C.PLOT_LINES][j][C.LINE_COLOR] && (hcJSON[HCC.VAXIS][j][HCC.PLOT_LINES][j][HCC.COLOR] = newProp[C.PLOT_LINES][j][C.LINE_COLOR]);\n              newProp[C.PLOT_LINES][j][C.LABEL][C.TEXT] && (hcJSON[HCC.VAXIS][j][HCC.PLOT_LINES][j][HCC.LABEL][HCC.TEXT] = newProp[C.PLOT_LINES][j][C.LABEL][C.TEXT]);\n              newProp[C.PLOT_LINES][j][C.LABEL][C.FONT_SIZE] && (hcJSON[HCC.VAXIS][j][HCC.PLOT_LINES][j][HCC.LABEL][HCC.STYLE][HCC.FONT_SIZE] = newProp[C.PLOT_LINES][j][C.LABEL][C.FONT_SIZE]);\n\n              if (newProp[C.PLOT_LINES][j][C.LABEL][C.FONT_COLOR].indexOf(C.AUTO_COLOR) != -1) {\n                hcJSON[HCC.VAXIS][j][HCC.PLOT_LINES][j][HCC.LABEL][HCC.STYLE][HCC.FONT_COLOR] = GeneralUtilities.findAutoColor(HCUtils.getBGColor(bgColor), KL.PLOTLINES_LABELS_FONT_COLOR);\n              } else {\n                hcJSON[HCC.VAXIS][j][HCC.PLOT_LINES][j][HCC.LABEL][HCC.STYLE][HCC.FONT_COLOR] = newProp[C.PLOT_LINES][j][C.LABEL][C.FONT_COLOR];\n              }\n\n              newProp[C.PLOT_LINES][j][C.LABEL][C.FONT_STYLE] && (hcJSON[HCC.VAXIS][j][HCC.PLOT_LINES][j][HCC.LABEL][HCC.STYLE][HCC.FONT_STYLE] = newProp[C.PLOT_LINES][j][C.LABEL][C.FONT_STYLE]);\n              newProp[C.PLOT_LINES][j][C.LABEL][C.FONT_WEIGHT] && (hcJSON[HCC.VAXIS][j][HCC.PLOT_LINES][j][HCC.LABEL][HCC.STYLE][HCC.FONT_WEIGHT] = newProp[C.PLOT_LINES][j][C.LABEL][C.FONT_WEIGHT]);\n            } //Gridlines\n\n\n            if (newProp[C.GRIDLINES][C.MAJOR_GRIDLINE_ENABLED] != null) {\n              hcJSON[HCC.VAXIS][i][HCC.GRIDLINE_WIDTH] = newProp[C.GRIDLINES][C.MAJOR_GRIDLINE_ENABLED] ? HCDefaults.GRIDLINE_WIDTH : HCDefaults.GRIDLINE_NONE_WIDTH;\n            }\n\n            var count = newProp[C.GRIDLINES][C.MAJOR_GRIDLINE_COUNT];\n\n            if (count != null) {\n              if (GeneralUtilities.isString(count) && count.indexOf(HCC.GRIDLINE_COUNT_AUTO) != -1) {\n                hcJSON[HCC.VAXIS][i][HCC.TICK_AMOUNT] = undefined;\n              } else {\n                hcJSON[HCC.VAXIS][i][HCC.TICK_AMOUNT] = count;\n              }\n            }\n\n            if (newProp[C.GRIDLINES][C.MAJOR_GRIDLINE_LINE_TYPE] != null) {\n              hcJSON[HCC.VAXIS][i][HCC.MAJOR_GRIDLINE_LINE_TYPE] = newProp[C.GRIDLINES][C.MAJOR_GRIDLINE_LINE_TYPE];\n            }\n\n            if (newProp[C.GRIDLINES][C.MAJOR_GRIDLINE_LINE_COLOR] != null) {\n              if (newProp[C.GRIDLINES][C.MAJOR_GRIDLINE_LINE_COLOR].indexOf(C.AUTO_COLOR) != -1) {\n                hcJSON[HCC.VAXIS][i][HCC.MAJOR_GRIDLINE_LINE_COLOR] = GeneralUtilities.findAutoColor(HCUtils.getBGColor(bgColor), KL.V_MAJOR_GRIDLINE_LINE_COLOR);\n              } else {\n                hcJSON[HCC.VAXIS][i][HCC.MAJOR_GRIDLINE_LINE_COLOR] = newProp[C.GRIDLINES][C.MAJOR_GRIDLINE_LINE_COLOR];\n              }\n            }\n\n            if (newProp[C.GRIDLINES][C.MINOR_GRIDLINE_ENABLED] != null) {\n              hcJSON[HCC.VAXIS][i][HCC.MINOR_GRIDLINE_WIDTH] = newProp[C.GRIDLINES][C.MINOR_GRIDLINE_ENABLED] ? HCDefaults.GRIDLINE_WIDTH : HCDefaults.GRIDLINE_NONE_WIDTH;\n              hcJSON[HCC.VAXIS][i][HCC.MINOR_TICK_INTERVAL] = newProp[C.GRIDLINES][C.MINOR_GRIDLINE_ENABLED] ? HCDefaults.MINOR_GL_ENABLED : HCDefaults.MINOR_GL_DISABLED;\n            }\n\n            if (newProp[C.GRIDLINES][C.MINOR_GRIDLINE_LINE_TYPE] != null) {\n              hcJSON[HCC.VAXIS][i][HCC.MINOR_GRIDLINE_LINE_TYPE] = newProp[C.GRIDLINES][C.MINOR_GRIDLINE_LINE_TYPE];\n            }\n\n            if (newProp[C.GRIDLINES][C.MINOR_GRIDLINE_LINE_COLOR] != null) {\n              if (newProp[C.GRIDLINES][C.MINOR_GRIDLINE_LINE_COLOR].indexOf(C.AUTO_COLOR) != -1) {\n                hcJSON[HCC.VAXIS][i][HCC.MINOR_GRIDLINE_LINE_COLOR] = GeneralUtilities.findAutoColor(HCUtils.getBGColor(bgColor), KL.V_MINOR_GRIDLINE_LINE_COLOR);\n              } else {\n                hcJSON[HCC.VAXIS][i][HCC.MINOR_GRIDLINE_LINE_COLOR] = newProp[C.GRIDLINES][C.MINOR_GRIDLINE_LINE_COLOR];\n              }\n            }\n          }\n        }\n      }\n    };\n  }();\n\n  ctx.HCPropHandler = HCPropHandler;\n})(window || this);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/Utils/HCPropHandler.js\n");

/***/ }),

/***/ "./js/Utils/HCSeriesConstructor.js":
/*!*****************************************!*\
  !*** ./js/Utils/HCSeriesConstructor.js ***!
  \*****************************************/
/***/ (function() {

"use strict";
eval("/*$Id$*/\n //No I18N\n\n(function (ctx) {\n  var HistogramUtil = ctx.HistogramUtil;\n  var C = ctx.ChartConstants;\n  var HCC = ctx.HCConstants;\n  var GUtils = ctx.GeneralUtilities;\n  var HCKeyList = ctx.HCKeyList;\n  var HCArraySkeletonConstructor = ctx.HCArraySkeletonConstructor;\n  var RaceBarSeriesConstructor = ctx.RaceBarSeriesConstructor;\n  var ChartDefaults = ctx.ChartDefaults.DEFAULTS;\n\n  var HCSeriesConstructor = function () {\n    function getDateInRequiredFormat(milliSeconds, requiredForamt) {\n      var d;\n\n      switch (requiredForamt) {\n        case C.MILLI_SECONDS:\n          d = milliSeconds;\n          break;\n\n        case C.DATE:\n          d = moment(milliSeconds).format(\"DD MMM YYYY\"); //No I18N\n\n          break;\n\n        case C.MONTH:\n          d = moment(milliSeconds).format(\"MMM\"); //No I18N\n\n          break;\n\n        case C.YEAR:\n          d = moment(milliSeconds).format(\"YYYY\"); //No I18N\n\n          break;\n\n        case C.MONTH_YEAR:\n          d = moment(milliSeconds).format(\"MMM YYYY\"); //No I18N\n\n          break;\n\n        case C.QUARTER_YEAR:\n          var mon = Number(moment(milliSeconds).format(\"mm\")) + 1; //No I18N\n\n          var qNum = Math.ceil(mon / 4);\n          d = 'Q' + qNum + ' ' + moment(milliSeconds).format(\"YYYY\"); //No I18N\n\n          break;\n\n        default:\n          d = moment(milliSeconds).format(requiredForamt);\n      }\n\n      return d;\n    }\n\n    function constructHeaderColumns(headerColumns, constructedHeaderCols, data) {\n      //Construct headerColumns\n      if (headerColumns[C.HAS_HEADER]) {\n        var headers = headerColumns[C.HEADERS];\n        var keysList = Object.keys(headers);\n\n        for (var i = 0; i < keysList.length; i++) {\n          var headerIndex = keysList[i];\n          var headerType = headers[headerIndex][C.TYPE];\n          constructedHeaderCols[headerIndex] = [];\n\n          switch (headerType) {\n            case C.STRING:\n              for (var i = 0; i < data.length; i++) {\n                constructedHeaderCols[headerIndex].push(data[i][headerIndex]);\n              }\n\n              break;\n\n            case C.NUMBER:\n              for (var i = 0; i < data.length; i++) {\n                constructedHeaderCols[headerIndex].push(data[i][headerIndex].toString());\n              }\n\n              break;\n\n            case C.DATE:\n              var format = headers[headerIndex][C.FORMAT];\n              var requiredForamt = headers[headerIndex][C.REQUIRED_FORMAT] || C.MILLI_SECONDS;\n              var milliSeconds;\n\n              for (var i = 0; i < data.length; i++) {\n                if (format.indexOf(C.MILLI_SECONDS) != -1) {\n                  milliSeconds = data[i][headerIndex]; //constructedHeaderCols[headerIndex].push(data[i][headerIndex]);\n                } else {\n                  milliSeconds = moment(data[i][headerIndex], format).valueOf(); //constructedHeaderCols[headerIndex].push(dateValue);\n                }\n\n                var reqDate = getDateInRequiredFormat(milliSeconds, requiredForamt);\n                constructedHeaderCols[headerIndex].push(reqDate);\n              }\n\n              break;\n          }\n        }\n      } else {\n        for (var i = 0; i < data.length; i++) {\n          constructedHeaderRows[-1] = [];\n          constructedHeaderCols[-1].push(null);\n        }\n      }\n    }\n\n    function constructHeaderRows(headerRows, constructedHeaderRows, data) {\n      //Construct headerRows\n      if (headerRows[C.HAS_HEADER]) {\n        var headers = headerRows[C.HEADERS];\n        var keysList = Object.keys(headers);\n\n        for (var i = 0; i < keysList.length; i++) {\n          var headerIndex = keysList[i];\n          var headerType = headers[headerIndex][C.TYPE];\n          constructedHeaderRows[headerIndex] = [];\n\n          switch (headerType) {\n            case C.STRING:\n              for (var i = 0; i < data[headerIndex].length; i++) {\n                constructedHeaderRows[headerIndex].push(data[headerIndex][i]);\n              }\n\n              break;\n\n            case C.NUMBER:\n              for (var i = 0; i < data[headerIndex].length; i++) {\n                constructedHeaderRows[headerIndex].push(data[headerIndex][i].toString());\n              }\n\n              break;\n\n            case C.DATE:\n              var format = headers[headerIndex][C.FORMAT];\n              var requiredForamt = headers[headerIndex][C.REQUIRED_FORMAT] || C.MILLI_SECONDS;\n              var milliSeconds;\n\n              for (var i = 0; i < data[headerIndex].length; i++) {\n                if (format.indexOf(C.MILLI_SECONDS) != -1) {\n                  milliSeconds = data[headerIndex][i]; //constructedHeaderRows[headerIndex].push(data[headerIndex][i]);\n                } else {\n                  milliSeconds = moment(data[headerIndex][i], format).valueOf(); //constructedHeaderRows[headerIndex].push(dateValue);\n                }\n\n                var reqDate = getDateInRequiredFormat(milliSeconds, requiredForamt);\n                constructedHeaderRows[headerIndex].push(reqDate);\n              }\n\n              break;\n          }\n        }\n      } else {\n        for (var i = 0; i < data[0].length; i++) {\n          constructedHeaderRows[-1] = [];\n          constructedHeaderRows[-1].push(null);\n        }\n      }\n    }\n\n    function constructColumnSeries(index, series_property, data, parse, constructedHeaderCols, constructedHeaderRows, highchartsJSON, chartType) {\n      highchartsJSON[HCC.SERIES][index] = {};\n      highchartsJSON[HCC.SERIES][index][HCC.TYPE] = HCMaps.chartTypeToHCType[chartType];\n      var dataIndex = series_property[C.DATA_INDEX];\n      var headerColIndex = series_property[C.COL_HEADER_INDEX] != undefined ? series_property[C.COL_HEADER_INDEX] : -1;\n      var headerRowIndex = series_property[C.ROW_HEADER_INDEX] != undefined ? series_property[C.ROW_HEADER_INDEX] : -1;\n      var headerRows = GUtils.convertStringArrayToNumber(Object.keys(constructedHeaderRows));\n      var headerCols = GUtils.convertStringArrayToNumber(Object.keys(constructedHeaderCols));\n      var colCount = constructedHeaderRows[headerRows[0]].length; // The number of elements in header row actually gives the column count\n\n      var rowCount = constructedHeaderCols[headerCols[0]].length; // The number of elements in header column actually gives the row count\n\n      var categories = [];\n\n      if (parse.indexOf(C.PARSE_DIRECTION_VERTICAL) != -1) {\n        highchartsJSON[HCC.SERIES][index][HCC.DATA] = [];\n        highchartsJSON[HCC.SERIES][index][HCC.NAME] = constructedHeaderRows[headerRowIndex][dataIndex];\n\n        for (var i = 0; i < rowCount; i++) {\n          if (headerRows.indexOf(i) == -1) {\n            categories.push(constructedHeaderCols[headerColIndex][i]);\n            highchartsJSON[HCC.SERIES][index][HCC.DATA].push({\n              y: Number(data[i][dataIndex]),\n              decimals: GUtils.getDecimalCount(Number(data[i][dataIndex]))\n            });\n          }\n        }\n\n        highchartsJSON[HCC.HAXIS][0][HCC.CATEGORIES] = categories;\n      } else {\n        highchartsJSON[HCC.SERIES][index][HCC.DATA] = [];\n        highchartsJSON[HCC.SERIES][index][HCC.NAME] = constructedHeaderCols[headerColIndex][dataIndex];\n\n        for (var i = 0; i < colCount; i++) {\n          if (headerCols.indexOf(i) == -1) {\n            categories.push(constructedHeaderRows[headerRowIndex][i]);\n            highchartsJSON[HCC.SERIES][index][HCC.DATA].push({\n              y: Number(data[dataIndex][i]),\n              decimals: GUtils.getDecimalCount(data[dataIndex][i])\n            });\n          }\n        }\n\n        highchartsJSON[HCC.HAXIS][0][HCC.CATEGORIES] = categories;\n      }\n    }\n\n    function constructPieSeries(index, series_property, data, parse, constructedHeaderCols, constructedHeaderRows, highchartsJSON, chartType) {\n      highchartsJSON[HCC.SERIES][index] = {};\n      highchartsJSON[HCC.SERIES][index][HCC.TYPE] = HCMaps.chartTypeToHCType[chartType];\n      var dataIndex = series_property[C.DATA_INDEX];\n      var headerColIndex = series_property[C.COL_HEADER_INDEX] != undefined ? series_property[C.COL_HEADER_INDEX] : -1;\n      var headerRowIndex = series_property[C.ROW_HEADER_INDEX] != undefined ? series_property[C.ROW_HEADER_INDEX] : -1;\n      var headerRows = GUtils.convertStringArrayToNumber(Object.keys(constructedHeaderRows));\n      var headerCols = GUtils.convertStringArrayToNumber(Object.keys(constructedHeaderCols));\n      var colCount = constructedHeaderRows[headerRows[0]].length; // The number of elements in header row actually gives the column count\n\n      var rowCount = constructedHeaderCols[headerCols[0]].length; // The number of elements in header column actually gives the row count\n\n      if (parse.indexOf(C.PARSE_DIRECTION_VERTICAL) != -1) {\n        highchartsJSON[HCC.SERIES][index][HCC.DATA] = [];\n        highchartsJSON[HCC.SERIES][index][HCC.TYPE] = HCMaps.chartTypeToHCType[chartType];\n        highchartsJSON[HCC.SERIES][index][HCC.NAME] = constructedHeaderRows[headerRowIndex][dataIndex];\n\n        for (var i = 0; i < rowCount; i++) {\n          if (headerRows.indexOf(i) == -1) {\n            highchartsJSON[HCC.SERIES][index][HCC.DATA].push({\n              y: Number(data[i][dataIndex]),\n              name: constructedHeaderCols[headerColIndex][i],\n              decimals: GUtils.getDecimalCount(Number(data[i][dataIndex]))\n            });\n          }\n        }\n      } else {\n        highchartsJSON[HCC.SERIES][index][HCC.DATA] = [];\n        highchartsJSON[HCC.SERIES][index][HCC.NAME] = constructedHeaderCols[headerColIndex][dataIndex];\n\n        for (var i = 0; i < colCount; i++) {\n          if (headerCols.indexOf(i) == -1) {\n            highchartsJSON[HCC.SERIES][index][HCC.DATA].push({\n              y: Number(data[dataIndex][i]),\n              name: constructedHeaderRows[headerRowIndex][i],\n              decimals: GUtils.getDecimalCount(Number(data[dataIndex][i]))\n            });\n          }\n        }\n      }\n    }\n\n    function constructLineTimeSeries(index, series_property, data, parse, constructedHeaderCols, constructedHeaderRows, highchartsJSON, chartType) {\n      highchartsJSON[HCC.SERIES][index] = {};\n      highchartsJSON[HCC.SERIES][index][HCC.TYPE] = HCMaps.chartTypeToHCType[chartType];\n      var dataIndex = series_property[C.DATA_INDEX];\n      var headerColIndex = series_property[C.COL_HEADER_INDEX] != undefined ? series_property[C.COL_HEADER_INDEX] : -1;\n      var headerRowIndex = series_property[C.ROW_HEADER_INDEX] != undefined ? series_property[C.ROW_HEADER_INDEX] : -1;\n      var headerRows = GUtils.convertStringArrayToNumber(Object.keys(constructedHeaderRows));\n      var headerCols = GUtils.convertStringArrayToNumber(Object.keys(constructedHeaderCols));\n      var colCount = constructedHeaderRows[headerRows[0]].length; // The number of elements in header row actually gives the column count\n\n      var rowCount = constructedHeaderCols[headerCols[0]].length; // The number of elements in header column actually gives the row count\n\n      if (parse.indexOf(C.PARSE_DIRECTION_VERTICAL) != -1) {\n        highchartsJSON[HCC.SERIES][index][HCC.DATA] = [];\n\n        for (var i = 0; i < rowCount; i++) {\n          if (headerRows.indexOf(i) == -1) {\n            highchartsJSON[HCC.SERIES][index][HCC.DATA].push({\n              x: constructedHeaderCols[headerColIndex][i],\n              y: Number(data[i][dataIndex]),\n              decimals: GUtils.getDecimalCount(Number(data[i][dataIndex]))\n            });\n          }\n        }\n\n        highchartsJSON[HCC.HAXIS][0][HCC.TYPE] = HCC.DATE_TIME;\n      } else {\n        highchartsJSON[HCC.SERIES][index][HCC.DATA] = [];\n\n        for (var i = 0; i < colCount; i++) {\n          if (headerCols.indexOf(i) == -1) {\n            highchartsJSON[HCC.SERIES][index][HCC.DATA].push({\n              x: constructedHeaderRows[headerRowIndex][i],\n              y: Number(data[dataIndex][i]),\n              decimals: GUtils.getDecimalCount(Number(data[dataIndex][i]))\n            });\n          }\n        }\n\n        highchartsJSON[HCC.HAXIS][0][HCC.TYPE] = HCC.DATE_TIME;\n      }\n    }\n\n    function constructBubbleSeries(index, series_property, data, parse, constructedHeaderCols, constructedHeaderRows, highchartsJSON, chartType) {\n      highchartsJSON[HCC.SERIES][index] = {};\n      highchartsJSON[HCC.SERIES][index][HCC.TYPE] = HCMaps.chartTypeToHCType[chartType];\n      var bubbleGroup = series_property[C.BUBBLE_GROUP];\n      var headerRows = GUtils.convertStringArrayToNumber(Object.keys(constructedHeaderRows));\n      var headerCols = GUtils.convertStringArrayToNumber(Object.keys(constructedHeaderCols));\n      var colCount = constructedHeaderRows[headerRows[0]].length; // The number of elements in header row actually gives the column count\n\n      var rowCount = constructedHeaderCols[headerCols[0]].length; // The number of elements in header column actually gives the row count\n\n      if (parse.indexOf(C.PARSE_DIRECTION_VERTICAL) != -1) {\n        highchartsJSON[HCC.SERIES][index][HCC.DATA] = [];\n        highchartsJSON[HCC.SERIES][index][HCC.NAME] = HCC.SERIES + \" \" + (index + 1);\n\n        for (var i = 0; i < rowCount; i++) {\n          if (headerRows.indexOf(i) == -1) {\n            highchartsJSON[HCC.SERIES][index][HCC.DATA].push({\n              x: Number(data[i][bubbleGroup[0]]),\n              y: Number(data[i][bubbleGroup[1]]),\n              z: Number(data[i][bubbleGroup[2]])\n            });\n          }\n        }\n      } else {\n        highchartsJSON[HCC.SERIES][index][HCC.DATA] = [];\n        highchartsJSON[HCC.SERIES][index][HCC.NAME] = HCC.SERIES + \" \" + (index + 1);\n\n        for (var i = 0; i < colCount; i++) {\n          if (headerCols.indexOf(i) == -1) {\n            highchartsJSON[HCC.SERIES][index][HCC.DATA].push({\n              x: Number(data[bubbleGroup[0]][i]),\n              y: Number(data[bubbleGroup[1]][i]),\n              z: Number(data[bubbleGroup[2]][i])\n            });\n          }\n        }\n      }\n    }\n\n    function constructFunnelSeries(index, series_property, data, parse, constructedHeaderCols, constructedHeaderRows, highchartsJSON, chartType) {\n      highchartsJSON[HCC.SERIES][index] = {};\n      highchartsJSON[HCC.SERIES][index][HCC.TYPE] = HCMaps.chartTypeToHCType[chartType];\n      var dataIndex = series_property[C.DATA_INDEX];\n      var headerColIndex = series_property[C.COL_HEADER_INDEX] != undefined ? series_property[C.COL_HEADER_INDEX] : -1;\n      var headerRowIndex = series_property[C.ROW_HEADER_INDEX] != undefined ? series_property[C.ROW_HEADER_INDEX] : -1;\n      var headerRows = GUtils.convertStringArrayToNumber(Object.keys(constructedHeaderRows));\n      var headerCols = GUtils.convertStringArrayToNumber(Object.keys(constructedHeaderCols));\n      var colCount = constructedHeaderRows[headerRows[0]].length; // The number of elements in header row actually gives the column count\n\n      var rowCount = constructedHeaderCols[headerCols[0]].length; // The number of elements in header column actually gives the row count\n\n      var prev = undefined;\n\n      if (parse.indexOf(C.PARSE_DIRECTION_VERTICAL) != -1) {\n        highchartsJSON[HCC.SERIES][index][HCC.DATA] = [];\n        highchartsJSON[HCC.SERIES][index][HCC.NAME] = constructedHeaderRows[headerRowIndex][dataIndex];\n\n        for (var i = 0; i < rowCount; i++) {\n          if (headerRows.indexOf(i) == -1) {\n            prev = prev ? prev : Number(data[i][dataIndex]);\n            highchartsJSON[HCC.SERIES][index][HCC.DATA].push({\n              y: Number(data[i][dataIndex]),\n              name: constructedHeaderCols[headerColIndex][i],\n              percentage: Number(data[i][dataIndex]) / prev * 100,\n              decimals: GUtils.getDecimalCount(Number(data[i][dataIndex]))\n            });\n          }\n        }\n      } else {\n        highchartsJSON[HCC.SERIES][index][HCC.DATA] = [];\n        highchartsJSON[HCC.SERIES][index][HCC.NAME] = constructedHeaderCols[headerColIndex][dataIndex];\n\n        for (var i = 0; i < colCount; i++) {\n          if (headerCols.indexOf(i) == -1) {\n            prev = prev ? prev : Number(data[dataIndex][i]);\n            highchartsJSON[HCC.SERIES][index][HCC.DATA].push({\n              y: Number(data[dataIndex][i]),\n              name: constructedHeaderRows[headerRowIndex][i],\n              percentage: Number(data[dataIndex][i]) / prev * 100,\n              decimals: GUtils.getDecimalCount(Number(data[dataIndex][i]))\n            });\n          }\n        }\n      }\n    }\n\n    function constructWeightedFunnelSeries(index, series_property, data, parse, constructedHeaderCols, constructedHeaderRows, highchartsJSON, chartType) {\n      var dataIndex = series_property[C.DATA_INDEX];\n      var headerColIndex = series_property[C.COL_HEADER_INDEX] != undefined ? series_property[C.COL_HEADER_INDEX] : -1;\n      var headerRowIndex = series_property[C.ROW_HEADER_INDEX] != undefined ? series_property[C.ROW_HEADER_INDEX] : -1;\n      var headerRows = GUtils.convertStringArrayToNumber(Object.keys(constructedHeaderRows));\n      var headerCols = GUtils.convertStringArrayToNumber(Object.keys(constructedHeaderCols));\n      var colCount = constructedHeaderRows[headerRows[0]].length; // The number of elements in header row actually gives the column count\n\n      var rowCount = constructedHeaderCols[headerCols[0]].length; // The number of elements in header column actually gives the row count\n\n      var prev = undefined;\n      var seriesIdx = 0;\n\n      if (parse.indexOf(C.PARSE_DIRECTION_VERTICAL) != -1) {\n        /**\n        * Find the max element\n        */\n        var maxValue = Number.MIN_SAFE_INTEGER;\n\n        for (var i = 0; i < rowCount; i++) {\n          data[i][dataIndex] > maxValue && (maxValue = data[i][dataIndex]);\n        }\n\n        var halfMaxValue = maxValue / 2;\n\n        for (var i = 0; i < rowCount; i++) {\n          if (headerRows.indexOf(i) == -1) {\n            highchartsJSON[HCC.SERIES][seriesIdx] = {};\n            highchartsJSON[HCC.SERIES][seriesIdx][HCC.DATA] = [];\n            highchartsJSON[HCC.SERIES][index][HCC.TYPE] = HCMaps.chartTypeToHCType[chartType];\n            highchartsJSON[HCC.SERIES][seriesIdx][HCC.NAME] = constructedHeaderCols[headerColIndex][i];\n            var halfTheValue = Number(data[i][dataIndex]) / 2;\n            var high = halfMaxValue + halfTheValue;\n            var low = halfMaxValue - halfTheValue;\n            prev = prev ? prev : Number(data[i][dataIndex]);\n            highchartsJSON[HCC.SERIES][seriesIdx][HCC.DATA].push({\n              y: Number(data[i][dataIndex]),\n              name: constructedHeaderCols[headerColIndex][i],\n              percentage: Number(data[i][dataIndex]) / prev * 100,\n              low: low,\n              high: high,\n              decimals: GUtils.getDecimalCount(Number(data[i][dataIndex]))\n            });\n            seriesIdx++;\n          }\n        }\n      } else {\n        /**\n        * Find the max element\n        */\n        var maxValue = Number.MIN_SAFE_INTEGER;\n\n        for (var i = 0; i < colCount; i++) {\n          data[dataIndex][i] > maxValue && (maxValue = data[dataIndex][i]);\n        }\n\n        var halfMaxValue = maxValue / 2;\n\n        for (var i = 0; i < colCount; i++) {\n          if (headerCols.indexOf(i) == -1) {\n            highchartsJSON[HCC.SERIES][seriesIdx] = {};\n            highchartsJSON[HCC.SERIES][seriesIdx][HCC.DATA] = [];\n            highchartsJSON[HCC.SERIES][index][HCC.TYPE] = HCMaps.chartTypeToHCType[chartType];\n            highchartsJSON[HCC.SERIES][seriesIdx][HCC.NAME] = constructedHeaderRows[headerRowIndex][i];\n            var halfTheValue = Number(data[dataIndex][i]) / 2;\n            var high = halfMaxValue + halfTheValue;\n            var low = halfMaxValue - halfTheValue;\n            prev = prev ? prev : Number(data[dataIndex][i]);\n            highchartsJSON[HCC.SERIES][seriesIdx][HCC.DATA].push({\n              y: Number(data[dataIndex][i]),\n              name: constructedHeaderRows[headerRowIndex][i],\n              percentage: Number(data[dataIndex][i]) / prev * 100,\n              low: low,\n              high: high,\n              decimals: GUtils.getDecimalCount(Number(data[dataIndex][i]))\n            });\n          }\n        }\n      }\n    }\n\n    function constructWordCloudSeries(index, series_property, data, parse, constructedHeaderCols, constructedHeaderRows, highchartsJSON, chartType) {\n      highchartsJSON[HCC.SERIES][index] = {};\n      highchartsJSON[HCC.SERIES][index][HCC.TYPE] = HCMaps.chartTypeToHCType[chartType];\n      var headerColIndex = series_property[C.COL_HEADER_INDEX] != undefined ? series_property[C.COL_HEADER_INDEX] : -1;\n      var headerRowIndex = series_property[C.ROW_HEADER_INDEX] != undefined ? series_property[C.ROW_HEADER_INDEX] : -1;\n      var headerRows = GUtils.convertStringArrayToNumber(Object.keys(constructedHeaderRows));\n      var headerCols = GUtils.convertStringArrayToNumber(Object.keys(constructedHeaderCols));\n      var colCount = constructedHeaderRows[headerRows[0]].length; // The number of elements in header row actually gives the column count\n\n      var rowCount = constructedHeaderCols[headerCols[0]].length; // The number of elements in header column actually gives the row count\n\n      var seriesIndices = series_property[C.WORDCLOUD_INDICES];\n\n      if (parse.indexOf(C.PARSE_DIRECTION_VERTICAL) != -1) {\n        var seriesIndicesLen = seriesIndices.length;\n        var uniqueWord = {};\n\n        for (var idx = 0; idx < seriesIndicesLen; idx++) {\n          for (var j = 0; j < rowCount; j++) {\n            if (uniqueWord[data[j][idx]] == undefined) {\n              uniqueWord[data[j][idx]] = 0;\n            }\n\n            uniqueWord[data[j][idx]]++;\n          }\n        }\n      } else {\n        var _seriesIndicesLen = seriesIndices.length;\n        var uniqueWord = {};\n\n        for (var idx = 0; idx < _seriesIndicesLen; idx++) {\n          for (var j = 0; j < colCount; j++) {\n            if (uniqueWord[data[idx][j]] == undefined) {\n              uniqueWord[data[idx][j]] = 0;\n            }\n\n            uniqueWord[data[idx][j]]++;\n          }\n        }\n      }\n\n      highchartsJSON[HCC.SERIES][index][HCC.DATA] = [];\n      var wordsList = Object.keys(uniqueWord);\n      var wordsListLength = wordsList ? wordsList.length : 0;\n\n      for (var i = 0; i < wordsListLength; i++) {\n        highchartsJSON[HCC.SERIES][index][HCC.DATA].push({\n          name: wordsList[i],\n          weight: uniqueWord[wordsList[i]]\n        });\n      }\n    }\n\n    function constructBulletColumnSeries(index, series_property, data, parse, constructedHeaderCols, constructedHeaderRows, highchartsJSON, chartType) {\n      var actualIndex = series_property[C.ACTUAL_INDEX];\n      var targetIndex = series_property[C.TARGET_INDEX];\n      var headerColIndex = series_property[C.COL_HEADER_INDEX] != undefined ? series_property[C.COL_HEADER_INDEX] : -1;\n      var headerRowIndex = series_property[C.ROW_HEADER_INDEX] != undefined ? series_property[C.ROW_HEADER_INDEX] : -1;\n      var headerRows = GUtils.convertStringArrayToNumber(Object.keys(constructedHeaderRows));\n      var headerCols = GUtils.convertStringArrayToNumber(Object.keys(constructedHeaderCols));\n      var colCount = constructedHeaderRows[headerRows[0]].length; // The number of elements in header row actually gives the column count\n\n      var rowCount = constructedHeaderCols[headerCols[0]].length; // The number of elements in header column actually gives the row count\n\n      highchartsJSON[HCC.SERIES][index] = {};\n      highchartsJSON[HCC.SERIES][index][HCC.TYPE] = HCMaps.chartTypeToHCType[chartType];\n      highchartsJSON[HCC.SERIES][index][HCC.DATA] = [];\n\n      if (parse.indexOf(C.PARSE_DIRECTION_VERTICAL) != -1) {\n        highchartsJSON[HCC.SERIES][index][HCC.NAME] = constructedHeaderRows[headerRowIndex][actualIndex];\n\n        for (var i = 0; i < rowCount; i++) {\n          if (headerRows.indexOf(i) == -1) {\n            highchartsJSON[HCC.SERIES][index][HCC.DATA].push({\n              y: Number(data[i][actualIndex]),\n              target: Number(data[i][targetIndex]),\n              decimals: GUtils.getDecimalCount(Number(data[i][actualIndex]))\n            });\n          }\n        }\n      } else {\n        highchartsJSON[HCC.SERIES][index][HCC.NAME] = constructedHeaderCols[headerColIndex][actualIndex];\n\n        for (var i = 0; i < colCount; i++) {\n          if (headerCols.indexOf(i) == -1) {\n            highchartsJSON[HCC.SERIES][index][HCC.DATA].push({\n              y: Number(data[actualIndex][i]),\n              targetIndex: Number(data[targetIndex][i]),\n              decimals: GUtils.getDecimalCount(Number(data[actualIndex][i]))\n            });\n          }\n        }\n      }\n    }\n\n    function constructHistogramSeries(index, series_property, data, parse, constructedHeaderCols, constructedHeaderRows, highchartsJSON, chartType) {\n      highchartsJSON[HCC.SERIES][index] = {};\n      highchartsJSON[HCC.SERIES][index][HCC.TYPE] = HCMaps.chartTypeToHCType[chartType];\n      var headerColIndex = series_property[C.COL_HEADER_INDEX] != undefined ? series_property[C.COL_HEADER_INDEX] : -1;\n      var headerRowIndex = series_property[C.ROW_HEADER_INDEX] != undefined ? series_property[C.ROW_HEADER_INDEX] : -1;\n      var headerRows = GUtils.convertStringArrayToNumber(Object.keys(constructedHeaderRows));\n      var headerCols = GUtils.convertStringArrayToNumber(Object.keys(constructedHeaderCols));\n      var colCount = constructedHeaderRows[headerRows[0]].length; // The number of elements in header row actually gives the column count\n\n      var rowCount = constructedHeaderCols[headerCols[0]].length; // The number of elements in header column actually gives the row count\n\n      var seriesIndices = series_property[C.HISTOGRAM_INDICES];\n      var seriesIndicesLen = seriesIndices.length;\n      var binningInterval = highchartsJSON[HCConstants.HAXIS] && highchartsJSON[HCConstants.HAXIS][0] ? highchartsJSON[HCConstants.HAXIS][0][HCConstants.BINNING_INTERVAL] : undefined;\n      var dataArr = [];\n\n      if (parse.indexOf(C.PARSE_DIRECTION_VERTICAL) != -1) {\n        for (var idx = 0; idx < seriesIndicesLen; idx++) {\n          for (var j = 0; j < rowCount; j++) {\n            if (headerRows.indexOf(j) == -1) {\n              dataArr.push(Number(data[j][seriesIndices[idx]]));\n            }\n          }\n        }\n      } else {\n        for (var idx = 0; idx < seriesIndicesLen; idx++) {\n          for (var j = 0; j < colCount; j++) {\n            if (headerCols.indexOf(j) == -1) {\n              dataArr.push(Number(data[seriesIndices[idx]][j]));\n            }\n          }\n        }\n      }\n\n      var binnedData = HistogramUtil.compute(dataArr, binningInterval);\n      var modifiedData = [];\n      var categoriesArr = Object.keys(binnedData);\n\n      for (var i = 0; i < categoriesArr.length; i++) {\n        modifiedData.push({\n          y: Math.round(Number(binnedData[categoriesArr[i]])),\n          decimals: GUtils.getDecimalCount(Math.round(Number(binnedData[categoriesArr[i]])))\n        });\n      }\n\n      highchartsJSON[HCC.SERIES][index] = {};\n      highchartsJSON[HCC.SERIES][index][HCC.TYPE] = HCMaps.chartTypeToHCType[chartType];\n      highchartsJSON[HCC.SERIES][index][HCC.DATA] = modifiedData;\n      highchartsJSON[HCC.SERIES][index][HCC.NAME] = \"Distribution\"; //No I18N\n\n      highchartsJSON[HCC.HAXIS][0][HCC.CATEGORIES] = categoriesArr;\n    }\n\n    function constructRaceBarSeries(index, series_property, data, parse, constructedHeaderCols, constructedHeaderRows, highchartsJSON, chartType) {\n      //Construct last index\n      var seriesIndices = series_property[C.RACE_CHART_INDICES];\n      var enableCumulation = series_property[C.ENABLE_CUMULATION];\n      var seriesLen = seriesIndices ? seriesIndices.length : 0;\n\n      if (enableCumulation) {\n        RaceBarSeriesConstructor.construct(index, seriesIndices[0], series_property, data, parse, constructedHeaderCols, constructedHeaderRows, highchartsJSON, chartType, true);\n      } else {\n        if (seriesLen >= 1) {\n          var lastIndex = seriesIndices[seriesLen - 1];\n          RaceBarSeriesConstructor.construct(index, lastIndex, series_property, data, parse, constructedHeaderCols, constructedHeaderRows, highchartsJSON, chartType, true);\n        }\n      }\n    }\n\n    function constructSeries(type, chartType, dataMeta, highchartsJSON, chartJSON) {\n      var data = dataMeta[C.DATA];\n      var parse = dataMeta[C.PARSE_DIRECTION];\n      var headerColumns = dataMeta[C.HEADER_COLUMNS];\n      var headerRows = dataMeta[C.HEADER_ROWS];\n      var dataArrayInfo = dataMeta[C.DATA_ARRAY_INFO];\n      var dataKeys = Object.keys(dataArrayInfo);\n      var series_properties = chartJSON[C.SERIES_PROPERTIES];\n      var constructedHeaderCols = {};\n      var constructedHeaderRows = {};\n      constructHeaderColumns(headerColumns, constructedHeaderCols, data);\n      constructHeaderRows(headerRows, constructedHeaderRows, data); //construct Series\n\n      highchartsJSON[HCConstants.SERIES] = [];\n\n      for (var i = 0; i < series_properties.length; i++) {\n        var series_property = series_properties[i];\n        var series_type = series_property[C.TYPE];\n\n        if (keyToFunction[series_type]) {\n          keyToFunction[series_type](i, series_property, data, parse, constructedHeaderCols, constructedHeaderRows, highchartsJSON, series_type);\n        }\n      }\n    }\n\n    var keyToFunction = {};\n    keyToFunction[C.COL] = constructColumnSeries;\n    keyToFunction[C.STACKED_COL] = constructColumnSeries;\n    keyToFunction[C.STACKED_PERCENT_COL] = constructColumnSeries;\n    keyToFunction[C.GROUPED_COL] = constructColumnSeries;\n    keyToFunction[C.BAR] = constructColumnSeries;\n    keyToFunction[C.GROUPED_BAR] = constructColumnSeries;\n    keyToFunction[C.STACKED_BAR] = constructColumnSeries;\n    keyToFunction[C.STACKED_PERCENT_BAR] = constructColumnSeries;\n    keyToFunction[C.RACEBAR] = constructRaceBarSeries;\n    keyToFunction[C.AREA] = constructColumnSeries;\n    keyToFunction[C.AREA_SPLINE] = constructColumnSeries;\n    keyToFunction[C.STACKED_AREA] = constructColumnSeries;\n    keyToFunction[C.STACKED_PERCENT_AREA] = constructColumnSeries;\n    keyToFunction[C.LINE] = constructColumnSeries;\n    keyToFunction[C.SPLINE] = constructColumnSeries;\n    keyToFunction[C.STEP_LINE] = constructColumnSeries;\n    keyToFunction[C.PIE] = constructPieSeries;\n    keyToFunction[C.SEMI_PIE] = constructPieSeries;\n    keyToFunction[C.DONUT] = constructPieSeries;\n    keyToFunction[C.SEMI_DONUT] = constructPieSeries;\n    keyToFunction[C.SCATTER] = constructColumnSeries;\n    keyToFunction[C.SCATTER_LINE] = constructColumnSeries;\n    keyToFunction[C.SCATTER_LINE_MARKERS] = constructColumnSeries;\n    keyToFunction[C.LINE_TIME_SERIES] = constructLineTimeSeries;\n    keyToFunction[C.AREA_TIME_SERIES] = constructLineTimeSeries;\n    keyToFunction[C.BUBBLE] = constructBubbleSeries;\n    keyToFunction[C.FUNNEL] = constructFunnelSeries;\n    keyToFunction[C.WEIGHTED_FUNNEL] = constructWeightedFunnelSeries;\n    keyToFunction[C.WORDCLOUD] = constructWordCloudSeries;\n    keyToFunction[C.BULLET_COL] = constructBulletColumnSeries;\n    keyToFunction[C.BULLET_BAR] = constructBulletColumnSeries;\n    keyToFunction[C.HISTOGRAM] = constructHistogramSeries;\n    keyToFunction[C.COMBO] = constructColumnSeries;\n    return {\n      construct: constructSeries\n    };\n  }();\n\n  ctx.HCSeriesConstructor = HCSeriesConstructor;\n})(window || this);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/Utils/HCSeriesConstructor.js\n");

/***/ }),

/***/ "./js/Utils/HCSeriesPropertiesHandler.js":
/*!***********************************************!*\
  !*** ./js/Utils/HCSeriesPropertiesHandler.js ***!
  \***********************************************/
/***/ (function() {

"use strict";
eval("/*$Id$*/\n //No I18N\n\n(function (ctx) {\n  var C = ctx.ChartConstants;\n  var HCC = ctx.HCConstants;\n  var KL = ctx.ChartKeyList;\n  var HCKL = ctx.HCKeyList;\n  var HCMaps = ctx.HCMaps;\n  var DEFAULTS = ctx.ChartDefaults.DEFAULTS;\n  var HCDefaults = ctx.HCDefaults;\n  var HCUtils = ctx.HCUtils;\n  var GUtils = ctx.GeneralUtilities;\n  var HCDatalabelHandler = ctx.HCDatalabelHandler;\n  var HCTooltipHandler = ctx.HCTooltipHandler;\n\n  var HCSeriesPropertiesHandler = function () {\n    function setDefaultBorderColor(chartJSON, highchartsJSON, type, chartType) {\n      var series = highchartsJSON[HCC.SERIES];\n      var series_properties = chartJSON[C.SERIES_PROPERTIES];\n      var seriesLen = series ? series.length : 0;\n\n      for (var i = 0; i < seriesLen; i++) {\n        var cType = series_properties[i] ? series_properties[i][C.TYPE] : chartType; //Only For special case : Weighted Funnel\n\n        var hType = HCMaps.chartTypeToHCType[cType];\n\n        if (GUtils.isPieSeries(cType) || cType.indexOf(C.RACEBAR) != -1 || cType.indexOf(C.WORDCLOUD) != -1 || hType.indexOf(HCC.FUNNEL) != -1) {\n          var pieData = series[i][HCC.DATA];\n          var pieDataLen = pieData ? pieData.length : 0;\n\n          for (var j = 0; j < pieDataLen; j++) {\n            handleBorderColor(pieData[j], C.NONE);\n          }\n        } else {\n          handleBorderColor(series[i], C.NONE);\n        }\n      }\n    }\n\n    function setBorderColor(chartJSON, highchartsJSON, type, chartType) {\n      var series = highchartsJSON[HCC.SERIES];\n      var series_properties = chartJSON[C.SERIES_PROPERTIES];\n      var series_propertiesLen = series_properties ? series_properties.length : 0;\n\n      for (var i = 0; i < series_propertiesLen; i++) {\n        var cType = series_properties[i] ? series_properties[i][C.TYPE] : chartType; //Only For special case : Weighted Funnel\n\n        var hType = HCMaps.chartTypeToHCType[cType]; //For Weighted Funnel Diff Handling - Set Data Color to Series Color\n\n        if (cType.indexOf(C.WEIGHTED_FUNNEL) != -1) {\n          var seriesIdx = i;\n          var dataProperties = series_properties[i][C.DATA_PROPERTIES];\n          var dataPropertiesLen = dataProperties ? dataProperties.length : 0;\n\n          for (var j = 0; j < dataPropertiesLen; j++, seriesIdx++) {\n            if (dataProperties[j]) {\n              if (dataProperties[j][C.BORDER_COLOR] != null) {\n                if (series[seriesIdx] && series[seriesIdx][HCC.TYPE].indexOf(hType) != -1) {\n                  // series[seriesIdx][HCC.SERIES_COLOR] = dataProperties[j][C.BORDER_COLOR];\n                  handleBorderColor(series[seriesIdx], dataProperties[j][C.BORDER_COLOR], series[seriesIdx][HCC.SERIES_COLOR]);\n                } else {\n                  break;\n                }\n              }\n            }\n          }\n        } else {\n          if (series_properties[i]) {\n            if (series_properties[i][C.BORDER_COLOR] != null) {\n              //series[i] && (series[i][HCC.BORDER_COLOR] = series_properties[i][C.BORDER_COLOR]);\n              series[i] && handleBorderColor(series[i], series_properties[i][C.BORDER_COLOR], series[i][HCC.SERIES_COLOR]);\n            }\n\n            var dataProperties = series_properties[i][C.DATA_PROPERTIES];\n            var dataPropertiesLen = dataProperties ? dataProperties.length : 0;\n            var seriesData = series[i][HCC.DATA];\n\n            for (var j = 0; j < dataPropertiesLen; j++) {\n              if (dataProperties[j]) {\n                if (dataProperties[j][C.BORDER_COLOR] != null) {\n                  //seriesData[j] && (seriesData[j][HCC.DATA_COLOR] = dataProperties[j][C.DATA_COLOR]);\n                  handleBorderColor(seriesData[j], dataProperties[j][C.BORDER_COLOR], seriesData[j][HCC.DATA_COLOR]);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    function handleBorderColor(obj, borderProperty, seriesColor) {\n      switch (borderProperty) {\n        case C.NONE:\n          obj[HCC.BORDER_WIDTH] = DEFAULTS.BORDER_NONE;\n          break;\n\n        case C.DEFAULT:\n          {\n            // const seriesColor = series[HCC.SERIES_COLOR] || GeneralUtilities.generateSeriesColor(highchartsJSON[HCC.COLORS], i);\n            obj[HCC.BORDER_COLOR] = GeneralUtilities.getDiffShade(seriesColor, DEFAULTS.BORDER_BRIGHTNESS);\n            obj[HCC.BORDER_WIDTH] = DEFAULTS.BORDER_WIDTH;\n            break;\n          }\n\n        default:\n          obj[HCC.BORDER_COLOR] = borderProperty;\n          obj[HCC.BORDER_WIDTH] = DEFAULTS.BORDER_WIDTH;\n      }\n    }\n\n    function setDefaultSeriesColor(chartJSON, highchartsJSON, type, chartType) {\n      var series = highchartsJSON[HCC.SERIES];\n      var series_properties = chartJSON[C.SERIES_PROPERTIES];\n      var colors = highchartsJSON[HCC.COLORS];\n      var shades = [1, 0.9, 1.1];\n      var shadesIdx = 0;\n      var colorsLen = colors.length;\n      var shadesLen = shades.length;\n      var seriesLen = series ? series.length : 0;\n      var clrIdx = 0;\n\n      for (var i = 0; i < seriesLen; i++) {\n        var cType = series_properties[i] ? series_properties[i][C.TYPE] : chartType; //Only For special case : Weighted Funnel\n\n        var hType = HCMaps.chartTypeToHCType[cType];\n\n        if (GUtils.isPieSeries(cType) || cType.indexOf(C.RACEBAR) != -1 || cType.indexOf(C.WORDCLOUD) != -1 || hType.indexOf(HCC.FUNNEL) != -1) {\n          var pieData = series[i][HCC.DATA];\n          var pieDataLen = pieData ? pieData.length : 0;\n          var dataShadesIdx = 0;\n\n          for (var j = 0; j < pieDataLen;) {\n            var color = GUtils.getDiffShadeWithAlpha(colors[j % colorsLen], shades[dataShadesIdx]);\n            pieData[j][HCC.DATA_COLOR] = color;\n            j++;\n\n            if (j % colorsLen == 0) {\n              dataShadesIdx++;\n              dataShadesIdx = dataShadesIdx % shadesLen;\n            }\n          }\n        } else if (hType.indexOf(HCC.AREA) != -1) {\n          var fillOpacity = series_properties[i][C.AREA_OPACITY];\n          var color = GUtils.getDiffShadeWithAlpha(GUtils.setAlphaToColor(colors[clrIdx % colorsLen], fillOpacity), shades[shadesIdx]);\n          series[i][HCC.SERIES_COLOR] = color;\n          clrIdx++;\n\n          if (clrIdx % colorsLen == 0) {\n            shadesIdx++;\n            shadesIdx = shadesIdx % shadesLen;\n          }\n        } else {\n          var color = GUtils.getDiffShadeWithAlpha(colors[clrIdx % colorsLen], shades[shadesIdx]);\n          series[i][HCC.SERIES_COLOR] = color;\n          clrIdx++;\n\n          if (clrIdx % colorsLen == 0) {\n            shadesIdx++;\n            shadesIdx = shadesIdx % shadesLen;\n          }\n        }\n      }\n    }\n\n    function setSeriesColor(chartJSON, highchartsJSON, type, chartType) {\n      var series = highchartsJSON[HCC.SERIES];\n      var series_properties = chartJSON[C.SERIES_PROPERTIES];\n      var series_propertiesLen = series_properties ? series_properties.length : 0;\n\n      for (var i = 0; i < series_propertiesLen; i++) {\n        var cType = series_properties[i] ? series_properties[i][C.TYPE] : chartType; //Only For special case : Weighted Funnel\n\n        var hType = HCMaps.chartTypeToHCType[cType]; //For Weighted Funnel Diff Handling - Set Data Color to Series Color\n\n        if (cType.indexOf(C.WEIGHTED_FUNNEL) != -1) {\n          var seriesIdx = i;\n          var dataProperties = series_properties[i][C.DATA_PROPERTIES];\n          var dataPropertiesLen = dataProperties ? dataProperties.length : 0;\n\n          for (var j = 0; j < dataPropertiesLen; j++, seriesIdx++) {\n            if (dataProperties[j]) {\n              if (dataProperties[j][C.DATA_COLOR] != null) {\n                if (series[seriesIdx] && series[seriesIdx][HCC.TYPE].indexOf(hType)) {\n                  series[seriesIdx][HCC.SERIES_COLOR] = dataProperties[j][C.DATA_COLOR];\n                } else {\n                  break;\n                }\n              }\n            }\n          }\n        } else {\n          if (series_properties[i]) {\n            if (series_properties[i][C.SERIES_COLOR] != null) {\n              series[i] && (series[i][HCC.SERIES_COLOR] = series_properties[i][C.SERIES_COLOR]);\n            }\n\n            var dataProperties = series_properties[i][C.DATA_PROPERTIES];\n            var dataPropertiesLen = dataProperties ? dataProperties.length : 0;\n            var seriesData = series[i][HCC.DATA];\n\n            for (var j = 0; j < dataPropertiesLen; j++) {\n              if (dataProperties[j]) {\n                if (dataProperties[j][C.DATA_COLOR] != null) {\n                  seriesData[j] && (seriesData[j][HCC.DATA_COLOR] = dataProperties[j][C.DATA_COLOR]);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    function handleDatalabel(series, seriesProperties, cJSON, hcJSON, type, chartType) {\n      series[HCC.DATALABELS] || (series[HCC.DATALABELS] = {});\n    }\n\n    function handleDatalabelStatus(series, seriesProperties, cJSON, hcJSON, type, chartType) {\n      handleDatalabel(series, seriesProperties, cJSON, hcJSON, type, chartType);\n      var dataLabels = seriesProperties[C.DATALABELS];\n      dataLabels[C.ENABLED] != null && (series[HCC.DATALABELS][HCC.ENABLED] = dataLabels[C.ENABLED]);\n    }\n\n    function handleDatalabelStyle(series, seriesProperties, cJSON, hcJSON, type, chartType) {\n      handleDatalabel(series, seriesProperties, cJSON, hcJSON, type, chartType);\n      series[HCC.DATALABELS][HCC.STYLE] || (series[HCC.DATALABELS][HCC.STYLE] = {}); //Set Text Outline to 0;\n\n      series[HCC.DATALABELS][HCC.STYLE][HCC.TEXT_OUTLINE] = 0;\n    }\n\n    function handleDatalabelFontStyle(series, seriesProperties, cJSON, hcJSON, type, chartType) {\n      handleDatalabel(series, seriesProperties, cJSON, hcJSON, type, chartType);\n      var dataLabels = seriesProperties[C.DATALABELS];\n      dataLabels[C.FONT_STYLE] != null && (series[HCC.DATALABELS][HCC.STYLE][HCC.FONT_STYLE] = dataLabels[C.FONT_STYLE]);\n    }\n\n    function handleDatalabelFontSize(series, seriesProperties, cJSON, hcJSON, type, chartType) {\n      handleDatalabel(series, seriesProperties, cJSON, hcJSON, type, chartType);\n      var dataLabels = seriesProperties[C.DATALABELS];\n      dataLabels[C.FONT_SIZE] != null && (series[HCC.DATALABELS][HCC.STYLE][HCC.FONT_SIZE] = dataLabels[C.FONT_SIZE]);\n    }\n\n    function handleDatalabelFontWeight(series, seriesProperties, cJSON, hcJSON, type, chartType) {\n      handleDatalabel(series, seriesProperties, cJSON, hcJSON, type, chartType);\n      var dataLabels = seriesProperties[C.DATALABELS];\n      dataLabels[C.FONT_WEIGHT] != null && (series[HCC.DATALABELS][HCC.STYLE][HCC.FONT_WEIGHT] = dataLabels[C.FONT_WEIGHT]);\n    }\n\n    function handleDatalabelFontColor(series, seriesProperties, cJSON, hcJSON, type, chartType) {\n      handleDatalabel(series, seriesProperties, cJSON, hcJSON, type, chartType);\n      var bgColor = hcJSON[HCC.CHART][HCC.BACKGROUND_COLOR];\n      var dataLabels = seriesProperties[C.DATALABELS];\n\n      if (dataLabels[C.FONT_COLOR] != null) {\n        if (dataLabels[C.FONT_COLOR].indexOf(C.AUTO_COLOR) != -1) {\n          series[HCC.DATALABELS][HCC.STYLE][HCC.FONT_COLOR] = GUtils.findAutoColor(HCUtils.getBGColor(bgColor), KL.DATALABEL_FONT_COLOR);\n        } else {\n          series[HCC.DATALABELS][HCC.STYLE][HCC.FONT_COLOR] = dataLabels[C.FONT_COLOR];\n        }\n      }\n    }\n\n    function handleDatalabelFormat(series, seriesProperties, cJSON, hcJSON, type, chartType, index) {\n      handleDatalabel(series, seriesProperties, cJSON, hcJSON, type, chartType);\n      var dataLabels = seriesProperties[C.DATALABELS];\n      dataLabels[C.FORMAT] != null && HCDatalabelHandler.handleDatalabelFormat(dataLabels[C.FORMAT], type, hcJSON[HCC.SERIES], index, chartType);\n    }\n\n    function handleDatalabelPosition(series, seriesProperties, cJSON, hcJSON, type, chartType, index) {\n      handleDatalabel(series, seriesProperties, cJSON, hcJSON, type, chartType);\n      var dataLabels = seriesProperties[C.DATALABELS];\n      dataLabels[C.POSITION] != null && HCDatalabelHandler.handleDatalabelPosition(dataLabels[C.POSITION], type, hcJSON[HCC.SERIES], index, chartType);\n    }\n\n    function handleSeriesColor(series, seriesProperties, cJSON, hcJSON, type, chartType) {\n      seriesProperties[C.SERIES_COLOR] != null && (series[HCC.SERIES_COLOR] = seriesProperties[C.SERIES_COLOR]);\n    }\n\n    function handleSeriesBorderColor(series, seriesProperties, cJSON, hcJSON, type, chartType) {\n      seriesProperties[C.BORDER_COLOR] != null && (series[HCC.BORDER_COLOR] = seriesProperties[C.BORDER_COLOR]);\n    }\n\n    function handleDataColors(series, seriesProperties, cJSON, hcJSON, type, chartType) {\n      var dataProperties = seriesProperties[C.DATA_PROPERTIES];\n\n      if (dataProperties != null) {\n        var dataPropsLen = dataProperties ? dataProperties.length : 0;\n\n        for (var i = 0; i < dataPropsLen; i++) {\n          var dataProperty = dataProperties[i];\n          var dataColor = dataProperty[C.DATA_COLOR];\n\n          if (dataColor != null && series[HCC.DATA] && series[HCC.DATA][i]) {\n            series[HCC.DATA][i][HCC.DATA_COLOR] = dataColor;\n          }\n        }\n      }\n    }\n\n    function handleDataBorderColors(series, seriesProperties, cJSON, hcJSON, type, chartType) {\n      var dataProperties = seriesProperties[C.DATA_PROPERTIES];\n\n      if (dataProperties != null) {\n        var dataPropsLen = dataProperties ? dataProperties.length : 0;\n\n        for (var i = 0; i < dataPropsLen; i++) {\n          var dataProperty = dataProperties[i];\n          var dataBorderColor = dataProperty[C.DATA_BORDER_COLORS];\n\n          if (dataBorderColor != null && series[HCC.DATA] && series[HCC.DATA][i]) {\n            series[HCC.DATA][i][HCC.DATA_BORDER_COLORS] = dataBorderColor;\n          }\n        }\n      }\n    }\n\n    function handleThresholdValue(series, seriesProperties, cJSON, hcJSON, type, chartType) {\n      seriesProperties[C.THRESHOLD] != null && (series[HCC.THRESHOLD] = seriesProperties[C.THRESHOLD]);\n    }\n\n    function handleNegativeColor(series, seriesProperties, cJSON, hcJSON, type, chartType) {\n      seriesProperties[C.NEGATIVE_COLOR] != null && (series[HCC.NEGATIVE_COLOR] = seriesProperties[C.NEGATIVE_COLOR]);\n    }\n\n    function handleMarker(series, seriesProperties, cJSON, hcJSON, type, chartType) {\n      series[HCC.MARKER] || (series[HCC.MARKER] = {});\n    }\n\n    function handleMarkerStatus(series, seriesProperties, cJSON, hcJSON, type, chartType) {\n      series[HCC.MARKER][HCC.ENABLED] = seriesProperties[C.MARKER_STATUS];\n    }\n\n    function handleMarkerShape(series, seriesProperties, cJSON, hcJSON, type, chartType) {\n      series[HCC.MARKER][HCC.SYMBOL] = seriesProperties[C.MARKER_SHAPE];\n    }\n\n    function handleMarkerSize(series, seriesProperties, cJSON, hcJSON, type, chartType) {\n      series[HCC.MARKER][HCC.RADIUS] = seriesProperties[C.MARKER_SIZE];\n    }\n\n    function handleMarkerColor(series, seriesProperties, cJSON, hcJSON, type, chartType) {\n      if (seriesProperties && seriesProperties[C.MARKER_COLOR] != null) {\n        if (seriesProperties[C.MARKER_COLOR].indexOf(C.AUTO_COLOR) != -1) {\n          series[HCC.MARKER][HCC.FILL_COLOR] = undefined;\n        } else {\n          series[HCC.MARKER][HCC.FILL_COLOR] = seriesProperties[C.MARKER_COLOR];\n        }\n      }\n    }\n\n    function handleMarkerBorderColor(series, seriesProperties, cJSON, hcJSON, type, chartType) {\n      if (seriesProperties && seriesProperties[C.MARKER_BORDER_COLOR] != null) {\n        if (seriesProperties[C.MARKER_BORDER_COLOR].indexOf(C.AUTO_COLOR) != -1) {\n          series[HCC.MARKER][HCC.LINE_COLOR] = undefined;\n        } else {\n          series[HCC.MARKER][HCC.LINE_COLOR] = seriesProperties[C.MARKER_BORDER_COLOR];\n        }\n      }\n    }\n\n    function handleLineType(series, seriesProperties, cJSON, hcJSON, type, chartType) {\n      series[HCC.DASH_STYLE] = seriesProperties[C.LINE_TYPE];\n    }\n\n    function handleAreaOpacity(series, seriesProperties, cJSON, hcJSON, type, chartType) {\n      series[HCC.FILL_OPACITY] = seriesProperties[C.AREA_OPACITY];\n    }\n\n    function handleTargetOptions(series, seriesProperties, cJSON, hcJSON, type, chartType) {\n      series[HCC.TARGET_OPTIONS] || (series[HCC.TARGET_OPTIONS] = {});\n    }\n\n    function handleTargetColor(series, seriesProperties, cJSON, hcJSON, type, chartType) {\n      handleTargetOptions(series, seriesProperties, cJSON, hcJSON, type, chartType);\n\n      if (seriesProperties[HCC.TARGET_OPTIONS] && seriesProperties[HCC.TARGET_OPTIONS][HCC.COLOR] != null) {\n        series[HCC.TARGET_OPTIONS][HCC.COLOR] = seriesProperties[HCC.TARGET_OPTIONS][HCC.COLOR];\n      }\n    }\n\n    function handleSortOrder(series, seriesProperties, cJSON, hcJSON, type, chartType) {\n      var sortingOrder = seriesProperties[C.SORT_ORDER]; // Only one series\n\n      if (sortingOrder != undefined) {\n        series[HCC.DATA_SORTING] = {};\n        series[HCC.DATA_SORTING][HCC.ENABLED] = true;\n        series[HCC.DATA_SORTING][HCC.ORDER] = sortingOrder;\n\n        if (sortingOrder.indexOf(HCC.DESC) != -1) {\n          hcJSON[HCC.CAPTION][HCC.ALIGN] = HCC.ALIGN_RIGHT;\n          hcJSON[HCC.CAPTION][HCC.VERTICAL_ALIGN] = HCC.V_ALIGN_BOTTOM;\n          hcJSON[HCC.VAXIS][0][HCC.OPPOSITE] = true;\n        } else {\n          hcJSON[HCC.CAPTION][HCC.ALIGN] = HCC.ALIGN_RIGHT;\n          hcJSON[HCC.CAPTION][HCC.VERTICAL_ALIGN] = HCC.V_ALIGN_TOP;\n          hcJSON[HCC.VAXIS][0][HCC.OPPOSITE] = false;\n        }\n      } else {\n        series[HCC.DATA_SORTING] = {};\n        series[HCC.DATA_SORTING][HCC.ENABLED] = false;\n      }\n    }\n\n    function handleStartAngle(series, seriesProperties, cJSON, hcJSON, type, chartType) {\n      var startAngle = seriesProperties[C.START_ANGLE];\n      series && (series[HCC.START_ANGLE] = startAngle);\n\n      if (GUtils.isSemiType(chartType)) {\n        var endAngle = startAngle + 180;\n        series[HCC.END_ANGLE] = endAngle;\n\n        if (startAngle == 270) {\n          series && (series[HCC.CENTER] = [\"50%\", \"80%\"]); //No I18N\n        } else if (!(startAngle >= -110 && startAngle < endAngle && endAngle <= 110)) {\n          series && (series[HCC.CENTER] = [\"50%\", \"50%\"]); //No I18N\n        } else {\n          series && (series[HCC.CENTER] = [\"50%\", \"80%\"]); //No I18N\n        }\n      }\n    }\n\n    function handleGroupedColumnType(chartJSON, highchartsJSON, type, chartType) {\n      //Set stacking property\n      var series = highchartsJSON[HCC.SERIES];\n      var seriesLen = series ? series.length : 0;\n      var pointPadding = 0;\n\n      for (var i = 0; i < seriesLen; i++) {\n        series[i][HCC.GROUPING] = false;\n        series[i][HCC.POINT_PADDING] = pointPadding;\n        pointPadding += 0.1;\n      }\n    }\n\n    function handleStackedColumnType(chartJSON, highchartsJSON, type, chartType) {\n      var series = highchartsJSON[HCC.SERIES];\n      var seriesLen = series ? series.length : 0;\n\n      for (var i = 0; i < seriesLen; i++) {\n        series[i][HCC.STACKING] = HCC.STACKING_NORMAL;\n      }\n    }\n\n    function handleStackedPercentColumnType(chartJSON, highchartsJSON, type, chartType) {\n      var series = highchartsJSON[HCC.SERIES];\n      var seriesLen = series ? series.length : 0;\n\n      for (var i = 0; i < seriesLen; i++) {\n        series[i][HCC.STACKING] = HCC.STACKING_PERCENT;\n      }\n    }\n\n    function handleBarType(chartJSON, highchartsJSON, type, chartType) {\n      var series = highchartsJSON[HCC.SERIES];\n      series.reverse();\n      highchartsJSON[HCC.HAXIS][0][HCC.CATEGORIES].reverse();\n    }\n\n    function handleGroupedBarType(chartJSON, highchartsJSON, type, chartType) {\n      var series = highchartsJSON[HCC.SERIES];\n      series.reverse();\n      highchartsJSON[HCC.HAXIS][0][HCC.CATEGORIES].reverse();\n      handleGroupedColumnType(chartJSON, highchartsJSON, type, chartType);\n    }\n\n    function handleStackedBarType(chartJSON, highchartsJSON, type, chartType) {\n      var series = highchartsJSON[HCC.SERIES];\n      series.reverse();\n      highchartsJSON[HCC.HAXIS][0][HCC.CATEGORIES].reverse();\n      handleStackedColumnType(chartJSON, highchartsJSON, type, chartType);\n    }\n\n    function handleStackedPercentBarType(chartJSON, highchartsJSON, type, chartType) {\n      var series = highchartsJSON[HCC.SERIES];\n      series.reverse();\n      highchartsJSON[HCC.HAXIS][0][HCC.CATEGORIES].reverse();\n      handleStackedPercentColumnType(chartJSON, highchartsJSON, type, chartType);\n    }\n\n    function handleAreaType(chartJSON, highchartsJSON, type, chartType) {\n      var xAxisLen = highchartsJSON[HCC.HAXIS] ? highchartsJSON[HCC.HAXIS].length : 0;\n\n      for (var i = 0; i < xAxisLen; i++) {\n        highchartsJSON[HCC.HAXIS][i][HCC.START_ON_TICK] = false;\n        highchartsJSON[HCC.HAXIS][i][HCC.END_ON_TICK] = false;\n        highchartsJSON[HCC.HAXIS][i][HCC.MIN] = 0.5;\n\n        if (highchartsJSON[HCC.HAXIS][i][HCC.CATEGORIES] && highchartsJSON[HCC.HAXIS][i][HCC.CATEGORIES].length != 0) {\n          highchartsJSON[HCC.HAXIS][i][HCC.MAX] = highchartsJSON[HCC.HAXIS][i][HCC.CATEGORIES].length - 1.5;\n        }\n      }\n    }\n\n    function handleStackedAreaType(chartJSON, highchartsJSON, type, chartType) {\n      handleAreaType(chartJSON, highchartsJSON, type, chartType); //Set stacking property\n\n      var series = highchartsJSON[HCC.SERIES];\n      var seriesLen = series ? series.length : 0;\n\n      for (var i = 0; i < seriesLen; i++) {\n        series[i][HCC.STACKING] = HCC.STACKING_NORMAL;\n      }\n    }\n\n    function handleStackedPercentAreaType(chartJSON, highchartsJSON, type, chartType) {\n      handleAreaType(chartJSON, highchartsJSON, type, chartType); //Set stacking property\n\n      var series = highchartsJSON[HCC.SERIES];\n      var seriesLen = series ? series.length : 0;\n\n      for (var i = 0; i < seriesLen; i++) {\n        series[i][HCC.STACKING] = HCC.STACKING_PERCENT;\n      }\n    }\n\n    function handleStepLineType(chartJSON, highchartsJSON, type, chartType) {\n      //Set step property\n      var series = highchartsJSON[HCC.SERIES];\n      var seriesLen = series ? series.length : 0;\n      var seriesLen = series ? series.length : 0;\n\n      for (var i = 0; i < seriesLen; i++) {\n        series[i][HCC.STEP] = HCC.STEP_RIGHT;\n      }\n    } //Need to clean\n\n\n    function setDatalabelSeries(chartJSON, highchartsJSON, type, chartType) {\n      var captionFontSize = chartJSON[C.DONUT_TOTAL_DATALABELS][C.FONT_SIZE];\n      var captionFontColor = chartJSON[C.DONUT_TOTAL_DATALABELS][C.FONT_COLOR];\n      var captionFontWeight = chartJSON[C.DONUT_TOTAL_DATALABELS][C.FONT_WEIGHT];\n      var captionFontStyle = chartJSON[C.DONUT_TOTAL_DATALABELS][C.FONT_STYLE]; //Total \n\n      var series = highchartsJSON[HCC.SERIES];\n      var data = series[0][HCC.DATA];\n      var total = 0;\n\n      for (var i = 0; i < data.length; i++) {\n        var value = data[i].y;\n        total += value;\n      }\n\n      var newSeries = {};\n      newSeries[HCC.IS_DATALABEL_SERIES] = true;\n      newSeries[HCC.KEYS] = [\"y\", \"color\", \"label\"]; //No I18N\n\n      newSeries[HCC.DATA] = [[100, \"rgba(0,0,0,0)\", total]];\n      newSeries[HCC.BORDER_COLOR] = null;\n      newSeries[HCC.DATALABELS] = {};\n      newSeries[HCC.DATALABELS][HCC.ENABLED] = DEFAULTS.TOTAL_DATALABELS_STATUS;\n      newSeries[HCC.DATALABELS][HCC.FORMAT] = \"{point.label}\"; //No I18N\n\n      newSeries[HCC.DATALABELS][HCC.STYLE] = {};\n      newSeries[HCC.DATALABELS][HCC.STYLE][HCC.FONT_SIZE] = captionFontSize;\n      newSeries[HCC.DATALABELS][HCC.STYLE][HCC.FONT_COLOR] = captionFontColor;\n      newSeries[HCC.DATALABELS][HCC.STYLE][HCC.FONT_WEIGHT] = captionFontWeight;\n      newSeries[HCC.DATALABELS][HCC.STYLE][HCC.FONT_STYLE] = captionFontStyle;\n      newSeries[HCC.ENABLE_MOUSE_TRACKING] = false;\n      newSeries[HCC.SHOW_IN_LEGEND] = false;\n      newSeries[HCC.Z_INDEX] = -1;\n\n      if (chartType.indexOf(C.SEMI_DONUT) != -1) {\n        var startAngle = highchartsJSON[HCC.SERIES][0][HCC.START_ANGLE] != undefined ? highchartsJSON[HCC.SERIES][0][HCC.START_ANGLE] : -90;\n        var endAngle = highchartsJSON[HCC.SERIES][0][HCC.END_ANGLE] != undefined ? highchartsJSON[HCC.SERIES][0][HCC.END_ANGLE] : 90;\n        newSeries[HCC.START_ANGLE] = startAngle;\n        newSeries[HCC.END_ANGLE] = endAngle;\n\n        if (startAngle >= 250 && startAngle <= 290) {\n          newSeries[HCC.CENTER] = [\"50%\", \"80%\"];\n        } else if (startAngle >= 230 && startAngle <= 250 || startAngle >= 290 && startAngle <= 310) {\n          newSeries[HCC.CENTER] = [\"50%\", \"70%\"];\n        } else if (startAngle >= 220 && startAngle <= 230 || startAngle >= 310 && startAngle <= 320) {\n          newSeries[HCC.CENTER] = [\"50%\", \"60%\"];\n        } else {\n          newSeries[HCC.CENTER] = [\"50%\", \"50%\"];\n        }\n\n        var yOffset = captionFontSize * 0.75;\n        newSeries[HCC.DATALABELS][HCC.Y] = -yOffset;\n        newSeries[HCC.SIZE] = \"100%\";\n        newSeries[HCC.CENTER] = [\"50%\", \"80%\"];\n        newSeries[HCC.DATALABELS][HCC.DISTANCE] = \"-100%\";\n      } else if (chartType.indexOf(C.DONUT) != -1) {\n        var yOffset = captionFontSize * 0.75 / 2;\n        newSeries[HCC.DATALABELS][HCC.Y] = -yOffset;\n        newSeries[HCC.SIZE] = \"100%\";\n        newSeries[HCC.DATALABELS][HCC.DISTANCE] = \"-100%\";\n        newSeries[HCC.CENTER] = [\"50%\", \"50%\"];\n      }\n\n      highchartsJSON[HCConstants.SERIES][1] = newSeries;\n    }\n\n    function handleDonutType(chartJSON, highchartsJSON, type, chartType) {\n      // var size = [\"125%\", \"100%\", \"75%\", \"50%\", \"30%\"]; //No I18N\n      // var innerSize = [\"60%\", \"70%\", \"65%\", \"60%\", \"40%\"]; //No I18N\n      var size = [\"100%\", \"80%\", \"60%\", \"40%\", \"20%\"]; //No I18N\n\n      var innerSize = [\"60%\", \"55%\", \"50%\", \"45%\", \"30%\"]; //No I18N\n\n      var series = highchartsJSON[HCC.SERIES];\n      var seriesLen = series ? series.length : 0;\n\n      for (var i = 0; i < seriesLen; i++) {\n        series[i][HCC.SIZE] = size[i];\n        series[i][HCC.INNER_SIZE] = innerSize[i];\n      }\n\n      if (seriesLen == 1) {\n        //construct total datalabel\n        setDatalabelSeries(chartJSON, highchartsJSON, type, chartType);\n      }\n    }\n\n    function handleSemiDonutType(chartJSON, highchartsJSON, type, chartType) {\n      // var size = [\"125%\", \"100%\", \"75%\", \"50%\", \"30%\"]; //No I18N\n      // var innerSize = [\"60%\", \"70%\", \"65%\", \"60%\", \"40%\"]; //No I18N\n      var size = [\"100%\", \"80%\", \"60%\", \"40%\", \"20%\"]; //No I18N\n\n      var innerSize = [\"60%\", \"55%\", \"50%\", \"45%\", \"30%\"]; //No I18N\n\n      var series = highchartsJSON[HCC.SERIES];\n      var seriesLen = series ? series.length : 0;\n\n      for (var i = 0; i < seriesLen; i++) {\n        series[i][HCC.SIZE] = size[i];\n        series[i][HCC.INNER_SIZE] = innerSize[i];\n      }\n\n      if (seriesLen == 1) {\n        //construct total datalabel\n        setDatalabelSeries(chartJSON, highchartsJSON, type, chartType);\n      }\n    }\n\n    function handleScatterType(chartJSON, highchartsJSON, type, chartType) {\n      var series = highchartsJSON[HCC.SERIES];\n      var seriesLen = series ? series.length : 0;\n\n      for (var i = 0; i < seriesLen; i++) {\n        series[i][HCC.MARKER][HCC.ENABLED] = true;\n\n        if (chartType.indexOf(C.SCATTER_LINE) != -1) {\n          series[i][HCC.MARKER][HCC.ENABLED] = false;\n          series[i][HCC.LINE_WIDTH] = 2;\n        }\n\n        if (chartType.indexOf(C.SCATTER_LINE_MARKERS) != -1) {\n          series[i][HCC.MARKER][HCC.ENABLED] = true;\n        }\n      }\n    }\n\n    function handleFunnelType(chartJSON, highchartsJSON, type, chartType) {\n      var series = highchartsJSON[HCC.SERIES];\n      highchartsJSON[HCC.SERIES][0][HCC.SHOW_IN_LEGEND] = true;\n      var seriesData = highchartsJSON[HCC.SERIES][0][HCC.DATA];\n      series[0][HCC.NECK_WIDTH] = DEFAULTS.FUNNEL_NECK_WIDTH;\n      series[0][HCC.NECK_HEIGHT] = DEFAULTS.FUNNEL_NECK_HEIGHT;\n      var seriesDataLen = seriesData ? seriesData.length : 0;\n\n      for (var i = 0; i < seriesDataLen; i++) {\n        seriesData[i][HCC.DATALABELS] || (seriesData[i][HCC.DATALABELS] = {});\n        seriesData[i][HCC.DATALABELS][HCC.DISTANCE] = DEFAULTS.FUNNEL_DATALABEL_DISTANCE;\n      }\n    }\n\n    function handleBulletColumnType(chartJSON, highchartsJSON, type, chartType) {\n      var series = highchartsJSON[HCC.SERIES]; //Set Point Padding\n\n      var seriesLen = series ? series.length : 0;\n      var i = 0; //Last series is bullet so zIndex = lastSeriesIndex - 1\n\n      var zIndex = seriesLen - 1;\n\n      for (; i < seriesLen - 1; i++) {\n        series[i][HCC.GROUPING] = false;\n        series[i][HCC.POINT_PADDING] = 0.2;\n        series[i][HCC.POINT_PLACEMENT] = -0.1;\n        series[i][HCC.Z_INDEX] = zIndex--;\n      } //For bullet series\n\n\n      series[i][HCC.GROUPING] = false;\n      series[i][HCC.POINT_PADDING] = 0.35;\n      series[i][HCC.POINT_PLACEMENT] = -0.1;\n      series[i][HCC.Z_INDEX] = seriesLen;\n    }\n\n    function handleHistogramType(chartJSON, highchartsJSON, type, chartType) {\n      var series = highchartsJSON[HCC.SERIES];\n      var seriesLen = series ? series.length : 0;\n\n      for (var i = 0; i < seriesLen; i++) {\n        series[i][HCC.GROUP_PADDING] = 0.005;\n        series[i][HCC.POINT_PADDING] = 0;\n      }\n    }\n\n    var keyToFunction = {};\n    keyToFunction[HCKL.DATALABEL] = handleDatalabel;\n    keyToFunction[HCKL.DATALABEL_ENABLED] = handleDatalabelStatus;\n    keyToFunction[HCKL.DATALABEL_STYLE] = handleDatalabelStyle;\n    keyToFunction[HCKL.DATALABEL_FONT_STYLE] = handleDatalabelFontStyle;\n    keyToFunction[HCKL.DATALABEL_FONT_WEIGHT] = handleDatalabelFontWeight;\n    keyToFunction[HCKL.DATALABEL_FONT_SIZE] = handleDatalabelFontSize;\n    keyToFunction[HCKL.DATALABEL_FONT_COLOR] = handleDatalabelFontColor;\n    keyToFunction[HCKL.DATALABEL_FORMAT] = handleDatalabelFormat;\n    keyToFunction[HCKL.DATALABEL_POSITION] = handleDatalabelPosition; // keyToFunction[HCKL.SERIES_COLOR]               =     handleSeriesColor;\n    // keyToFunction[HCKL.SERIES_BORDER_COLOR]        =     handleSeriesBorderColor;\n    // keyToFunction[HCKL.DATA_COLOR]                 =     handleDataColors;\n    // keyToFunction[HCKL.DATA_BORDER_COLOR]          =     handleDataBorderColors;\n\n    keyToFunction[HCKL.THRESHOLD_VALUE] = handleThresholdValue;\n    keyToFunction[HCKL.NEGATIVE_COLOR] = handleNegativeColor;\n    keyToFunction[HCKL.MARKER] = handleMarker;\n    keyToFunction[HCKL.MARKER_STATUS] = handleMarkerStatus;\n    keyToFunction[HCKL.MARKER_SHAPE] = handleMarkerShape;\n    keyToFunction[HCKL.MARKER_SIZE] = handleMarkerSize;\n    keyToFunction[HCKL.MARKER_COLOR] = handleMarkerColor;\n    keyToFunction[HCKL.MARKER_BORDER_COLOR] = handleMarkerBorderColor;\n    keyToFunction[HCKL.LINE_TYPE] = handleLineType;\n    keyToFunction[HCKL.AREA_OPACITY] = handleAreaOpacity;\n    keyToFunction[HCKL.START_ANGLE] = handleStartAngle;\n    keyToFunction[HCKL.TARGET_OPTIONS] = handleTargetOptions;\n    keyToFunction[HCKL.TARGET_COLOR] = handleTargetColor;\n    keyToFunction[HCKL.SORT_ORDER] = handleSortOrder;\n    keyToFunction[C.GROUPED_COL] = handleGroupedColumnType;\n    keyToFunction[C.STACKED_COL] = handleStackedColumnType;\n    keyToFunction[C.STACKED_PERCENT_COL] = handleStackedPercentColumnType;\n    keyToFunction[C.BAR] = handleBarType;\n    keyToFunction[C.GROUPED_BAR] = handleGroupedBarType;\n    keyToFunction[C.STACKED_BAR] = handleStackedBarType;\n    keyToFunction[C.STACKED_PERCENT_BAR] = handleStackedPercentBarType;\n    keyToFunction[C.AREA] = handleAreaType;\n    keyToFunction[C.AREA_SPLINE] = handleAreaType;\n    keyToFunction[C.STACKED_AREA] = handleStackedAreaType;\n    keyToFunction[C.STACKED_PERCENT_AREA] = handleStackedPercentAreaType; // keyToFunction[C.LINE]                          =     handleLineSeriesType;\n    // keyToFunction[C.SPLINE]                        =     handleLineSeriesType;\n\n    keyToFunction[C.STEP_LINE] = handleStepLineType; // keyToFunction[C.PIE]                           =     handlePieType;\n    // keyToFunction[C.SEMI_PIE]                      =     handleSemiPieType;\n\n    keyToFunction[C.DONUT] = handleDonutType;\n    keyToFunction[C.SEMI_DONUT] = handleSemiDonutType; // keyToFunction[C.RACEBAR]                       =     handleRaceBarType;\n\n    keyToFunction[C.SCATTER] = handleScatterType;\n    keyToFunction[C.SCATTER_LINE] = handleScatterType;\n    keyToFunction[C.SCATTER_LINE_MARKERS] = handleScatterType; // keyToFunction[C.BUBBLE]                        =     handleBubbleType;\n\n    keyToFunction[C.FUNNEL] = handleFunnelType; // keyToFunction[C.WEIGHTED_FUNNEL]               =     handleWeightedFunnelType;\n\n    keyToFunction[C.BULLET_COL] = handleBulletColumnType;\n    keyToFunction[C.BULLET_BAR] = handleBulletColumnType;\n    keyToFunction[C.HISTOGRAM] = handleHistogramType; // keyToFunction[C.LINE_TIME_SERIES]              =     handleLineType;\n\n    keyToFunction[C.AREA_TIME_SERIES] = handleAreaType;\n    return {\n      handle: function handle(type, chartJSON, highchartsJSON, chartType) {\n        var series = highchartsJSON[HCC.SERIES];\n        var seriesLen = series ? series.length : 0;\n        var seriesProperties = chartJSON[C.SERIES_PROPERTIES];\n        var seriesPropertiesLen = seriesProperties ? seriesProperties.length : 0;\n\n        for (var idx = 0; idx < seriesPropertiesLen; idx++) {\n          var localType = seriesProperties[idx][C.TYPE];\n\n          if (localType.indexOf(C.WEIGHTED_FUNNEL) != -1) {\n            //For now weighted Funnel is handled separately. Can't be used in combo charts\n            for (var j = 0; j < seriesLen; j++) {\n              if (series[j]) {\n                var keys = HCMaps.chartTypeToSeriesKeys[localType];\n\n                for (var i = 0; i < keys.length; i++) {\n                  if (keyToFunction[keys[i]]) {\n                    keyToFunction[keys[i]](series[j], seriesProperties[idx], chartJSON, highchartsJSON, type, chartType, j);\n                  }\n                }\n              }\n            }\n          } else {\n            if (series[idx]) {\n              var keys = HCMaps.chartTypeToSeriesKeys[localType];\n\n              for (var i = 0; i < keys.length; i++) {\n                if (keyToFunction[keys[i]]) {\n                  //keyToFunction[keys[i]](series[idx], seriesProperties[idx], chartJSON, highchartsJSON, type, chartType, idx);\n                  keyToFunction[keys[i]](series[idx], seriesProperties[idx], chartJSON, highchartsJSON, type, localType, idx);\n                }\n              }\n            }\n          }\n        } //For Chart Type Specific Handling\n\n\n        if (keyToFunction[chartType]) {\n          keyToFunction[chartType](chartJSON, highchartsJSON, type, chartType);\n        } //Common Handling\n\n\n        setDefaultSeriesColor(chartJSON, highchartsJSON, type, chartType);\n        setSeriesColor(chartJSON, highchartsJSON, type, chartType);\n        setDefaultBorderColor(chartJSON, highchartsJSON, type, chartType);\n        setBorderColor(chartJSON, highchartsJSON, type, chartType);\n      }\n    };\n  }();\n\n  ctx.HCSeriesPropertiesHandler = HCSeriesPropertiesHandler;\n})(window || this);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9qcy9VdGlscy9IQ1Nlcmllc1Byb3BlcnRpZXNIYW5kbGVyLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0NBQ2M7O0FBQ2QsQ0FBQyxVQUFTQSxHQUFULEVBQWM7QUFDWCxNQUFNQyxDQUFDLEdBQUdELEdBQUcsQ0FBQ0UsY0FBZDtBQUNBLE1BQU1DLEdBQUcsR0FBR0gsR0FBRyxDQUFDSSxXQUFoQjtBQUNBLE1BQU1DLEVBQUUsR0FBR0wsR0FBRyxDQUFDTSxZQUFmO0FBQ0EsTUFBTUMsSUFBSSxHQUFHUCxHQUFHLENBQUNRLFNBQWpCO0FBQ0EsTUFBTUMsTUFBTSxHQUFHVCxHQUFHLENBQUNTLE1BQW5CO0FBQ0EsTUFBTUMsUUFBUSxHQUFHVixHQUFHLENBQUNXLGFBQUosQ0FBa0JELFFBQW5DO0FBQ0EsTUFBTUUsVUFBVSxHQUFHWixHQUFHLENBQUNZLFVBQXZCO0FBQ0EsTUFBTUMsT0FBTyxHQUFHYixHQUFHLENBQUNhLE9BQXBCO0FBQ0EsTUFBTUMsTUFBTSxHQUFHZCxHQUFHLENBQUNlLGdCQUFuQjtBQUNBLE1BQU1DLGtCQUFrQixHQUFHaEIsR0FBRyxDQUFDZ0Isa0JBQS9CO0FBQ0EsTUFBTUMsZ0JBQWdCLEdBQUdqQixHQUFHLENBQUNpQixnQkFBN0I7O0FBRUEsTUFBSUMseUJBQXlCLEdBQUcsWUFBVztBQUV2QyxhQUFTQyxxQkFBVCxDQUErQkMsU0FBL0IsRUFBMENDLGNBQTFDLEVBQTBEQyxJQUExRCxFQUFnRUMsU0FBaEUsRUFBMkU7QUFDdkUsVUFBSUMsTUFBTSxHQUFHSCxjQUFjLENBQUNsQixHQUFHLENBQUNzQixNQUFMLENBQTNCO0FBQ0EsVUFBSUMsaUJBQWlCLEdBQUdOLFNBQVMsQ0FBQ25CLENBQUMsQ0FBQzBCLGlCQUFILENBQWpDO0FBQ0EsVUFBSUMsU0FBUyxHQUFHSixNQUFNLEdBQUdBLE1BQU0sQ0FBQ0ssTUFBVixHQUFtQixDQUF6Qzs7QUFDQSxXQUFJLElBQUlDLENBQUMsR0FBQyxDQUFWLEVBQWFBLENBQUMsR0FBR0YsU0FB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QUFJLElBdHVCYiIsInNvdXJjZXMiOlsid2VicGFjazovL211bHRpLWNoYXJ0LWZyYW1ld29yay8uL2pzL1V0aWxzL0hDU2VyaWVzUHJvcGVydGllc0hhbmRsZXIuanM/YTYwZSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiRJZCQqL1xuXCJ1c2Ugc3RyaWN0XCI7IC8vTm8gSTE4TlxuKGZ1bmN0aW9uKGN0eCkge1xuICAgIGNvbnN0IEMgPSBjdHguQ2hhcnRDb25zdGFudHM7XG4gICAgY29uc3QgSENDID0gY3R4LkhDQ29uc3RhbnRzO1xuICAgIGNvbnN0IEtMID0gY3R4LkNoYXJ0S2V5TGlzdDtcbiAgICBjb25zdCBIQ0tMID0gY3R4LkhDS2V5TGlzdDtcbiAgICBjb25zdCBIQ01hcHMgPSBjdHguSENNYXBzO1xuICAgIGNvbnN0IERFRkFVTFRTID0gY3R4LkNoYXJ0RGVmYXVsdHMuREVGQVVMVFM7XG4gICAgY29uc3QgSENEZWZhdWx0cyA9IGN0eC5IQ0RlZmF1bHRzO1xuICAgIGNvbnN0IEhDVXRpbHMgPSBjdHguSENVdGlscztcbiAgICBjb25zdCBHVXRpbHMgPSBjdHguR2VuZXJhbFV0aWxpdGllcztcbiAgICBjb25zdCBIQ0RhdGFsYWJlbEhhbmRsZXIgPSBjdHguSENEYXRhbGFiZWxIYW5kbGVyO1xuICAgIGNvbnN0IEhDVG9vbHRpcEhhbmRsZXIgPSBjdHguSENUb29sdGlwSGFuZGxlcjtcblxuICAgIHZhciBIQ1Nlcmllc1Byb3BlcnRpZXNIYW5kbGVyID0oZnVuY3Rpb24oKSB7XG4gICAgICAgIFxuICAgICAgICBmdW5jdGlvbiBzZXREZWZhdWx0Qm9yZGVyQ29sb3IoY2hhcnRKU09OLCBoaWdoY2hhcnRzSlNPTiwgdHlwZSwgY2hhcnRUeXBlKSB7XG4gICAgICAgICAgICB2YXIgc2VyaWVzID0gaGlnaGNoYXJ0c0pTT05bSENDLlNFUklFU107XG4gICAgICAgICAgICB2YXIgc2VyaWVzX3Byb3BlcnRpZXMgPSBjaGFydEpTT05bQy5TRVJJRVNfUFJPUEVSVElFU107XG4gICAgICAgICAgICB2YXIgc2VyaWVzTGVuID0gc2VyaWVzID8gc2VyaWVzLmxlbmd0aCA6IDA7XG4gICAgICAgICAgICBmb3IodmFyIGk9MDsgaSA8IHNlcmllc0xlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNUeXBlID0gc2VyaWVzX3Byb3BlcnRpZXNbaV0gPyBzZXJpZXNfcHJvcGVydGllc1tpXVtDLlRZUEVdIDogY2hhcnRUeXBlOyAvL09ubHkgRm9yIHNwZWNpYWwgY2FzZSA6IFdlaWdodGVkIEZ1bm5lbFxuICAgICAgICAgICAgICAgIHZhciBoVHlwZSA9IEhDTWFwcy5jaGFydFR5cGVUb0hDVHlwZVtjVHlwZV07XG4gICAgICAgICAgICAgICAgaWYoR1V0aWxzLmlzUGllU2VyaWVzKGNUeXBlKSB8fCBjVHlwZS5pbmRleE9mKEMuUkFDRUJBUikgIT0gLTEgfHwgY1R5cGUuaW5kZXhPZihDLldPUkRDTE9VRCkgIT0gLTEgfHwgaFR5cGUuaW5kZXhPZihIQ0MuRlVOTkVMKSAhPSAtMSl7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwaWVEYXRhID0gc2VyaWVzW2ldW0hDQy5EQVRBXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBpZURhdGFMZW4gPSBwaWVEYXRhID8gcGllRGF0YS5sZW5ndGggOiAwO1xuICAgICAgICAgICAgICAgICAgICBmb3IodmFyIGo9MDsgaiA8IHBpZURhdGFMZW47IGorKyl7XG4gICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVCb3JkZXJDb2xvcihwaWVEYXRhW2pdLCBDLk5PTkUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfWVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBoYW5kbGVCb3JkZXJDb2xvcihzZXJpZXNbaV0sIEMuTk9ORSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gc2V0Qm9yZGVyQ29sb3IoY2hhcnRKU09OLCBoaWdoY2hhcnRzSlNPTiwgdHlwZSwgY2hhcnRUeXBlKSB7XG4gICAgICAgICAgICB2YXIgc2VyaWVzID0gaGlnaGNoYXJ0c0pTT05bSENDLlNFUklFU107XG4gICAgICAgICAgICB2YXIgc2VyaWVzX3Byb3BlcnRpZXMgPSBjaGFydEpTT05bQy5TRVJJRVNfUFJPUEVSVElFU107XG4gICAgICAgICAgICB2YXIgc2VyaWVzX3Byb3BlcnRpZXNMZW4gPSBzZXJpZXNfcHJvcGVydGllcyA/IHNlcmllc19wcm9wZXJ0aWVzLmxlbmd0aCA6IDA7XG4gICAgICAgICAgICBmb3IodmFyIGk9MDsgaSA8IHNlcmllc19wcm9wZXJ0aWVzTGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgY1R5cGUgPSBzZXJpZXNfcHJvcGVydGllc1tpXSA/IHNlcmllc19wcm9wZXJ0aWVzW2ldW0MuVFlQRV0gOiBjaGFydFR5cGU7IC8vT25seSBGb3Igc3BlY2lhbCBjYXNlIDogV2VpZ2h0ZWQgRnVubmVsXG4gICAgICAgICAgICAgICAgdmFyIGhUeXBlID0gSENNYXBzLmNoYXJ0VHlwZVRvSENUeXBlW2NUeXBlXTtcbiAgICAgICAgICAgICAgICAvL0ZvciBXZWlnaHRlZCBGdW5uZWwgRGlmZiBIYW5kbGluZyAtIFNldCBEYXRhIENvbG9yIHRvIFNlcmllcyBDb2xvclxuICAgICAgICAgICAgICAgIGlmKGNUeXBlLmluZGV4T2YoQy5XRUlHSFRFRF9GVU5ORUwpICE9IC0xKXtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlcmllc0lkeCA9IGk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkYXRhUHJvcGVydGllcyA9IHNlcmllc19wcm9wZXJ0aWVzW2ldW0MuREFUQV9QUk9QRVJUSUVTXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGFQcm9wZXJ0aWVzTGVuID0gZGF0YVByb3BlcnRpZXMgPyBkYXRhUHJvcGVydGllcy5sZW5ndGggOiAwO1xuICAgICAgICAgICAgICAgICAgICBmb3IodmFyIGo9MDsgaiA8IGRhdGFQcm9wZXJ0aWVzTGVuOyBqKyssIHNlcmllc0lkeCsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZihkYXRhUHJvcGVydGllc1tqXSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoZGF0YVByb3BlcnRpZXNbal1bQy5CT1JERVJfQ09MT1JdICE9IG51bGwpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihzZXJpZXNbc2VyaWVzSWR4XSAmJiBzZXJpZXNbc2VyaWVzSWR4XVtIQ0MuVFlQRV0uaW5kZXhPZihoVHlwZSkgIT0gLTEpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2VyaWVzW3Nlcmllc0lkeF1bSENDLlNFUklFU19DT0xPUl0gPSBkYXRhUHJvcGVydGllc1tqXVtDLkJPUkRFUl9DT0xPUl07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVCb3JkZXJDb2xvcihzZXJpZXNbc2VyaWVzSWR4XSwgZGF0YVByb3BlcnRpZXNbal1bQy5CT1JERVJfQ09MT1JdLCBzZXJpZXNbc2VyaWVzSWR4XVtIQ0MuU0VSSUVTX0NPTE9SXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1lbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgaWYoc2VyaWVzX3Byb3BlcnRpZXNbaV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHNlcmllc19wcm9wZXJ0aWVzW2ldW0MuQk9SREVSX0NPTE9SXSAhPSBudWxsKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3Nlcmllc1tpXSAmJiAoc2VyaWVzW2ldW0hDQy5CT1JERVJfQ09MT1JdID0gc2VyaWVzX3Byb3BlcnRpZXNbaV1bQy5CT1JERVJfQ09MT1JdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXJpZXNbaV0gJiYgKGhhbmRsZUJvcmRlckNvbG9yKHNlcmllc1tpXSwgc2VyaWVzX3Byb3BlcnRpZXNbaV1bQy5CT1JERVJfQ09MT1JdLCBzZXJpZXNbaV1bSENDLlNFUklFU19DT0xPUl0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkYXRhUHJvcGVydGllcyA9IHNlcmllc19wcm9wZXJ0aWVzW2ldW0MuREFUQV9QUk9QRVJUSUVTXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkYXRhUHJvcGVydGllc0xlbiA9IGRhdGFQcm9wZXJ0aWVzID8gZGF0YVByb3BlcnRpZXMubGVuZ3RoIDogMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZXJpZXNEYXRhID0gc2VyaWVzW2ldW0hDQy5EQVRBXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcih2YXIgaj0wOyBqIDwgZGF0YVByb3BlcnRpZXNMZW47IGorKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKGRhdGFQcm9wZXJ0aWVzW2pdKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoZGF0YVByb3BlcnRpZXNbal1bQy5CT1JERVJfQ09MT1JdICE9IG51bGwpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9zZXJpZXNEYXRhW2pdICYmIChzZXJpZXNEYXRhW2pdW0hDQy5EQVRBX0NPTE9SXSA9IGRhdGFQcm9wZXJ0aWVzW2pdW0MuREFUQV9DT0xPUl0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlQm9yZGVyQ29sb3Ioc2VyaWVzRGF0YVtqXSwgZGF0YVByb3BlcnRpZXNbal1bQy5CT1JERVJfQ09MT1JdLCBzZXJpZXNEYXRhW2pdW0hDQy5EQVRBX0NPTE9SXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBoYW5kbGVCb3JkZXJDb2xvcihvYmosIGJvcmRlclByb3BlcnR5LCBzZXJpZXNDb2xvcil7XG4gICAgICAgICAgICBzd2l0Y2goYm9yZGVyUHJvcGVydHkpIHtcbiAgICAgICAgICAgICAgICBjYXNlIEMuTk9ORTpcbiAgICAgICAgICAgICAgICAgICAgb2JqW0hDQy5CT1JERVJfV0lEVEhdID0gREVGQVVMVFMuQk9SREVSX05PTkU7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgQy5ERUZBVUxUOiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnN0IHNlcmllc0NvbG9yID0gc2VyaWVzW0hDQy5TRVJJRVNfQ09MT1JdIHx8IEdlbmVyYWxVdGlsaXRpZXMuZ2VuZXJhdGVTZXJpZXNDb2xvcihoaWdoY2hhcnRzSlNPTltIQ0MuQ09MT1JTXSwgaSk7XG4gICAgICAgICAgICAgICAgICAgIG9ialtIQ0MuQk9SREVSX0NPTE9SXSA9IEdlbmVyYWxVdGlsaXRpZXMuZ2V0RGlmZlNoYWRlKHNlcmllc0NvbG9yLCBERUZBVUxUUy5CT1JERVJfQlJJR0hUTkVTUyk7XG4gICAgICAgICAgICAgICAgICAgIG9ialtIQ0MuQk9SREVSX1dJRFRIXSA9IERFRkFVTFRTLkJPUkRFUl9XSURUSDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIG9ialtIQ0MuQk9SREVSX0NPTE9SXSA9IGJvcmRlclByb3BlcnR5O1xuICAgICAgICAgICAgICAgICAgICBvYmpbSENDLkJPUkRFUl9XSURUSF0gPSBERUZBVUxUUy5CT1JERVJfV0lEVEg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBzZXREZWZhdWx0U2VyaWVzQ29sb3IoY2hhcnRKU09OLCBoaWdoY2hhcnRzSlNPTiwgdHlwZSwgY2hhcnRUeXBlKSB7XG4gICAgICAgICAgICB2YXIgc2VyaWVzID0gaGlnaGNoYXJ0c0pTT05bSENDLlNFUklFU107XG4gICAgICAgICAgICB2YXIgc2VyaWVzX3Byb3BlcnRpZXMgPSBjaGFydEpTT05bQy5TRVJJRVNfUFJPUEVSVElFU107XG4gICAgICAgICAgICB2YXIgY29sb3JzID0gaGlnaGNoYXJ0c0pTT05bSENDLkNPTE9SU107XG4gICAgICAgICAgICB2YXIgc2hhZGVzID0gWzEsIDAuOSwgMS4xXTtcbiAgICAgICAgICAgIHZhciBzaGFkZXNJZHggPSAwO1xuICAgICAgICAgICAgdmFyIGNvbG9yc0xlbiA9IGNvbG9ycy5sZW5ndGg7XG4gICAgICAgICAgICB2YXIgc2hhZGVzTGVuID0gc2hhZGVzLmxlbmd0aDtcbiAgICAgICAgICAgIHZhciBzZXJpZXNMZW4gPSBzZXJpZXMgPyBzZXJpZXMubGVuZ3RoIDogMDtcbiAgICAgICAgICAgIHZhciBjbHJJZHggPSAwO1xuICAgICAgICAgICAgZm9yKHZhciBpPTA7IGkgPCBzZXJpZXNMZW47IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBjVHlwZSA9IHNlcmllc19wcm9wZXJ0aWVzW2ldID8gc2VyaWVzX3Byb3BlcnRpZXNbaV1bQy5UWVBFXSA6IGNoYXJ0VHlwZTsgLy9Pbmx5IEZvciBzcGVjaWFsIGNhc2UgOiBXZWlnaHRlZCBGdW5uZWxcbiAgICAgICAgICAgICAgICB2YXIgaFR5cGUgPSBIQ01hcHMuY2hhcnRUeXBlVG9IQ1R5cGVbY1R5cGVdO1xuICAgICAgICAgICAgICAgIGlmKEdVdGlscy5pc1BpZVNlcmllcyhjVHlwZSkgfHwgY1R5cGUuaW5kZXhPZihDLlJBQ0VCQVIpICE9IC0xIHx8IGNUeXBlLmluZGV4T2YoQy5XT1JEQ0xPVUQpICE9IC0xIHx8IGhUeXBlLmluZGV4T2YoSENDLkZVTk5FTCkgIT0gLTEpe1xuICAgICAgICAgICAgICAgICAgICB2YXIgcGllRGF0YSA9IHNlcmllc1tpXVtIQ0MuREFUQV07XG4gICAgICAgICAgICAgICAgICAgIHZhciBwaWVEYXRhTGVuID0gcGllRGF0YSA/IHBpZURhdGEubGVuZ3RoIDogMDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGFTaGFkZXNJZHggPSAwO1xuICAgICAgICAgICAgICAgICAgICBmb3IodmFyIGo9MDsgaiA8IHBpZURhdGFMZW47KXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb2xvciA9IEdVdGlscy5nZXREaWZmU2hhZGVXaXRoQWxwaGEoY29sb3JzW2ogJSBjb2xvcnNMZW5dLCBzaGFkZXNbZGF0YVNoYWRlc0lkeF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcGllRGF0YVtqXVtIQ0MuREFUQV9DT0xPUl0gPSBjb2xvcjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGorKztcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGogJSBjb2xvcnNMZW4gPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFTaGFkZXNJZHgrKztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhU2hhZGVzSWR4ID0gZGF0YVNoYWRlc0lkeCAlIHNoYWRlc0xlbjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZihoVHlwZS5pbmRleE9mKEhDQy5BUkVBKSAhPSAtMSl7XG4gICAgICAgICAgICAgICAgICAgIHZhciBmaWxsT3BhY2l0eSA9IHNlcmllc19wcm9wZXJ0aWVzW2ldW0MuQVJFQV9PUEFDSVRZXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbG9yID0gR1V0aWxzLmdldERpZmZTaGFkZVdpdGhBbHBoYShHVXRpbHMuc2V0QWxwaGFUb0NvbG9yKGNvbG9yc1tjbHJJZHggJSBjb2xvcnNMZW5dLCBmaWxsT3BhY2l0eSksIHNoYWRlc1tzaGFkZXNJZHhdKTtcbiAgICAgICAgICAgICAgICAgICAgc2VyaWVzW2ldW0hDQy5TRVJJRVNfQ09MT1JdID0gY29sb3I7XG4gICAgICAgICAgICAgICAgICAgIGNscklkeCsrO1xuICAgICAgICAgICAgICAgICAgICBpZihjbHJJZHggJSBjb2xvcnNMZW4gPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2hhZGVzSWR4Kys7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaGFkZXNJZHggPSBzaGFkZXNJZHggJSBzaGFkZXNMZW47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9ZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBjb2xvciA9IEdVdGlscy5nZXREaWZmU2hhZGVXaXRoQWxwaGEoY29sb3JzW2NscklkeCAlIGNvbG9yc0xlbl0sIHNoYWRlc1tzaGFkZXNJZHhdKTtcbiAgICAgICAgICAgICAgICAgICAgc2VyaWVzW2ldW0hDQy5TRVJJRVNfQ09MT1JdID0gY29sb3I7XG4gICAgICAgICAgICAgICAgICAgIGNscklkeCsrO1xuICAgICAgICAgICAgICAgICAgICBpZihjbHJJZHggJSBjb2xvcnNMZW4gPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2hhZGVzSWR4Kys7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaGFkZXNJZHggPSBzaGFkZXNJZHggJSBzaGFkZXNMZW47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBzZXRTZXJpZXNDb2xvcihjaGFydEpTT04sIGhpZ2hjaGFydHNKU09OLCB0eXBlLCBjaGFydFR5cGUpIHtcbiAgICAgICAgICAgIHZhciBzZXJpZXMgPSBoaWdoY2hhcnRzSlNPTltIQ0MuU0VSSUVTXTtcbiAgICAgICAgICAgIHZhciBzZXJpZXNfcHJvcGVydGllcyA9IGNoYXJ0SlNPTltDLlNFUklFU19QUk9QRVJUSUVTXTtcbiAgICAgICAgICAgIHZhciBzZXJpZXNfcHJvcGVydGllc0xlbiA9IHNlcmllc19wcm9wZXJ0aWVzID8gc2VyaWVzX3Byb3BlcnRpZXMubGVuZ3RoIDogMDtcbiAgICAgICAgICAgIGZvcih2YXIgaT0wOyBpIDwgc2VyaWVzX3Byb3BlcnRpZXNMZW47IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBjVHlwZSA9IHNlcmllc19wcm9wZXJ0aWVzW2ldID8gc2VyaWVzX3Byb3BlcnRpZXNbaV1bQy5UWVBFXSA6IGNoYXJ0VHlwZTsgLy9Pbmx5IEZvciBzcGVjaWFsIGNhc2UgOiBXZWlnaHRlZCBGdW5uZWxcbiAgICAgICAgICAgICAgICB2YXIgaFR5cGUgPSBIQ01hcHMuY2hhcnRUeXBlVG9IQ1R5cGVbY1R5cGVdO1xuICAgICAgICAgICAgICAgIC8vRm9yIFdlaWdodGVkIEZ1bm5lbCBEaWZmIEhhbmRsaW5nIC0gU2V0IERhdGEgQ29sb3IgdG8gU2VyaWVzIENvbG9yXG4gICAgICAgICAgICAgICAgaWYoY1R5cGUuaW5kZXhPZihDLldFSUdIVEVEX0ZVTk5FTCkgIT0gLTEpe1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2VyaWVzSWR4ID0gaTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGFQcm9wZXJ0aWVzID0gc2VyaWVzX3Byb3BlcnRpZXNbaV1bQy5EQVRBX1BST1BFUlRJRVNdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YVByb3BlcnRpZXNMZW4gPSBkYXRhUHJvcGVydGllcyA/IGRhdGFQcm9wZXJ0aWVzLmxlbmd0aCA6IDA7XG4gICAgICAgICAgICAgICAgICAgIGZvcih2YXIgaj0wOyBqIDwgZGF0YVByb3BlcnRpZXNMZW47IGorKywgc2VyaWVzSWR4KyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGRhdGFQcm9wZXJ0aWVzW2pdKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihkYXRhUHJvcGVydGllc1tqXVtDLkRBVEFfQ09MT1JdICE9IG51bGwpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihzZXJpZXNbc2VyaWVzSWR4XSAmJiBzZXJpZXNbc2VyaWVzSWR4XVtIQ0MuVFlQRV0uaW5kZXhPZihoVHlwZSkpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VyaWVzW3Nlcmllc0lkeF1bSENDLlNFUklFU19DT0xPUl0gPSBkYXRhUHJvcGVydGllc1tqXVtDLkRBVEFfQ09MT1JdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgIGlmKHNlcmllc19wcm9wZXJ0aWVzW2ldKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZihzZXJpZXNfcHJvcGVydGllc1tpXVtDLlNFUklFU19DT0xPUl0gIT0gbnVsbCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VyaWVzW2ldICYmIChzZXJpZXNbaV1bSENDLlNFUklFU19DT0xPUl0gPSBzZXJpZXNfcHJvcGVydGllc1tpXVtDLlNFUklFU19DT0xPUl0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGFQcm9wZXJ0aWVzID0gc2VyaWVzX3Byb3BlcnRpZXNbaV1bQy5EQVRBX1BST1BFUlRJRVNdO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGFQcm9wZXJ0aWVzTGVuID0gZGF0YVByb3BlcnRpZXMgPyBkYXRhUHJvcGVydGllcy5sZW5ndGggOiAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlcmllc0RhdGEgPSBzZXJpZXNbaV1bSENDLkRBVEFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yKHZhciBqPTA7IGogPCBkYXRhUHJvcGVydGllc0xlbjsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoZGF0YVByb3BlcnRpZXNbal0pe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihkYXRhUHJvcGVydGllc1tqXVtDLkRBVEFfQ09MT1JdICE9IG51bGwpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VyaWVzRGF0YVtqXSAmJiAoc2VyaWVzRGF0YVtqXVtIQ0MuREFUQV9DT0xPUl0gPSBkYXRhUHJvcGVydGllc1tqXVtDLkRBVEFfQ09MT1JdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGhhbmRsZURhdGFsYWJlbChzZXJpZXMsIHNlcmllc1Byb3BlcnRpZXMsIGNKU09OLCBoY0pTT04sIHR5cGUsIGNoYXJ0VHlwZSl7XG4gICAgICAgICAgICBzZXJpZXNbSENDLkRBVEFMQUJFTFNdIHx8IChzZXJpZXNbSENDLkRBVEFMQUJFTFNdID0ge30pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gaGFuZGxlRGF0YWxhYmVsU3RhdHVzKHNlcmllcywgc2VyaWVzUHJvcGVydGllcywgY0pTT04sIGhjSlNPTiwgdHlwZSwgY2hhcnRUeXBlKXtcbiAgICAgICAgICAgIGhhbmRsZURhdGFsYWJlbChzZXJpZXMsIHNlcmllc1Byb3BlcnRpZXMsIGNKU09OLCBoY0pTT04sIHR5cGUsIGNoYXJ0VHlwZSk7XG4gICAgICAgICAgICBjb25zdCBkYXRhTGFiZWxzID0gc2VyaWVzUHJvcGVydGllc1tDLkRBVEFMQUJFTFNdO1xuICAgICAgICAgICAgZGF0YUxhYmVsc1tDLkVOQUJMRURdICE9IG51bGwgJiYgKHNlcmllc1tIQ0MuREFUQUxBQkVMU11bSENDLkVOQUJMRURdID0gZGF0YUxhYmVsc1tDLkVOQUJMRURdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGhhbmRsZURhdGFsYWJlbFN0eWxlKHNlcmllcywgc2VyaWVzUHJvcGVydGllcywgY0pTT04sIGhjSlNPTiwgdHlwZSwgY2hhcnRUeXBlKXtcbiAgICAgICAgICAgIGhhbmRsZURhdGFsYWJlbChzZXJpZXMsIHNlcmllc1Byb3BlcnRpZXMsIGNKU09OLCBoY0pTT04sIHR5cGUsIGNoYXJ0VHlwZSk7XG4gICAgICAgICAgICBzZXJpZXNbSENDLkRBVEFMQUJFTFNdW0hDQy5TVFlMRV0gfHwgKHNlcmllc1tIQ0MuREFUQUxBQkVMU11bSENDLlNUWUxFXSA9IHt9KTtcbiAgICAgICAgICAgIC8vU2V0IFRleHQgT3V0bGluZSB0byAwO1xuICAgICAgICAgICAgc2VyaWVzW0hDQy5EQVRBTEFCRUxTXVtIQ0MuU1RZTEVdW0hDQy5URVhUX09VVExJTkVdID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGhhbmRsZURhdGFsYWJlbEZvbnRTdHlsZShzZXJpZXMsIHNlcmllc1Byb3BlcnRpZXMsIGNKU09OLCBoY0pTT04sIHR5cGUsIGNoYXJ0VHlwZSl7XG4gICAgICAgICAgICBoYW5kbGVEYXRhbGFiZWwoc2VyaWVzLCBzZXJpZXNQcm9wZXJ0aWVzLCBjSlNPTiwgaGNKU09OLCB0eXBlLCBjaGFydFR5cGUpO1xuICAgICAgICAgICAgY29uc3QgZGF0YUxhYmVscyA9IHNlcmllc1Byb3BlcnRpZXNbQy5EQVRBTEFCRUxTXTtcbiAgICAgICAgICAgIGRhdGFMYWJlbHNbQy5GT05UX1NUWUxFXSAhPSBudWxsICYmIChzZXJpZXNbSENDLkRBVEFMQUJFTFNdW0hDQy5TVFlMRV1bSENDLkZPTlRfU1RZTEVdID0gZGF0YUxhYmVsc1tDLkZPTlRfU1RZTEVdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGhhbmRsZURhdGFsYWJlbEZvbnRTaXplKHNlcmllcywgc2VyaWVzUHJvcGVydGllcywgY0pTT04sIGhjSlNPTiwgdHlwZSwgY2hhcnRUeXBlKXtcbiAgICAgICAgICAgIGhhbmRsZURhdGFsYWJlbChzZXJpZXMsIHNlcmllc1Byb3BlcnRpZXMsIGNKU09OLCBoY0pTT04sIHR5cGUsIGNoYXJ0VHlwZSk7XG4gICAgICAgICAgICBjb25zdCBkYXRhTGFiZWxzID0gc2VyaWVzUHJvcGVydGllc1tDLkRBVEFMQUJFTFNdO1xuICAgICAgICAgICAgZGF0YUxhYmVsc1tDLkZPTlRfU0laRV0gIT0gbnVsbCAmJiAoc2VyaWVzW0hDQy5EQVRBTEFCRUxTXVtIQ0MuU1RZTEVdW0hDQy5GT05UX1NJWkVdID0gZGF0YUxhYmVsc1tDLkZPTlRfU0laRV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gaGFuZGxlRGF0YWxhYmVsRm9udFdlaWdodChzZXJpZXMsIHNlcmllc1Byb3BlcnRpZXMsIGNKU09OLCBoY0pTT04sIHR5cGUsIGNoYXJ0VHlwZSl7XG4gICAgICAgICAgICBoYW5kbGVEYXRhbGFiZWwoc2VyaWVzLCBzZXJpZXNQcm9wZXJ0aWVzLCBjSlNPTiwgaGNKU09OLCB0eXBlLCBjaGFydFR5cGUpO1xuICAgICAgICAgICAgY29uc3QgZGF0YUxhYmVscyA9IHNlcmllc1Byb3BlcnRpZXNbQy5EQVRBTEFCRUxTXTtcbiAgICAgICAgICAgIGRhdGFMYWJlbHNbQy5GT05UX1dFSUdIVF0gIT0gbnVsbCAmJiAoc2VyaWVzW0hDQy5EQVRBTEFCRUxTXVtIQ0MuU1RZTEVdW0hDQy5GT05UX1dFSUdIVF0gPSBkYXRhTGFiZWxzW0MuRk9OVF9XRUlHSFRdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGhhbmRsZURhdGFsYWJlbEZvbnRDb2xvcihzZXJpZXMsIHNlcmllc1Byb3BlcnRpZXMsIGNKU09OLCBoY0pTT04sIHR5cGUsIGNoYXJ0VHlwZSl7XG4gICAgICAgICAgICBoYW5kbGVEYXRhbGFiZWwoc2VyaWVzLCBzZXJpZXNQcm9wZXJ0aWVzLCBjSlNPTiwgaGNKU09OLCB0eXBlLCBjaGFydFR5cGUpO1xuICAgICAgICAgICAgdmFyIGJnQ29sb3IgPSBoY0pTT05bSENDLkNIQVJUXVtIQ0MuQkFDS0dST1VORF9DT0xPUl07XG4gICAgICAgICAgICBjb25zdCBkYXRhTGFiZWxzID0gc2VyaWVzUHJvcGVydGllc1tDLkRBVEFMQUJFTFNdO1xuICAgICAgICAgICAgaWYoZGF0YUxhYmVsc1tDLkZPTlRfQ09MT1JdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZihkYXRhTGFiZWxzW0MuRk9OVF9DT0xPUl0uaW5kZXhPZihDLkFVVE9fQ09MT1IpICE9IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlcmllc1tIQ0MuREFUQUxBQkVMU11bSENDLlNUWUxFXVtIQ0MuRk9OVF9DT0xPUl0gPSBHVXRpbHMuZmluZEF1dG9Db2xvcihIQ1V0aWxzLmdldEJHQ29sb3IoYmdDb2xvciksIEtMLkRBVEFMQUJFTF9GT05UX0NPTE9SKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzZXJpZXNbSENDLkRBVEFMQUJFTFNdW0hDQy5TVFlMRV1bSENDLkZPTlRfQ09MT1JdID0gZGF0YUxhYmVsc1tDLkZPTlRfQ09MT1JdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGhhbmRsZURhdGFsYWJlbEZvcm1hdChzZXJpZXMsIHNlcmllc1Byb3BlcnRpZXMsIGNKU09OLCBoY0pTT04sIHR5cGUsIGNoYXJ0VHlwZSwgaW5kZXgpe1xuICAgICAgICAgICAgaGFuZGxlRGF0YWxhYmVsKHNlcmllcywgc2VyaWVzUHJvcGVydGllcywgY0pTT04sIGhjSlNPTiwgdHlwZSwgY2hhcnRUeXBlKTtcbiAgICAgICAgICAgIGNvbnN0IGRhdGFMYWJlbHMgPSBzZXJpZXNQcm9wZXJ0aWVzW0MuREFUQUxBQkVMU107XG4gICAgICAgICAgICBkYXRhTGFiZWxzW0MuRk9STUFUXSAhPSBudWxsICYmIChIQ0RhdGFsYWJlbEhhbmRsZXIuaGFuZGxlRGF0YWxhYmVsRm9ybWF0KGRhdGFMYWJlbHNbQy5GT1JNQVRdLCB0eXBlLCBoY0pTT05bSENDLlNFUklFU10sIGluZGV4LCBjaGFydFR5cGUpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGhhbmRsZURhdGFsYWJlbFBvc2l0aW9uKHNlcmllcywgc2VyaWVzUHJvcGVydGllcywgY0pTT04sIGhjSlNPTiwgdHlwZSwgY2hhcnRUeXBlLCBpbmRleCl7XG4gICAgICAgICAgICBoYW5kbGVEYXRhbGFiZWwoc2VyaWVzLCBzZXJpZXNQcm9wZXJ0aWVzLCBjSlNPTiwgaGNKU09OLCB0eXBlLCBjaGFydFR5cGUpO1xuICAgICAgICAgICAgY29uc3QgZGF0YUxhYmVscyA9IHNlcmllc1Byb3BlcnRpZXNbQy5EQVRBTEFCRUxTXTtcbiAgICAgICAgICAgIGRhdGFMYWJlbHNbQy5QT1NJVElPTl0gIT0gbnVsbCAmJiAoSENEYXRhbGFiZWxIYW5kbGVyLmhhbmRsZURhdGFsYWJlbFBvc2l0aW9uKGRhdGFMYWJlbHNbQy5QT1NJVElPTl0sIHR5cGUsIGhjSlNPTltIQ0MuU0VSSUVTXSwgaW5kZXgsIGNoYXJ0VHlwZSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gaGFuZGxlU2VyaWVzQ29sb3Ioc2VyaWVzLCBzZXJpZXNQcm9wZXJ0aWVzLCBjSlNPTiwgaGNKU09OLCB0eXBlLCBjaGFydFR5cGUpe1xuICAgICAgICAgICAgKHNlcmllc1Byb3BlcnRpZXNbQy5TRVJJRVNfQ09MT1JdICE9IG51bGwpICYmKCBzZXJpZXNbSENDLlNFUklFU19DT0xPUl0gPSBzZXJpZXNQcm9wZXJ0aWVzW0MuU0VSSUVTX0NPTE9SXSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBoYW5kbGVTZXJpZXNCb3JkZXJDb2xvcihzZXJpZXMsIHNlcmllc1Byb3BlcnRpZXMsIGNKU09OLCBoY0pTT04sIHR5cGUsIGNoYXJ0VHlwZSl7XG4gICAgICAgICAgICAoc2VyaWVzUHJvcGVydGllc1tDLkJPUkRFUl9DT0xPUl0gIT0gbnVsbCkgJiYoIHNlcmllc1tIQ0MuQk9SREVSX0NPTE9SXSA9IHNlcmllc1Byb3BlcnRpZXNbQy5CT1JERVJfQ09MT1JdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGhhbmRsZURhdGFDb2xvcnMoc2VyaWVzLCBzZXJpZXNQcm9wZXJ0aWVzLCBjSlNPTiwgaGNKU09OLCB0eXBlLCBjaGFydFR5cGUpe1xuICAgICAgICAgICAgdmFyIGRhdGFQcm9wZXJ0aWVzID0gc2VyaWVzUHJvcGVydGllc1tDLkRBVEFfUFJPUEVSVElFU107XG4gICAgICAgICAgICBpZihkYXRhUHJvcGVydGllcyAhPSBudWxsKXtcbiAgICAgICAgICAgICAgICB2YXIgZGF0YVByb3BzTGVuID0gZGF0YVByb3BlcnRpZXMgPyBkYXRhUHJvcGVydGllcy5sZW5ndGggOiAwO1xuICAgICAgICAgICAgICAgIGZvcih2YXIgaT0wOyBpIDwgZGF0YVByb3BzTGVuOyBpKyspe1xuICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YVByb3BlcnR5ID0gZGF0YVByb3BlcnRpZXNbaV07XG4gICAgICAgICAgICAgICAgICAgIHZhciBkYXRhQ29sb3IgPSBkYXRhUHJvcGVydHlbQy5EQVRBX0NPTE9SXTtcbiAgICAgICAgICAgICAgICAgICAgaWYoZGF0YUNvbG9yICE9IG51bGwgJiYgc2VyaWVzW0hDQy5EQVRBXSAmJiBzZXJpZXNbSENDLkRBVEFdW2ldKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlcmllc1tIQ0MuREFUQV1baV1bSENDLkRBVEFfQ09MT1JdID0gZGF0YUNvbG9yO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gaGFuZGxlRGF0YUJvcmRlckNvbG9ycyhzZXJpZXMsIHNlcmllc1Byb3BlcnRpZXMsIGNKU09OLCBoY0pTT04sIHR5cGUsIGNoYXJ0VHlwZSl7XG4gICAgICAgICAgICB2YXIgZGF0YVByb3BlcnRpZXMgPSBzZXJpZXNQcm9wZXJ0aWVzW0MuREFUQV9QUk9QRVJUSUVTXTtcbiAgICAgICAgICAgIGlmKGRhdGFQcm9wZXJ0aWVzICE9IG51bGwpe1xuICAgICAgICAgICAgICAgIHZhciBkYXRhUHJvcHNMZW4gPSBkYXRhUHJvcGVydGllcyA/IGRhdGFQcm9wZXJ0aWVzLmxlbmd0aCA6IDA7XG4gICAgICAgICAgICAgICAgZm9yKHZhciBpPTA7IGkgPCBkYXRhUHJvcHNMZW47IGkrKyl7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkYXRhUHJvcGVydHkgPSBkYXRhUHJvcGVydGllc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGFCb3JkZXJDb2xvciA9IGRhdGFQcm9wZXJ0eVtDLkRBVEFfQk9SREVSX0NPTE9SU107XG4gICAgICAgICAgICAgICAgICAgIGlmKGRhdGFCb3JkZXJDb2xvciAhPSBudWxsICYmIHNlcmllc1tIQ0MuREFUQV0gJiYgc2VyaWVzW0hDQy5EQVRBXVtpXSl7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXJpZXNbSENDLkRBVEFdW2ldW0hDQy5EQVRBX0JPUkRFUl9DT0xPUlNdID0gZGF0YUJvcmRlckNvbG9yO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gaGFuZGxlVGhyZXNob2xkVmFsdWUoc2VyaWVzLCBzZXJpZXNQcm9wZXJ0aWVzLCBjSlNPTiwgaGNKU09OLCB0eXBlLCBjaGFydFR5cGUpe1xuICAgICAgICAgICAgc2VyaWVzUHJvcGVydGllc1tDLlRIUkVTSE9MRF0gIT0gbnVsbCAmJiAoc2VyaWVzW0hDQy5USFJFU0hPTERdID0gc2VyaWVzUHJvcGVydGllc1tDLlRIUkVTSE9MRF0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gaGFuZGxlTmVnYXRpdmVDb2xvcihzZXJpZXMsIHNlcmllc1Byb3BlcnRpZXMsIGNKU09OLCBoY0pTT04sIHR5cGUsIGNoYXJ0VHlwZSl7XG4gICAgICAgICAgICBzZXJpZXNQcm9wZXJ0aWVzW0MuTkVHQVRJVkVfQ09MT1JdICE9IG51bGwgJiYgKHNlcmllc1tIQ0MuTkVHQVRJVkVfQ09MT1JdID0gc2VyaWVzUHJvcGVydGllc1tDLk5FR0FUSVZFX0NPTE9SXSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBoYW5kbGVNYXJrZXIoc2VyaWVzLCBzZXJpZXNQcm9wZXJ0aWVzLCBjSlNPTiwgaGNKU09OLCB0eXBlLCBjaGFydFR5cGUpe1xuICAgICAgICAgICAgc2VyaWVzW0hDQy5NQVJLRVJdIHx8IChzZXJpZXNbSENDLk1BUktFUl0gPSB7fSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBoYW5kbGVNYXJrZXJTdGF0dXMoc2VyaWVzLCBzZXJpZXNQcm9wZXJ0aWVzLCBjSlNPTiwgaGNKU09OLCB0eXBlLCBjaGFydFR5cGUpe1xuICAgICAgICAgICAgc2VyaWVzW0hDQy5NQVJLRVJdW0hDQy5FTkFCTEVEXSA9IHNlcmllc1Byb3BlcnRpZXNbQy5NQVJLRVJfU1RBVFVTXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGhhbmRsZU1hcmtlclNoYXBlKHNlcmllcywgc2VyaWVzUHJvcGVydGllcywgY0pTT04sIGhjSlNPTiwgdHlwZSwgY2hhcnRUeXBlKXtcbiAgICAgICAgICAgIHNlcmllc1tIQ0MuTUFSS0VSXVtIQ0MuU1lNQk9MXSA9IHNlcmllc1Byb3BlcnRpZXNbQy5NQVJLRVJfU0hBUEVdO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gaGFuZGxlTWFya2VyU2l6ZShzZXJpZXMsIHNlcmllc1Byb3BlcnRpZXMsIGNKU09OLCBoY0pTT04sIHR5cGUsIGNoYXJ0VHlwZSl7XG4gICAgICAgICAgICBzZXJpZXNbSENDLk1BUktFUl1bSENDLlJBRElVU10gPSBzZXJpZXNQcm9wZXJ0aWVzW0MuTUFSS0VSX1NJWkVdO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gaGFuZGxlTWFya2VyQ29sb3Ioc2VyaWVzLCBzZXJpZXNQcm9wZXJ0aWVzLCBjSlNPTiwgaGNKU09OLCB0eXBlLCBjaGFydFR5cGUpe1xuICAgICAgICAgICAgaWYoc2VyaWVzUHJvcGVydGllcyAmJiBzZXJpZXNQcm9wZXJ0aWVzW0MuTUFSS0VSX0NPTE9SXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYoc2VyaWVzUHJvcGVydGllc1tDLk1BUktFUl9DT0xPUl0uaW5kZXhPZihDLkFVVE9fQ09MT1IpICE9IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlcmllc1tIQ0MuTUFSS0VSXVtIQ0MuRklMTF9DT0xPUl0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc2VyaWVzW0hDQy5NQVJLRVJdW0hDQy5GSUxMX0NPTE9SXSA9IHNlcmllc1Byb3BlcnRpZXNbQy5NQVJLRVJfQ09MT1JdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGhhbmRsZU1hcmtlckJvcmRlckNvbG9yKHNlcmllcywgc2VyaWVzUHJvcGVydGllcywgY0pTT04sIGhjSlNPTiwgdHlwZSwgY2hhcnRUeXBlKXtcbiAgICAgICAgICAgIGlmKHNlcmllc1Byb3BlcnRpZXMgJiYgc2VyaWVzUHJvcGVydGllc1tDLk1BUktFUl9CT1JERVJfQ09MT1JdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZihzZXJpZXNQcm9wZXJ0aWVzW0MuTUFSS0VSX0JPUkRFUl9DT0xPUl0uaW5kZXhPZihDLkFVVE9fQ09MT1IpICE9IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlcmllc1tIQ0MuTUFSS0VSXVtIQ0MuTElORV9DT0xPUl0gPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgc2VyaWVzW0hDQy5NQVJLRVJdW0hDQy5MSU5FX0NPTE9SXSA9IHNlcmllc1Byb3BlcnRpZXNbQy5NQVJLRVJfQk9SREVSX0NPTE9SXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBoYW5kbGVMaW5lVHlwZShzZXJpZXMsIHNlcmllc1Byb3BlcnRpZXMsIGNKU09OLCBoY0pTT04sIHR5cGUsIGNoYXJ0VHlwZSl7XG4gICAgICAgICAgICBzZXJpZXNbSENDLkRBU0hfU1RZTEVdID0gc2VyaWVzUHJvcGVydGllc1tDLkxJTkVfVFlQRV07XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBoYW5kbGVBcmVhT3BhY2l0eShzZXJpZXMsIHNlcmllc1Byb3BlcnRpZXMsIGNKU09OLCBoY0pTT04sIHR5cGUsIGNoYXJ0VHlwZSl7XG4gICAgICAgICAgICBzZXJpZXNbSENDLkZJTExfT1BBQ0lUWV0gPSBzZXJpZXNQcm9wZXJ0aWVzW0MuQVJFQV9PUEFDSVRZXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGhhbmRsZVRhcmdldE9wdGlvbnMoc2VyaWVzLCBzZXJpZXNQcm9wZXJ0aWVzLCBjSlNPTiwgaGNKU09OLCB0eXBlLCBjaGFydFR5cGUpe1xuICAgICAgICAgICAgc2VyaWVzW0hDQy5UQVJHRVRfT1BUSU9OU10gfHwgKHNlcmllc1tIQ0MuVEFSR0VUX09QVElPTlNdID0ge30pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gaGFuZGxlVGFyZ2V0Q29sb3Ioc2VyaWVzLCBzZXJpZXNQcm9wZXJ0aWVzLCBjSlNPTiwgaGNKU09OLCB0eXBlLCBjaGFydFR5cGUpe1xuICAgICAgICAgICAgaGFuZGxlVGFyZ2V0T3B0aW9ucyhzZXJpZXMsIHNlcmllc1Byb3BlcnRpZXMsIGNKU09OLCBoY0pTT04sIHR5cGUsIGNoYXJ0VHlwZSk7XG4gICAgICAgICAgICBpZihzZXJpZXNQcm9wZXJ0aWVzW0hDQy5UQVJHRVRfT1BUSU9OU10gJiYgc2VyaWVzUHJvcGVydGllc1tIQ0MuVEFSR0VUX09QVElPTlNdW0hDQy5DT0xPUl0gIT0gbnVsbCl7XG4gICAgICAgICAgICAgICAgc2VyaWVzW0hDQy5UQVJHRVRfT1BUSU9OU11bSENDLkNPTE9SXSA9IHNlcmllc1Byb3BlcnRpZXNbSENDLlRBUkdFVF9PUFRJT05TXVtIQ0MuQ09MT1JdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gaGFuZGxlU29ydE9yZGVyKHNlcmllcywgc2VyaWVzUHJvcGVydGllcywgY0pTT04sIGhjSlNPTiwgdHlwZSwgY2hhcnRUeXBlKXtcbiAgICAgICAgICAgIHZhciBzb3J0aW5nT3JkZXIgPSBzZXJpZXNQcm9wZXJ0aWVzW0MuU09SVF9PUkRFUl07IC8vIE9ubHkgb25lIHNlcmllc1xuICAgICAgICAgICAgaWYoc29ydGluZ09yZGVyICE9IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHNlcmllc1tIQ0MuREFUQV9TT1JUSU5HXSA9IHt9O1xuICAgICAgICAgICAgICAgIHNlcmllc1tIQ0MuREFUQV9TT1JUSU5HXVtIQ0MuRU5BQkxFRF0gPSB0cnVlO1xuICAgICAgICAgICAgICAgIHNlcmllc1tIQ0MuREFUQV9TT1JUSU5HXVtIQ0MuT1JERVJdID0gc29ydGluZ09yZGVyO1xuXG4gICAgICAgICAgICAgICAgaWYoc29ydGluZ09yZGVyLmluZGV4T2YoSENDLkRFU0MpICE9IC0xKXtcbiAgICAgICAgICAgICAgICAgICAgaGNKU09OW0hDQy5DQVBUSU9OXVtIQ0MuQUxJR05dID0gSENDLkFMSUdOX1JJR0hUO1xuICAgICAgICAgICAgICAgICAgICBoY0pTT05bSENDLkNBUFRJT05dW0hDQy5WRVJUSUNBTF9BTElHTl0gPSBIQ0MuVl9BTElHTl9CT1RUT007XG4gICAgICAgICAgICAgICAgICAgIGhjSlNPTltIQ0MuVkFYSVNdWzBdW0hDQy5PUFBPU0lURV0gPSB0cnVlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGhjSlNPTltIQ0MuQ0FQVElPTl1bSENDLkFMSUdOXSA9IEhDQy5BTElHTl9SSUdIVDtcbiAgICAgICAgICAgICAgICAgICAgaGNKU09OW0hDQy5DQVBUSU9OXVtIQ0MuVkVSVElDQUxfQUxJR05dID0gSENDLlZfQUxJR05fVE9QO1xuICAgICAgICAgICAgICAgICAgICBoY0pTT05bSENDLlZBWElTXVswXVtIQ0MuT1BQT1NJVEVdID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzZXJpZXNbSENDLkRBVEFfU09SVElOR10gPSB7fTtcbiAgICAgICAgICAgICAgICBzZXJpZXNbSENDLkRBVEFfU09SVElOR11bSENDLkVOQUJMRURdID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBoYW5kbGVTdGFydEFuZ2xlKHNlcmllcywgc2VyaWVzUHJvcGVydGllcywgY0pTT04sIGhjSlNPTiwgdHlwZSwgY2hhcnRUeXBlKXtcbiAgICAgICAgICAgIHZhciBzdGFydEFuZ2xlID0gc2VyaWVzUHJvcGVydGllc1tDLlNUQVJUX0FOR0xFXVxuICAgICAgICAgICAgc2VyaWVzICYmIChzZXJpZXNbSENDLlNUQVJUX0FOR0xFXSA9IHN0YXJ0QW5nbGUpO1xuICAgICAgICAgICAgaWYoR1V0aWxzLmlzU2VtaVR5cGUoY2hhcnRUeXBlKSl7XG4gICAgICAgICAgICAgICAgdmFyIGVuZEFuZ2xlID0gc3RhcnRBbmdsZSArIDE4MDtcbiAgICAgICAgICAgICAgICBzZXJpZXNbSENDLkVORF9BTkdMRV0gPSBlbmRBbmdsZTtcbiAgICAgICAgICAgICAgICBpZihzdGFydEFuZ2xlID09IDI3MCkge1xuICAgICAgICAgICAgICAgICAgICBzZXJpZXMgJiYgKHNlcmllc1tIQ0MuQ0VOVEVSXSA9IFtcIjUwJVwiLCBcIjgwJVwiXSk7IC8vTm8gSTE4TlxuICAgICAgICAgICAgICAgIH1lbHNlIGlmKCEoc3RhcnRBbmdsZSA+PSAtMTEwICYmIHN0YXJ0QW5nbGUgPCBlbmRBbmdsZSAmJiBlbmRBbmdsZSA8PSAxMTApKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlcmllcyAmJiAoc2VyaWVzW0hDQy5DRU5URVJdID0gW1wiNTAlXCIsIFwiNTAlXCJdKTsgLy9ObyBJMThOXG4gICAgICAgICAgICAgICAgfWVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBzZXJpZXMgJiYgKHNlcmllc1tIQ0MuQ0VOVEVSXSA9IFtcIjUwJVwiLCBcIjgwJVwiXSk7IC8vTm8gSTE4TlxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGhhbmRsZUdyb3VwZWRDb2x1bW5UeXBlKGNoYXJ0SlNPTiwgaGlnaGNoYXJ0c0pTT04sIHR5cGUsIGNoYXJ0VHlwZSl7XG4gICAgICAgICAgICAvL1NldCBzdGFja2luZyBwcm9wZXJ0eVxuICAgICAgICAgICAgY29uc3Qgc2VyaWVzID0gaGlnaGNoYXJ0c0pTT05bSENDLlNFUklFU107XG4gICAgICAgICAgICB2YXIgc2VyaWVzTGVuID0gc2VyaWVzID8gc2VyaWVzLmxlbmd0aCA6IDA7XG4gICAgICAgICAgICB2YXIgcG9pbnRQYWRkaW5nID0gMDtcbiAgICAgICAgICAgIGZvcih2YXIgaT0wOyBpIDwgc2VyaWVzTGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICBzZXJpZXNbaV1bSENDLkdST1VQSU5HXSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHNlcmllc1tpXVtIQ0MuUE9JTlRfUEFERElOR10gPSBwb2ludFBhZGRpbmc7XG4gICAgICAgICAgICAgICAgcG9pbnRQYWRkaW5nICs9IDAuMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGhhbmRsZVN0YWNrZWRDb2x1bW5UeXBlKGNoYXJ0SlNPTiwgaGlnaGNoYXJ0c0pTT04sIHR5cGUsIGNoYXJ0VHlwZSl7XG4gICAgICAgICAgICBjb25zdCBzZXJpZXMgPSBoaWdoY2hhcnRzSlNPTltIQ0MuU0VSSUVTXTtcbiAgICAgICAgICAgIHZhciBzZXJpZXNMZW4gPSBzZXJpZXMgPyBzZXJpZXMubGVuZ3RoIDogMDtcbiAgICAgICAgICAgIGZvcih2YXIgaT0wOyBpIDwgc2VyaWVzTGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICBzZXJpZXNbaV1bSENDLlNUQUNLSU5HXSA9IEhDQy5TVEFDS0lOR19OT1JNQUw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBoYW5kbGVTdGFja2VkUGVyY2VudENvbHVtblR5cGUoY2hhcnRKU09OLCBoaWdoY2hhcnRzSlNPTiwgdHlwZSwgY2hhcnRUeXBlKXtcbiAgICAgICAgICAgIGNvbnN0IHNlcmllcyA9IGhpZ2hjaGFydHNKU09OW0hDQy5TRVJJRVNdO1xuICAgICAgICAgICAgdmFyIHNlcmllc0xlbiA9IHNlcmllcyA/IHNlcmllcy5sZW5ndGggOiAwO1xuICAgICAgICAgICAgZm9yKHZhciBpPTA7IGkgPCBzZXJpZXNMZW47IGkrKykge1xuICAgICAgICAgICAgICAgIHNlcmllc1tpXVtIQ0MuU1RBQ0tJTkddID0gSENDLlNUQUNLSU5HX1BFUkNFTlQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBoYW5kbGVCYXJUeXBlKGNoYXJ0SlNPTiwgaGlnaGNoYXJ0c0pTT04sIHR5cGUsIGNoYXJ0VHlwZSkge1xuICAgICAgICAgICAgY29uc3Qgc2VyaWVzID0gaGlnaGNoYXJ0c0pTT05bSENDLlNFUklFU107XG4gICAgICAgICAgICBzZXJpZXMucmV2ZXJzZSgpO1xuICAgICAgICAgICAgaGlnaGNoYXJ0c0pTT05bSENDLkhBWElTXVswXVtIQ0MuQ0FURUdPUklFU10ucmV2ZXJzZSgpO1xuICAgICAgICB9XG4gICAgICAgIFxuXG4gICAgICAgIGZ1bmN0aW9uIGhhbmRsZUdyb3VwZWRCYXJUeXBlKGNoYXJ0SlNPTiwgaGlnaGNoYXJ0c0pTT04sIHR5cGUsIGNoYXJ0VHlwZSkge1xuICAgICAgICAgICAgY29uc3Qgc2VyaWVzID0gaGlnaGNoYXJ0c0pTT05bSENDLlNFUklFU107XG4gICAgICAgICAgICBzZXJpZXMucmV2ZXJzZSgpO1xuICAgICAgICAgICAgaGlnaGNoYXJ0c0pTT05bSENDLkhBWElTXVswXVtIQ0MuQ0FURUdPUklFU10ucmV2ZXJzZSgpO1xuICAgICAgICAgICAgaGFuZGxlR3JvdXBlZENvbHVtblR5cGUoY2hhcnRKU09OLCBoaWdoY2hhcnRzSlNPTiwgdHlwZSwgY2hhcnRUeXBlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGhhbmRsZVN0YWNrZWRCYXJUeXBlKGNoYXJ0SlNPTiwgaGlnaGNoYXJ0c0pTT04sIHR5cGUsIGNoYXJ0VHlwZSkge1xuICAgICAgICAgICAgY29uc3Qgc2VyaWVzID0gaGlnaGNoYXJ0c0pTT05bSENDLlNFUklFU107XG4gICAgICAgICAgICBzZXJpZXMucmV2ZXJzZSgpO1xuICAgICAgICAgICAgaGlnaGNoYXJ0c0pTT05bSENDLkhBWElTXVswXVtIQ0MuQ0FURUdPUklFU10ucmV2ZXJzZSgpO1xuICAgICAgICAgICAgaGFuZGxlU3RhY2tlZENvbHVtblR5cGUoY2hhcnRKU09OLCBoaWdoY2hhcnRzSlNPTiwgdHlwZSwgY2hhcnRUeXBlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGhhbmRsZVN0YWNrZWRQZXJjZW50QmFyVHlwZShjaGFydEpTT04sIGhpZ2hjaGFydHNKU09OLCB0eXBlLCBjaGFydFR5cGUpIHtcbiAgICAgICAgICAgIGNvbnN0IHNlcmllcyA9IGhpZ2hjaGFydHNKU09OW0hDQy5TRVJJRVNdO1xuICAgICAgICAgICAgc2VyaWVzLnJldmVyc2UoKTtcbiAgICAgICAgICAgIGhpZ2hjaGFydHNKU09OW0hDQy5IQVhJU11bMF1bSENDLkNBVEVHT1JJRVNdLnJldmVyc2UoKTtcbiAgICAgICAgICAgIGhhbmRsZVN0YWNrZWRQZXJjZW50Q29sdW1uVHlwZShjaGFydEpTT04sIGhpZ2hjaGFydHNKU09OLCB0eXBlLCBjaGFydFR5cGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gaGFuZGxlQXJlYVR5cGUgKGNoYXJ0SlNPTiwgaGlnaGNoYXJ0c0pTT04sIHR5cGUsIGNoYXJ0VHlwZSl7XG4gICAgICAgICAgICB2YXIgeEF4aXNMZW4gPSBoaWdoY2hhcnRzSlNPTltIQ0MuSEFYSVNdID8gaGlnaGNoYXJ0c0pTT05bSENDLkhBWElTXS5sZW5ndGggOiAwO1xuICAgICAgICAgICAgZm9yKHZhciBpID0wOyBpIDwgeEF4aXNMZW47IGkrKykge1xuICAgICAgICAgICAgICAgIGhpZ2hjaGFydHNKU09OW0hDQy5IQVhJU11baV1bSENDLlNUQVJUX09OX1RJQ0tdID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgaGlnaGNoYXJ0c0pTT05bSENDLkhBWElTXVtpXVtIQ0MuRU5EX09OX1RJQ0tdID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgaGlnaGNoYXJ0c0pTT05bSENDLkhBWElTXVtpXVtIQ0MuTUlOXSA9IDAuNTtcbiAgICAgICAgICAgICAgICBpZihoaWdoY2hhcnRzSlNPTltIQ0MuSEFYSVNdW2ldW0hDQy5DQVRFR09SSUVTXSAmJiBoaWdoY2hhcnRzSlNPTltIQ0MuSEFYSVNdW2ldW0hDQy5DQVRFR09SSUVTXS5sZW5ndGggIT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBoaWdoY2hhcnRzSlNPTltIQ0MuSEFYSVNdW2ldW0hDQy5NQVhdID0gaGlnaGNoYXJ0c0pTT05bSENDLkhBWElTXVtpXVtIQ0MuQ0FURUdPUklFU10ubGVuZ3RoIC0gMS41XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gaGFuZGxlU3RhY2tlZEFyZWFUeXBlIChjaGFydEpTT04sIGhpZ2hjaGFydHNKU09OLCB0eXBlLCBjaGFydFR5cGUpIHtcbiAgICAgICAgICAgIGhhbmRsZUFyZWFUeXBlKGNoYXJ0SlNPTiwgaGlnaGNoYXJ0c0pTT04sIHR5cGUsIGNoYXJ0VHlwZSk7XG4gICAgICAgICAgICAvL1NldCBzdGFja2luZyBwcm9wZXJ0eVxuICAgICAgICAgICAgY29uc3Qgc2VyaWVzID0gaGlnaGNoYXJ0c0pTT05bSENDLlNFUklFU107XG4gICAgICAgICAgICB2YXIgc2VyaWVzTGVuID0gc2VyaWVzID8gc2VyaWVzLmxlbmd0aCA6IDA7XG4gICAgICAgICAgICBmb3IodmFyIGk9MDsgaSA8IHNlcmllc0xlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgc2VyaWVzW2ldW0hDQy5TVEFDS0lOR10gPSBIQ0MuU1RBQ0tJTkdfTk9STUFMO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gaGFuZGxlU3RhY2tlZFBlcmNlbnRBcmVhVHlwZSAoY2hhcnRKU09OLCBoaWdoY2hhcnRzSlNPTiwgdHlwZSwgY2hhcnRUeXBlKSB7XG4gICAgICAgICAgICBoYW5kbGVBcmVhVHlwZShjaGFydEpTT04sIGhpZ2hjaGFydHNKU09OLCB0eXBlLCBjaGFydFR5cGUpO1xuICAgICAgICAgICAgLy9TZXQgc3RhY2tpbmcgcHJvcGVydHlcbiAgICAgICAgICAgIGNvbnN0IHNlcmllcyA9IGhpZ2hjaGFydHNKU09OW0hDQy5TRVJJRVNdO1xuICAgICAgICAgICAgdmFyIHNlcmllc0xlbiA9IHNlcmllcyA/IHNlcmllcy5sZW5ndGggOiAwO1xuICAgICAgICAgICAgZm9yKHZhciBpPTA7IGkgPCBzZXJpZXNMZW47IGkrKykge1xuICAgICAgICAgICAgICAgIHNlcmllc1tpXVtIQ0MuU1RBQ0tJTkddID0gSENDLlNUQUNLSU5HX1BFUkNFTlQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBoYW5kbGVTdGVwTGluZVR5cGUgKGNoYXJ0SlNPTiwgaGlnaGNoYXJ0c0pTT04sIHR5cGUsIGNoYXJ0VHlwZSkge1xuICAgICAgICAgICAgLy9TZXQgc3RlcCBwcm9wZXJ0eVxuICAgICAgICAgICAgY29uc3Qgc2VyaWVzID0gaGlnaGNoYXJ0c0pTT05bSENDLlNFUklFU107XG4gICAgICAgICAgICB2YXIgc2VyaWVzTGVuID0gc2VyaWVzID8gc2VyaWVzLmxlbmd0aCA6IDA7XG4gICAgICAgICAgICB2YXIgc2VyaWVzTGVuID0gc2VyaWVzID8gc2VyaWVzLmxlbmd0aCA6IDA7XG4gICAgICAgICAgICBmb3IodmFyIGk9MDsgaSA8IHNlcmllc0xlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgc2VyaWVzW2ldW0hDQy5TVEVQXSA9IEhDQy5TVEVQX1JJR0hUO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy9OZWVkIHRvIGNsZWFuXG4gICAgICAgIGZ1bmN0aW9uIHNldERhdGFsYWJlbFNlcmllcyhjaGFydEpTT04sIGhpZ2hjaGFydHNKU09OLCB0eXBlLCBjaGFydFR5cGUpIHtcbiAgICAgICAgICAgIHZhciBjYXB0aW9uRm9udFNpemUgPSBjaGFydEpTT05bQy5ET05VVF9UT1RBTF9EQVRBTEFCRUxTXVtDLkZPTlRfU0laRV1cbiAgICAgICAgICAgIHZhciBjYXB0aW9uRm9udENvbG9yID0gY2hhcnRKU09OW0MuRE9OVVRfVE9UQUxfREFUQUxBQkVMU11bQy5GT05UX0NPTE9SXTtcbiAgICAgICAgICAgIHZhciBjYXB0aW9uRm9udFdlaWdodCA9IGNoYXJ0SlNPTltDLkRPTlVUX1RPVEFMX0RBVEFMQUJFTFNdW0MuRk9OVF9XRUlHSFRdO1xuICAgICAgICAgICAgdmFyIGNhcHRpb25Gb250U3R5bGUgPSBjaGFydEpTT05bQy5ET05VVF9UT1RBTF9EQVRBTEFCRUxTXVtDLkZPTlRfU1RZTEVdO1xuICAgICAgICAgICAgLy9Ub3RhbCBcbiAgICAgICAgICAgIHZhciBzZXJpZXMgPSBoaWdoY2hhcnRzSlNPTltIQ0MuU0VSSUVTXTtcbiAgICAgICAgICAgIHZhciBkYXRhID0gc2VyaWVzWzBdW0hDQy5EQVRBXTtcbiAgICAgICAgICAgIHZhciB0b3RhbCA9MDtcbiAgICAgICAgICAgIGZvcih2YXIgaT0wIDtpPGRhdGEubGVuZ3RoO2krKykge1xuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IGRhdGFbaV0ueTtcbiAgICAgICAgICAgICAgICB0b3RhbCArPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBuZXdTZXJpZXMgPSB7fTtcbiAgICAgICAgICAgIG5ld1Nlcmllc1tIQ0MuSVNfREFUQUxBQkVMX1NFUklFU10gPSB0cnVlO1xuICAgICAgICAgICAgbmV3U2VyaWVzW0hDQy5LRVlTXSA9IFsgXCJ5XCIsIFwiY29sb3JcIiwgXCJsYWJlbFwiXTsgLy9ObyBJMThOXG4gICAgICAgICAgICBuZXdTZXJpZXNbSENDLkRBVEFdID0gW1sgMTAwLCBcInJnYmEoMCwwLDAsMClcIiwgdG90YWxdXTtcbiAgICAgICAgICAgIG5ld1Nlcmllc1tIQ0MuQk9SREVSX0NPTE9SXSA9IG51bGw7XG4gICAgICAgICAgICBuZXdTZXJpZXNbSENDLkRBVEFMQUJFTFNdID0ge307XG4gICAgICAgICAgICBuZXdTZXJpZXNbSENDLkRBVEFMQUJFTFNdW0hDQy5FTkFCTEVEXSA9IERFRkFVTFRTLlRPVEFMX0RBVEFMQUJFTFNfU1RBVFVTO1xuICAgICAgICAgICAgbmV3U2VyaWVzW0hDQy5EQVRBTEFCRUxTXVtIQ0MuRk9STUFUXSA9IFwie3BvaW50LmxhYmVsfVwiOyAvL05vIEkxOE5cbiAgICAgICAgICAgIG5ld1Nlcmllc1tIQ0MuREFUQUxBQkVMU11bSENDLlNUWUxFXSA9IHt9O1xuICAgICAgICAgICAgbmV3U2VyaWVzW0hDQy5EQVRBTEFCRUxTXVtIQ0MuU1RZTEVdW0hDQy5GT05UX1NJWkVdID0gY2FwdGlvbkZvbnRTaXplO1xuICAgICAgICAgICAgbmV3U2VyaWVzW0hDQy5EQVRBTEFCRUxTXVtIQ0MuU1RZTEVdW0hDQy5GT05UX0NPTE9SXSA9IGNhcHRpb25Gb250Q29sb3I7XG4gICAgICAgICAgICBuZXdTZXJpZXNbSENDLkRBVEFMQUJFTFNdW0hDQy5TVFlMRV1bSENDLkZPTlRfV0VJR0hUXSA9IGNhcHRpb25Gb250V2VpZ2h0O1xuICAgICAgICAgICAgbmV3U2VyaWVzW0hDQy5EQVRBTEFCRUxTXVtIQ0MuU1RZTEVdW0hDQy5GT05UX1NUWUxFXSA9IGNhcHRpb25Gb250U3R5bGU7XG4gICAgICAgICAgICBuZXdTZXJpZXNbSENDLkVOQUJMRV9NT1VTRV9UUkFDS0lOR10gPSBmYWxzZTtcbiAgICAgICAgICAgIG5ld1Nlcmllc1tIQ0MuU0hPV19JTl9MRUdFTkRdID0gZmFsc2U7XG4gICAgICAgICAgICBuZXdTZXJpZXNbSENDLlpfSU5ERVhdID0gLTE7XG5cbiAgICAgICAgICAgIGlmKGNoYXJ0VHlwZS5pbmRleE9mKEMuU0VNSV9ET05VVCkgIT0gLTEpIHtcbiAgICAgICAgICAgICAgICB2YXIgc3RhcnRBbmdsZSA9IGhpZ2hjaGFydHNKU09OW0hDQy5TRVJJRVNdWzBdW0hDQy5TVEFSVF9BTkdMRV0gIT0gdW5kZWZpbmVkID8gaGlnaGNoYXJ0c0pTT05bSENDLlNFUklFU11bMF1bSENDLlNUQVJUX0FOR0xFXSA6IC05MDtcbiAgICAgICAgICAgICAgICB2YXIgZW5kQW5nbGUgPSBoaWdoY2hhcnRzSlNPTltIQ0MuU0VSSUVTXVswXVtIQ0MuRU5EX0FOR0xFXSAhPSB1bmRlZmluZWQ/IGhpZ2hjaGFydHNKU09OW0hDQy5TRVJJRVNdWzBdW0hDQy5FTkRfQU5HTEVdIDogOTA7XG4gICAgICAgICAgICAgICAgbmV3U2VyaWVzW0hDQy5TVEFSVF9BTkdMRV0gPSBzdGFydEFuZ2xlO1xuICAgICAgICAgICAgICAgIG5ld1Nlcmllc1tIQ0MuRU5EX0FOR0xFXSA9IGVuZEFuZ2xlO1xuICAgICAgICAgICAgICAgIGlmKHN0YXJ0QW5nbGUgPj0gMjUwICYmIHN0YXJ0QW5nbGUgPD0gMjkwKXtcbiAgICAgICAgICAgICAgICAgICAgbmV3U2VyaWVzW0hDQy5DRU5URVJdID0gW1wiNTAlXCIsIFwiODAlXCJdO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9ZWxzZSBpZihzdGFydEFuZ2xlID49IDIzMCAmJiBzdGFydEFuZ2xlIDw9IDI1MCB8fCBzdGFydEFuZ2xlID49IDI5MCAmJiBzdGFydEFuZ2xlIDw9IDMxMCl7XG4gICAgICAgICAgICAgICAgICAgIG5ld1Nlcmllc1tIQ0MuQ0VOVEVSXSA9IFtcIjUwJVwiLCBcIjcwJVwiXTtcbiAgICAgICAgICAgICAgICB9ZWxzZSBpZihzdGFydEFuZ2xlID49IDIyMCAmJiBzdGFydEFuZ2xlIDw9IDIzMCB8fCBzdGFydEFuZ2xlID49IDMxMCAmJiBzdGFydEFuZ2xlIDw9IDMyMCl7XG4gICAgICAgICAgICAgICAgICAgIG5ld1Nlcmllc1tIQ0MuQ0VOVEVSXSA9IFtcIjUwJVwiLCBcIjYwJVwiXTtcbiAgICAgICAgICAgICAgICB9ZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld1Nlcmllc1tIQ0MuQ0VOVEVSXSA9IFtcIjUwJVwiLCBcIjUwJVwiXTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB2YXIgeU9mZnNldCA9IChjYXB0aW9uRm9udFNpemUgKiAwLjc1KTtcbiAgICAgICAgICAgICAgICBuZXdTZXJpZXNbSENDLkRBVEFMQUJFTFNdW0hDQy5ZXSA9IC15T2Zmc2V0O1xuICAgICAgICAgICAgICAgIG5ld1Nlcmllc1tIQ0MuU0laRV0gPSBcIjEwMCVcIjtcbiAgICAgICAgICAgICAgICBuZXdTZXJpZXNbSENDLkNFTlRFUl0gPSBbXCI1MCVcIiwgXCI4MCVcIl07XG4gICAgICAgICAgICAgICAgbmV3U2VyaWVzW0hDQy5EQVRBTEFCRUxTXVtIQ0MuRElTVEFOQ0VdID0gXCItMTAwJVwiO1xuICAgICAgICAgICAgfSBlbHNlIGlmKGNoYXJ0VHlwZS5pbmRleE9mKEMuRE9OVVQpICE9IC0xKSB7XG4gICAgICAgICAgICAgICAgdmFyIHlPZmZzZXQgPSAoY2FwdGlvbkZvbnRTaXplICogMC43NSkgLyAyO1xuICAgICAgICAgICAgICAgIG5ld1Nlcmllc1tIQ0MuREFUQUxBQkVMU11bSENDLlldID0gLXlPZmZzZXQ7XG4gICAgICAgICAgICAgICAgbmV3U2VyaWVzW0hDQy5TSVpFXSA9IFwiMTAwJVwiO1xuICAgICAgICAgICAgICAgIG5ld1Nlcmllc1tIQ0MuREFUQUxBQkVMU11bSENDLkRJU1RBTkNFXSA9IFwiLTEwMCVcIjtcbiAgICAgICAgICAgICAgICBuZXdTZXJpZXNbSENDLkNFTlRFUl0gPSBbXCI1MCVcIiwgXCI1MCVcIl07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoaWdoY2hhcnRzSlNPTltIQ0NvbnN0YW50cy5TRVJJRVNdWzFdID0gbmV3U2VyaWVzO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gaGFuZGxlRG9udXRUeXBlKGNoYXJ0SlNPTiwgaGlnaGNoYXJ0c0pTT04sIHR5cGUsIGNoYXJ0VHlwZSkge1xuICAgICAgICAgICAgLy8gdmFyIHNpemUgPSBbXCIxMjUlXCIsIFwiMTAwJVwiLCBcIjc1JVwiLCBcIjUwJVwiLCBcIjMwJVwiXTsgLy9ObyBJMThOXG4gICAgICAgICAgICAvLyB2YXIgaW5uZXJTaXplID0gW1wiNjAlXCIsIFwiNzAlXCIsIFwiNjUlXCIsIFwiNjAlXCIsIFwiNDAlXCJdOyAvL05vIEkxOE5cbiAgICAgICAgICAgIHZhciBzaXplID1bXCIxMDAlXCIsIFwiODAlXCIsIFwiNjAlXCIsIFwiNDAlXCIsIFwiMjAlXCJdOy8vTm8gSTE4TlxuICAgICAgICAgICAgdmFyIGlubmVyU2l6ZSA9IFtcIjYwJVwiLCBcIjU1JVwiLCBcIjUwJVwiLCBcIjQ1JVwiLCBcIjMwJVwiXTsgLy9ObyBJMThOXG4gICAgICAgICAgICBjb25zdCBzZXJpZXMgPSBoaWdoY2hhcnRzSlNPTltIQ0MuU0VSSUVTXTtcbiAgICAgICAgICAgIHZhciBzZXJpZXNMZW4gPSBzZXJpZXMgPyBzZXJpZXMubGVuZ3RoIDogMDtcbiAgICAgICAgICAgIGZvcih2YXIgaT0wOyBpIDwgc2VyaWVzTGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICBzZXJpZXNbaV1bSENDLlNJWkVdID0gc2l6ZVtpXTtcbiAgICAgICAgICAgICAgICBzZXJpZXNbaV1bSENDLklOTkVSX1NJWkVdID0gaW5uZXJTaXplW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYoc2VyaWVzTGVuID09IDEpIHsgLy9jb25zdHJ1Y3QgdG90YWwgZGF0YWxhYmVsXG4gICAgICAgICAgICAgICAgc2V0RGF0YWxhYmVsU2VyaWVzKGNoYXJ0SlNPTiwgaGlnaGNoYXJ0c0pTT04sIHR5cGUsIGNoYXJ0VHlwZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBoYW5kbGVTZW1pRG9udXRUeXBlKGNoYXJ0SlNPTiwgaGlnaGNoYXJ0c0pTT04sIHR5cGUsIGNoYXJ0VHlwZSkge1xuICAgICAgICAgICAgLy8gdmFyIHNpemUgPSBbXCIxMjUlXCIsIFwiMTAwJVwiLCBcIjc1JVwiLCBcIjUwJVwiLCBcIjMwJVwiXTsgLy9ObyBJMThOXG4gICAgICAgICAgICAvLyB2YXIgaW5uZXJTaXplID0gW1wiNjAlXCIsIFwiNzAlXCIsIFwiNjUlXCIsIFwiNjAlXCIsIFwiNDAlXCJdOyAvL05vIEkxOE5cbiAgICAgICAgICAgIHZhciBzaXplID1bXCIxMDAlXCIsIFwiODAlXCIsIFwiNjAlXCIsIFwiNDAlXCIsIFwiMjAlXCJdOy8vTm8gSTE4TlxuICAgICAgICAgICAgdmFyIGlubmVyU2l6ZSA9IFtcIjYwJVwiLCBcIjU1JVwiLCBcIjUwJVwiLCBcIjQ1JVwiLCBcIjMwJVwiXTsgLy9ObyBJMThOXG4gICAgICAgICAgICBjb25zdCBzZXJpZXMgPSBoaWdoY2hhcnRzSlNPTltIQ0MuU0VSSUVTXTtcbiAgICAgICAgICAgIHZhciBzZXJpZXNMZW4gPSBzZXJpZXMgPyBzZXJpZXMubGVuZ3RoIDogMDtcbiAgICAgICAgICAgIGZvcih2YXIgaT0wOyBpIDwgc2VyaWVzTGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICBzZXJpZXNbaV1bSENDLlNJWkVdID0gc2l6ZVtpXTtcbiAgICAgICAgICAgICAgICBzZXJpZXNbaV1bSENDLklOTkVSX1NJWkVdID0gaW5uZXJTaXplW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYoc2VyaWVzTGVuID09IDEpIHsgLy9jb25zdHJ1Y3QgdG90YWwgZGF0YWxhYmVsXG4gICAgICAgICAgICAgICAgc2V0RGF0YWxhYmVsU2VyaWVzKGNoYXJ0SlNPTiwgaGlnaGNoYXJ0c0pTT04sIHR5cGUsIGNoYXJ0VHlwZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBoYW5kbGVTY2F0dGVyVHlwZShjaGFydEpTT04sIGhpZ2hjaGFydHNKU09OLCB0eXBlLCBjaGFydFR5cGUpIHtcbiAgICAgICAgICAgIGNvbnN0IHNlcmllcyA9IGhpZ2hjaGFydHNKU09OW0hDQy5TRVJJRVNdO1xuICAgICAgICAgICAgdmFyIHNlcmllc0xlbiA9IHNlcmllcyA/IHNlcmllcy5sZW5ndGggOiAwO1xuICAgICAgICAgICAgZm9yKHZhciBpPTA7IGkgPCBzZXJpZXNMZW47IGkrKykge1xuICAgICAgICAgICAgICAgIHNlcmllc1tpXVtIQ0MuTUFSS0VSXVtIQ0MuRU5BQkxFRF0gPSB0cnVlO1xuICAgICAgICAgICAgICAgIGlmKGNoYXJ0VHlwZS5pbmRleE9mKEMuU0NBVFRFUl9MSU5FKSAhPSAtMSkge1xuICAgICAgICAgICAgICAgICAgICBzZXJpZXNbaV1bSENDLk1BUktFUl1bSENDLkVOQUJMRURdID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHNlcmllc1tpXVtIQ0MuTElORV9XSURUSF0gPSAyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZihjaGFydFR5cGUuaW5kZXhPZihDLlNDQVRURVJfTElORV9NQVJLRVJTKSAhPSAtMSkge1xuICAgICAgICAgICAgICAgICAgICBzZXJpZXNbaV1bSENDLk1BUktFUl1bSENDLkVOQUJMRURdID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBoYW5kbGVGdW5uZWxUeXBlKGNoYXJ0SlNPTiwgaGlnaGNoYXJ0c0pTT04sIHR5cGUsIGNoYXJ0VHlwZSl7XG4gICAgICAgICAgICBjb25zdCBzZXJpZXMgPSBoaWdoY2hhcnRzSlNPTltIQ0MuU0VSSUVTXTtcbiAgICAgICAgICAgIGhpZ2hjaGFydHNKU09OW0hDQy5TRVJJRVNdWzBdW0hDQy5TSE9XX0lOX0xFR0VORF0gPSB0cnVlO1xuICAgICAgICAgICAgY29uc3Qgc2VyaWVzRGF0YSA9IGhpZ2hjaGFydHNKU09OW0hDQy5TRVJJRVNdWzBdW0hDQy5EQVRBXTtcbiAgICAgICAgICAgIHNlcmllc1swXVtIQ0MuTkVDS19XSURUSF0gPSBERUZBVUxUUy5GVU5ORUxfTkVDS19XSURUSDtcbiAgICAgICAgICAgIHNlcmllc1swXVtIQ0MuTkVDS19IRUlHSFRdID0gREVGQVVMVFMuRlVOTkVMX05FQ0tfSEVJR0hUO1xuICAgICAgICAgICAgdmFyIHNlcmllc0RhdGFMZW4gPSBzZXJpZXNEYXRhID8gc2VyaWVzRGF0YS5sZW5ndGggOiAwO1xuICAgICAgICAgICAgZm9yKHZhciBpPTA7IGkgPCBzZXJpZXNEYXRhTGVuOyBpKyspIHtcbiAgICAgICAgICAgICAgICBzZXJpZXNEYXRhW2ldW0hDQy5EQVRBTEFCRUxTXSB8fCAoc2VyaWVzRGF0YVtpXVtIQ0MuREFUQUxBQkVMU10gPSB7fSk7XG4gICAgICAgICAgICAgICAgc2VyaWVzRGF0YVtpXVtIQ0MuREFUQUxBQkVMU11bSENDLkRJU1RBTkNFXSA9IERFRkFVTFRTLkZVTk5FTF9EQVRBTEFCRUxfRElTVEFOQ0U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gICAgICAgIFxuXG4gICAgICAgIGZ1bmN0aW9uIGhhbmRsZUJ1bGxldENvbHVtblR5cGUoY2hhcnRKU09OLCBoaWdoY2hhcnRzSlNPTiwgdHlwZSwgY2hhcnRUeXBlKSB7XG4gICAgICAgICAgICBjb25zdCBzZXJpZXMgPSBoaWdoY2hhcnRzSlNPTltIQ0MuU0VSSUVTXTtcbiAgICAgICAgICAgIC8vU2V0IFBvaW50IFBhZGRpbmdcbiAgICAgICAgICAgIHZhciBzZXJpZXNMZW4gPSBzZXJpZXMgPyBzZXJpZXMubGVuZ3RoIDogMDtcbiAgICAgICAgICAgIHZhciBpPTA7XG4gICAgICAgICAgICAvL0xhc3Qgc2VyaWVzIGlzIGJ1bGxldCBzbyB6SW5kZXggPSBsYXN0U2VyaWVzSW5kZXggLSAxXG4gICAgICAgICAgICB2YXIgekluZGV4ID0gc2VyaWVzTGVuIC0gMTtcbiAgICAgICAgICAgIGZvcig7IGkgPCBzZXJpZXNMZW4gLSAxOyBpKyspIHtcbiAgICAgICAgICAgICAgICBzZXJpZXNbaV1bSENDLkdST1VQSU5HXSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHNlcmllc1tpXVtIQ0MuUE9JTlRfUEFERElOR10gPSAwLjI7XG4gICAgICAgICAgICAgICAgc2VyaWVzW2ldW0hDQy5QT0lOVF9QTEFDRU1FTlRdID0gLTAuMTtcbiAgICAgICAgICAgICAgICBzZXJpZXNbaV1bSENDLlpfSU5ERVhdID0gekluZGV4LS07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvL0ZvciBidWxsZXQgc2VyaWVzXG4gICAgICAgICAgICBzZXJpZXNbaV1bSENDLkdST1VQSU5HXSA9IGZhbHNlO1xuICAgICAgICAgICAgc2VyaWVzW2ldW0hDQy5QT0lOVF9QQURESU5HXSA9IDAuMzU7XG4gICAgICAgICAgICBzZXJpZXNbaV1bSENDLlBPSU5UX1BMQUNFTUVOVF0gPSAtMC4xO1xuICAgICAgICAgICAgc2VyaWVzW2ldW0hDQy5aX0lOREVYXSA9IHNlcmllc0xlbjtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGhhbmRsZUhpc3RvZ3JhbVR5cGUoY2hhcnRKU09OLCBoaWdoY2hhcnRzSlNPTiwgdHlwZSwgY2hhcnRUeXBlKXtcbiAgICAgICAgICAgIGNvbnN0IHNlcmllcyA9IGhpZ2hjaGFydHNKU09OW0hDQy5TRVJJRVNdO1xuICAgICAgICAgICAgdmFyIHNlcmllc0xlbiA9IHNlcmllcyA/IHNlcmllcy5sZW5ndGggOiAwO1xuICAgICAgICAgICAgZm9yKHZhciBpPTA7IGkgPCBzZXJpZXNMZW47IGkrKykge1xuICAgICAgICAgICAgICAgIHNlcmllc1tpXVtIQ0MuR1JPVVBfUEFERElOR10gPSAwLjAwNTtcbiAgICAgICAgICAgICAgICBzZXJpZXNbaV1bSENDLlBPSU5UX1BBRERJTkddID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBrZXlUb0Z1bmN0aW9uID0ge307XG4gICAgICAgIGtleVRvRnVuY3Rpb25bSENLTC5EQVRBTEFCRUxdICAgICAgICAgICAgICAgICAgPSAgICAgaGFuZGxlRGF0YWxhYmVsO1xuICAgICAgICBrZXlUb0Z1bmN0aW9uW0hDS0wuREFUQUxBQkVMX0VOQUJMRURdICAgICAgICAgID0gICAgIGhhbmRsZURhdGFsYWJlbFN0YXR1cztcbiAgICAgICAga2V5VG9GdW5jdGlvbltIQ0tMLkRBVEFMQUJFTF9TVFlMRV0gICAgICAgICAgICA9ICAgICBoYW5kbGVEYXRhbGFiZWxTdHlsZTtcbiAgICAgICAga2V5VG9GdW5jdGlvbltIQ0tMLkRBVEFMQUJFTF9GT05UX1NUWUxFXSAgICAgICA9ICAgICBoYW5kbGVEYXRhbGFiZWxGb250U3R5bGU7XG4gICAgICAgIGtleVRvRnVuY3Rpb25bSENLTC5EQVRBTEFCRUxfRk9OVF9XRUlHSFRdICAgICAgPSAgICAgaGFuZGxlRGF0YWxhYmVsRm9udFdlaWdodDtcbiAgICAgICAga2V5VG9GdW5jdGlvbltIQ0tMLkRBVEFMQUJFTF9GT05UX1NJWkVdICAgICAgICA9ICAgICBoYW5kbGVEYXRhbGFiZWxGb250U2l6ZTtcbiAgICAgICAga2V5VG9GdW5jdGlvbltIQ0tMLkRBVEFMQUJFTF9GT05UX0NPTE9SXSAgICAgICA9ICAgICBoYW5kbGVEYXRhbGFiZWxGb250Q29sb3I7XG4gICAgICAgIGtleVRvRnVuY3Rpb25bSENLTC5EQVRBTEFCRUxfRk9STUFUXSAgICAgICAgICAgPSAgICAgaGFuZGxlRGF0YWxhYmVsRm9ybWF0O1xuICAgICAgICBrZXlUb0Z1bmN0aW9uW0hDS0wuREFUQUxBQkVMX1BPU0lUSU9OXSAgICAgICAgID0gICAgIGhhbmRsZURhdGFsYWJlbFBvc2l0aW9uO1xuICAgICAgICAvLyBrZXlUb0Z1bmN0aW9uW0hDS0wuU0VSSUVTX0NPTE9SXSAgICAgICAgICAgICAgID0gICAgIGhhbmRsZVNlcmllc0NvbG9yO1xuICAgICAgICAvLyBrZXlUb0Z1bmN0aW9uW0hDS0wuU0VSSUVTX0JPUkRFUl9DT0xPUl0gICAgICAgID0gICAgIGhhbmRsZVNlcmllc0JvcmRlckNvbG9yO1xuICAgICAgICAvLyBrZXlUb0Z1bmN0aW9uW0hDS0wuREFUQV9DT0xPUl0gICAgICAgICAgICAgICAgID0gICAgIGhhbmRsZURhdGFDb2xvcnM7XG4gICAgICAgIC8vIGtleVRvRnVuY3Rpb25bSENLTC5EQVRBX0JPUkRFUl9DT0xPUl0gICAgICAgICAgPSAgICAgaGFuZGxlRGF0YUJvcmRlckNvbG9ycztcbiAgICAgICAga2V5VG9GdW5jdGlvbltIQ0tMLlRIUkVTSE9MRF9WQUxVRV0gICAgICAgICAgICA9ICAgICBoYW5kbGVUaHJlc2hvbGRWYWx1ZTtcbiAgICAgICAga2V5VG9GdW5jdGlvbltIQ0tMLk5FR0FUSVZFX0NPTE9SXSAgICAgICAgICAgICA9ICAgICBoYW5kbGVOZWdhdGl2ZUNvbG9yO1xuICAgICAgICBrZXlUb0Z1bmN0aW9uW0hDS0wuTUFSS0VSXSAgICAgICAgICAgICAgICAgICAgID0gICAgIGhhbmRsZU1hcmtlcjtcbiAgICAgICAga2V5VG9GdW5jdGlvbltIQ0tMLk1BUktFUl9TVEFUVVNdICAgICAgICAgICAgICA9ICAgICBoYW5kbGVNYXJrZXJTdGF0dXM7XG4gICAgICAgIGtleVRvRnVuY3Rpb25bSENLTC5NQVJLRVJfU0hBUEVdICAgICAgICAgICAgICAgPSAgICAgaGFuZGxlTWFya2VyU2hhcGU7XG4gICAgICAgIGtleVRvRnVuY3Rpb25bSENLTC5NQVJLRVJfU0laRV0gICAgICAgICAgICAgICAgPSAgICAgaGFuZGxlTWFya2VyU2l6ZTtcbiAgICAgICAga2V5VG9GdW5jdGlvbltIQ0tMLk1BUktFUl9DT0xPUl0gICAgICAgICAgICAgICA9ICAgICBoYW5kbGVNYXJrZXJDb2xvcjtcbiAgICAgICAga2V5VG9GdW5jdGlvbltIQ0tMLk1BUktFUl9CT1JERVJfQ09MT1JdICAgICAgICA9ICAgICBoYW5kbGVNYXJrZXJCb3JkZXJDb2xvcjtcbiAgICAgICAga2V5VG9GdW5jdGlvbltIQ0tMLkxJTkVfVFlQRV0gICAgICAgICAgICAgICAgICA9ICAgICBoYW5kbGVMaW5lVHlwZTtcbiAgICAgICAga2V5VG9GdW5jdGlvbltIQ0tMLkFSRUFfT1BBQ0lUWV0gICAgICAgICAgICAgICA9ICAgICBoYW5kbGVBcmVhT3BhY2l0eTtcbiAgICAgICAga2V5VG9GdW5jdGlvbltIQ0tMLlNUQVJUX0FOR0xFXSAgICAgICAgICAgICAgICA9ICAgICBoYW5kbGVTdGFydEFuZ2xlO1xuICAgICAgICBrZXlUb0Z1bmN0aW9uW0hDS0wuVEFSR0VUX09QVElPTlNdICAgICAgICAgICAgID0gICAgIGhhbmRsZVRhcmdldE9wdGlvbnM7XG4gICAgICAgIGtleVRvRnVuY3Rpb25bSENLTC5UQVJHRVRfQ09MT1JdICAgICAgICAgICAgICAgPSAgICAgaGFuZGxlVGFyZ2V0Q29sb3I7XG4gICAgICAgIGtleVRvRnVuY3Rpb25bSENLTC5TT1JUX09SREVSXSAgICAgICAgICAgICAgICAgPSAgICAgaGFuZGxlU29ydE9yZGVyO1xuXG4gICAgICAgIGtleVRvRnVuY3Rpb25bQy5HUk9VUEVEX0NPTF0gICAgICAgICAgICAgICAgICAgPSAgICAgaGFuZGxlR3JvdXBlZENvbHVtblR5cGU7XG4gICAgICAgIGtleVRvRnVuY3Rpb25bQy5TVEFDS0VEX0NPTF0gICAgICAgICAgICAgICAgICAgPSAgICAgaGFuZGxlU3RhY2tlZENvbHVtblR5cGU7XG4gICAgICAgIGtleVRvRnVuY3Rpb25bQy5TVEFDS0VEX1BFUkNFTlRfQ09MXSAgICAgICAgICAgPSAgICAgaGFuZGxlU3RhY2tlZFBlcmNlbnRDb2x1bW5UeXBlO1xuICAgICAgICBrZXlUb0Z1bmN0aW9uW0MuQkFSXSAgICAgICAgICAgICAgICAgICAgICAgICAgID0gICAgIGhhbmRsZUJhclR5cGU7XG4gICAgICAgIGtleVRvRnVuY3Rpb25bQy5HUk9VUEVEX0JBUl0gICAgICAgICAgICAgICAgICAgPSAgICAgaGFuZGxlR3JvdXBlZEJhclR5cGU7XG4gICAgICAgIGtleVRvRnVuY3Rpb25bQy5TVEFDS0VEX0JBUl0gICAgICAgICAgICAgICAgICAgPSAgICAgaGFuZGxlU3RhY2tlZEJhclR5cGU7XG4gICAgICAgIGtleVRvRnVuY3Rpb25bQy5TVEFDS0VEX1BFUkNFTlRfQkFSXSAgICAgICAgICAgPSAgICAgaGFuZGxlU3RhY2tlZFBlcmNlbnRCYXJUeXBlO1xuICAgICAgICBrZXlUb0Z1bmN0aW9uW0MuQVJFQV0gICAgICAgICAgICAgICAgICAgICAgICAgID0gICAgIGhhbmRsZUFyZWFUeXBlO1xuICAgICAgICBrZXlUb0Z1bmN0aW9uW0MuQVJFQV9TUExJTkVdICAgICAgICAgICAgICAgICAgID0gICAgIGhhbmRsZUFyZWFUeXBlO1xuICAgICAgICBrZXlUb0Z1bmN0aW9uW0MuU1RBQ0tFRF9BUkVBXSAgICAgICAgICAgICAgICAgID0gICAgIGhhbmRsZVN0YWNrZWRBcmVhVHlwZTtcbiAgICAgICAga2V5VG9GdW5jdGlvbltDLlNUQUNLRURfUEVSQ0VOVF9BUkVBXSAgICAgICAgICA9ICAgICBoYW5kbGVTdGFja2VkUGVyY2VudEFyZWFUeXBlO1xuICAgICAgICAvLyBrZXlUb0Z1bmN0aW9uW0MuTElORV0gICAgICAgICAgICAgICAgICAgICAgICAgID0gICAgIGhhbmRsZUxpbmVTZXJpZXNUeXBlO1xuICAgICAgICAvLyBrZXlUb0Z1bmN0aW9uW0MuU1BMSU5FXSAgICAgICAgICAgICAgICAgICAgICAgID0gICAgIGhhbmRsZUxpbmVTZXJpZXNUeXBlO1xuICAgICAgICBrZXlUb0Z1bmN0aW9uW0MuU1RFUF9MSU5FXSAgICAgICAgICAgICAgICAgICAgID0gICAgIGhhbmRsZVN0ZXBMaW5lVHlwZTtcbiAgICAgICAgLy8ga2V5VG9GdW5jdGlvbltDLlBJRV0gICAgICAgICAgICAgICAgICAgICAgICAgICA9ICAgICBoYW5kbGVQaWVUeXBlO1xuICAgICAgICAvLyBrZXlUb0Z1bmN0aW9uW0MuU0VNSV9QSUVdICAgICAgICAgICAgICAgICAgICAgID0gICAgIGhhbmRsZVNlbWlQaWVUeXBlO1xuICAgICAgICBrZXlUb0Z1bmN0aW9uW0MuRE9OVVRdICAgICAgICAgICAgICAgICAgICAgICAgID0gICAgIGhhbmRsZURvbnV0VHlwZTtcbiAgICAgICAga2V5VG9GdW5jdGlvbltDLlNFTUlfRE9OVVRdICAgICAgICAgICAgICAgICAgICA9ICAgICBoYW5kbGVTZW1pRG9udXRUeXBlO1xuICAgICAgICAvLyBrZXlUb0Z1bmN0aW9uW0MuUkFDRUJBUl0gICAgICAgICAgICAgICAgICAgICAgID0gICAgIGhhbmRsZVJhY2VCYXJUeXBlO1xuICAgICAgICBrZXlUb0Z1bmN0aW9uW0MuU0NBVFRFUl0gICAgICAgICAgICAgICAgICAgICAgID0gICAgIGhhbmRsZVNjYXR0ZXJUeXBlO1xuICAgICAgICBrZXlUb0Z1bmN0aW9uW0MuU0NBVFRFUl9MSU5FXSAgICAgICAgICAgICAgICAgID0gICAgIGhhbmRsZVNjYXR0ZXJUeXBlO1xuICAgICAgICBrZXlUb0Z1bmN0aW9uW0MuU0NBVFRFUl9MSU5FX01BUktFUlNdICAgICAgICAgID0gICAgIGhhbmRsZVNjYXR0ZXJUeXBlO1xuICAgICAgICAvLyBrZXlUb0Z1bmN0aW9uW0MuQlVCQkxFXSAgICAgICAgICAgICAgICAgICAgICAgID0gICAgIGhhbmRsZUJ1YmJsZVR5cGU7XG4gICAgICAgIGtleVRvRnVuY3Rpb25bQy5GVU5ORUxdICAgICAgICAgICAgICAgICAgICAgICAgPSAgICAgaGFuZGxlRnVubmVsVHlwZTtcbiAgICAgICAgLy8ga2V5VG9GdW5jdGlvbltDLldFSUdIVEVEX0ZVTk5FTF0gICAgICAgICAgICAgICA9ICAgICBoYW5kbGVXZWlnaHRlZEZ1bm5lbFR5cGU7XG4gICAgICAgIGtleVRvRnVuY3Rpb25bQy5CVUxMRVRfQ09MXSAgICAgICAgICAgICAgICAgICAgPSAgICAgaGFuZGxlQnVsbGV0Q29sdW1uVHlwZTtcbiAgICAgICAga2V5VG9GdW5jdGlvbltDLkJVTExFVF9CQVJdICAgICAgICAgICAgICAgICAgICA9ICAgICBoYW5kbGVCdWxsZXRDb2x1bW5UeXBlO1xuICAgICAgICBrZXlUb0Z1bmN0aW9uW0MuSElTVE9HUkFNXSAgICAgICAgICAgICAgICAgICAgID0gICAgIGhhbmRsZUhpc3RvZ3JhbVR5cGU7XG4gICAgICAgIC8vIGtleVRvRnVuY3Rpb25bQy5MSU5FX1RJTUVfU0VSSUVTXSAgICAgICAgICAgICAgPSAgICAgaGFuZGxlTGluZVR5cGU7XG4gICAgICAgIGtleVRvRnVuY3Rpb25bQy5BUkVBX1RJTUVfU0VSSUVTXSAgICAgICAgICAgICAgPSAgICAgaGFuZGxlQXJlYVR5cGU7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGhhbmRsZSA6IGZ1bmN0aW9uKHR5cGUsIGNoYXJ0SlNPTiwgaGlnaGNoYXJ0c0pTT04sIGNoYXJ0VHlwZSkge1xuICAgICAgICAgICAgICAgIHZhciBzZXJpZXMgPSBoaWdoY2hhcnRzSlNPTltIQ0MuU0VSSUVTXTtcbiAgICAgICAgICAgICAgICB2YXIgc2VyaWVzTGVuID0gc2VyaWVzID8gIHNlcmllcy5sZW5ndGggOiAwO1xuICAgICAgICAgICAgICAgIHZhciBzZXJpZXNQcm9wZXJ0aWVzID0gY2hhcnRKU09OW0MuU0VSSUVTX1BST1BFUlRJRVNdO1xuICAgICAgICAgICAgICAgIHZhciBzZXJpZXNQcm9wZXJ0aWVzTGVuID0gc2VyaWVzUHJvcGVydGllcyA/IHNlcmllc1Byb3BlcnRpZXMubGVuZ3RoIDogMDtcblxuICAgICAgICAgICAgICAgIGZvcih2YXIgaWR4PTA7IGlkeCA8IHNlcmllc1Byb3BlcnRpZXNMZW47IGlkeCsrKXtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxvY2FsVHlwZSA9IHNlcmllc1Byb3BlcnRpZXNbaWR4XVtDLlRZUEVdO1xuICAgICAgICAgICAgICAgICAgICBpZihsb2NhbFR5cGUuaW5kZXhPZihDLldFSUdIVEVEX0ZVTk5FTCkgIT0gLTEpeyAvL0ZvciBub3cgd2VpZ2h0ZWQgRnVubmVsIGlzIGhhbmRsZWQgc2VwYXJhdGVseS4gQ2FuJ3QgYmUgdXNlZCBpbiBjb21ibyBjaGFydHNcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvcih2YXIgaj0wOyBqIDwgc2VyaWVzTGVuOyBqKyspe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHNlcmllc1tqXSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBrZXlzID0gSENNYXBzLmNoYXJ0VHlwZVRvU2VyaWVzS2V5c1tsb2NhbFR5cGVdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IodmFyIGk9MDtpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYoa2V5VG9GdW5jdGlvbltrZXlzW2ldXSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5VG9GdW5jdGlvbltrZXlzW2ldXShzZXJpZXNbal0sIHNlcmllc1Byb3BlcnRpZXNbaWR4XSwgY2hhcnRKU09OLCBoaWdoY2hhcnRzSlNPTiwgdHlwZSwgY2hhcnRUeXBlLCBqKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHNlcmllc1tpZHhdKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIga2V5cyA9IEhDTWFwcy5jaGFydFR5cGVUb1Nlcmllc0tleXNbbG9jYWxUeXBlXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IodmFyIGk9MDtpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZihrZXlUb0Z1bmN0aW9uW2tleXNbaV1dKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8va2V5VG9GdW5jdGlvbltrZXlzW2ldXShzZXJpZXNbaWR4XSwgc2VyaWVzUHJvcGVydGllc1tpZHhdLCBjaGFydEpTT04sIGhpZ2hjaGFydHNKU09OLCB0eXBlLCBjaGFydFR5cGUsIGlkeCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXlUb0Z1bmN0aW9uW2tleXNbaV1dKHNlcmllc1tpZHhdLCBzZXJpZXNQcm9wZXJ0aWVzW2lkeF0sIGNoYXJ0SlNPTiwgaGlnaGNoYXJ0c0pTT04sIHR5cGUsIGxvY2FsVHlwZSwgaWR4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSAgXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vRm9yIENoYXJ0IFR5cGUgU3BlY2lmaWMgSGFuZGxpbmdcbiAgICAgICAgICAgICAgICBpZihrZXlUb0Z1bmN0aW9uW2NoYXJ0VHlwZV0pIHtcbiAgICAgICAgICAgICAgICAgICAga2V5VG9GdW5jdGlvbltjaGFydFR5cGVdKGNoYXJ0SlNPTiwgaGlnaGNoYXJ0c0pTT04sIHR5cGUsIGNoYXJ0VHlwZSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy9Db21tb24gSGFuZGxpbmdcbiAgICAgICAgICAgICAgICBzZXREZWZhdWx0U2VyaWVzQ29sb3IoY2hhcnRKU09OLCBoaWdoY2hhcnRzSlNPTiwgdHlwZSwgY2hhcnRUeXBlKTtcbiAgICAgICAgICAgICAgICBzZXRTZXJpZXNDb2xvcihjaGFydEpTT04sIGhpZ2hjaGFydHNKU09OLCB0eXBlLCBjaGFydFR5cGUpO1xuICAgICAgICAgICAgICAgIHNldERlZmF1bHRCb3JkZXJDb2xvcihjaGFydEpTT04sIGhpZ2hjaGFydHNKU09OLCB0eXBlLCBjaGFydFR5cGUpO1xuICAgICAgICAgICAgICAgIHNldEJvcmRlckNvbG9yKGNoYXJ0SlNPTiwgaGlnaGNoYXJ0c0pTT04sIHR5cGUsIGNoYXJ0VHlwZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfSkoKTtcblxuICAgIGN0eC5IQ1Nlcmllc1Byb3BlcnRpZXNIYW5kbGVyID0gSENTZXJpZXNQcm9wZXJ0aWVzSGFuZGxlcjtcblxufSkod2luZG93IHx8IHRoaXMpOyJdLCJuYW1lcyI6WyJjdHgiLCJDIiwiQ2hhcnRDb25zdGFudHMiLCJIQ0MiLCJIQ0NvbnN0YW50cyIsIktMIiwiQ2hhcnRLZXlMaXN0IiwiSENLTCIsIkhDS2V5TGlzdCIsIkhDTWFwcyIsIkRFRkFVTFRTIiwiQ2hhcnREZWZhdWx0cyIsIkhDRGVmYXVsdHMiLCJIQ1V0aWxzIiwiR1V0aWxzIiwiR2VuZXJhbFV0aWxpdGllcyIsIkhDRGF0YWxhYmVsSGFuZGxlciIsIkhDVG9vbHRpcEhhbmRsZXIiLCJIQ1Nlcmllc1Byb3BlcnRpZXNIYW5kbGVyIiwic2V0RGVmYXVsdEJvcmRlckNvbG9yIiwiY2hhcnRKU09OIiwiaGlnaGNoYXJ0c0pTT04iLCJ0eXBlIiwiY2hhcnRUeXBlIiwic2VyaWVzIiwiU0VSSUVTIiwic2VyaWVzX3Byb3BlcnRpZXMiLCJTRVJJRVNfUFJPUEVSVElFUyIsInNlcmllc0xlbiIsImxlbmd0aCIsImkiLCJjVHlwZSIsIlRZUEUiLCJoVHlwZSIsImNoYXJ0VHlwZVRvSENUeXBlIiwiaXNQaWVTZXJpZXMiLCJpbmRleE9mIiwiUkFDRUJBUiIsIldPUkRDTE9VRCIsIkZVTk5FTCIsInBpZURhdGEiLCJEQVRBIiwicGllRGF0YUxlbiIsImoiLCJoYW5kbGVCb3JkZXJDb2xvciIsIk5PTkUiLCJzZXRCb3JkZXJDb2xvciIsInNlcmllc19wcm9wZXJ0aWVzTGVuIiwiV0VJR0hURURfRlVOTkVMIiwic2VyaWVzSWR4IiwiZGF0YVByb3BlcnRpZXMiLCJEQVRBX1BST1BFUlRJRVMiLCJkYXRhUHJvcGVydGllc0xlbiIsIkJPUkRFUl9DT0xPUiIsIlNFUklFU19DT0xPUiIsInNlcmllc0RhdGEiLCJEQVRBX0NPTE9SIiwib2JqIiwiYm9yZGVyUHJvcGVydHkiLCJzZXJpZXNDb2xvciIsIkJPUkRFUl9XSURUSCIsIkJPUkRFUl9OT05FIiwiREVGQVVMVCIsImdldERpZmZTaGFkZSIsIkJPUkRFUl9CUklHSFRORVNTIiwic2V0RGVmYXVsdFNlcmllc0NvbG9yIiwiY29sb3JzIiwiQ09MT1JTIiwic2hhZGVzIiwic2hhZGVzSWR4IiwiY29sb3JzTGVuIiwic2hhZGVzTGVuIiwiY2xySWR4IiwiZGF0YVNoYWRlc0lkeCIsImNvbG9yIiwiZ2V0RGlmZlNoYWRlV2l0aEFscGhhIiwiQVJFQSIsImZpbGxPcGFjaXR5IiwiQVJFQV9PUEFDSVRZIiwic2V0QWxwaGFUb0NvbG9yIiwic2V0U2VyaWVzQ29sb3IiLCJoYW5kbGVEYXRhbGFiZWwiLCJzZXJpZXNQcm9wZXJ0aWVzIiwiY0pTT04iLCJoY0pTT04iLCJEQVRBTEFCRUxTIiwiaGFuZGxlRGF0YWxhYmVsU3RhdHVzIiwiZGF0YUxhYmVscyIsIkVOQUJMRUQiLCJoYW5kbGVEYXRhbGFiZWxTdHlsZSIsIlNUWUxFIiwiVEVYVF9PVVRMSU5FIiwiaGFuZGxlRGF0YWxhYmVsRm9udFN0eWxlIiwiRk9OVF9TVFlMRSIsImhhbmRsZURhdGFsYWJlbEZvbnRTaXplIiwiRk9OVF9TSVpFIiwiaGFuZGxlRGF0YWxhYmVsRm9udFdlaWdodCIsIkZPTlRfV0VJR0hUIiwiaGFuZGxlRGF0YWxhYmVsRm9udENvbG9yIiwiYmdDb2xvciIsIkNIQVJUIiwiQkFDS0dST1VORF9DT0xPUiIsIkZPTlRfQ09MT1IiLCJBVVRPX0NPTE9SIiwiZmluZEF1dG9Db2xvciIsImdldEJHQ29sb3IiLCJEQVRBTEFCRUxfRk9OVF9DT0xPUiIsImhhbmRsZURhdGFsYWJlbEZvcm1hdCIsImluZGV4IiwiRk9STUFUIiwiaGFuZGxlRGF0YWxhYmVsUG9zaXRpb24iLCJQT1NJVElPTiIsImhhbmRsZVNlcmllc0NvbG9yIiwiaGFuZGxlU2VyaWVzQm9yZGVyQ29sb3IiLCJoYW5kbGVEYXRhQ29sb3JzIiwiZGF0YVByb3BzTGVuIiwiZGF0YVByb3BlcnR5IiwiZGF0YUNvbG9yIiwiaGFuZGxlRGF0YUJvcmRlckNvbG9ycyIsImRhdGFCb3JkZXJDb2xvciIsIkRBVEFfQk9SREVSX0NPTE9SUyIsImhhbmRsZVRocmVzaG9sZFZhbHVlIiwiVEhSRVNIT0xEIiwiaGFuZGxlTmVnYXRpdmVDb2xvciIsIk5FR0FUSVZFX0NPTE9SIiwiaGFuZGxlTWFya2VyIiwiTUFSS0VSIiwiaGFuZGxlTWFya2VyU3RhdHVzIiwiTUFSS0VSX1NUQVRVUyIsImhhbmRsZU1hcmtlclNoYXBlIiwiU1lNQk9MIiwiTUFSS0VSX1NIQVBFIiwiaGFuZGxlTWFya2VyU2l6ZSIsIlJBRElVUyIsIk1BUktFUl9TSVpFIiwiaGFuZGxlTWFya2VyQ29sb3IiLCJNQVJLRVJfQ09MT1IiLCJGSUxMX0NPTE9SIiwidW5kZWZpbmVkIiwiaGFuZGxlTWFya2VyQm9yZGVyQ29sb3IiLCJNQVJLRVJfQk9SREVSX0NPTE9SIiwiTElORV9DT0xPUiIsImhhbmRsZUxpbmVUeXBlIiwiREFTSF9TVFlMRSIsIkxJTkVfVFlQRSIsImhhbmRsZUFyZWFPcGFjaXR5IiwiRklMTF9PUEFDSVRZIiwiaGFuZGxlVGFyZ2V0T3B0aW9ucyIsIlRBUkdFVF9PUFRJT05TIiwiaGFuZGxlVGFyZ2V0Q29sb3IiLCJDT0xPUiIsImhhbmRsZVNvcnRPcmRlciIsInNvcnRpbmdPcmRlciIsIlNPUlRfT1JERVIiLCJEQVRBX1NPUlRJTkciLCJPUkRFUiIsIkRFU0MiLCJDQVBUSU9OIiwiQUxJR04iLCJBTElHTl9SSUdIVCIsIlZFUlRJQ0FMX0FMSUdOIiwiVl9BTElHTl9CT1RUT00iLCJWQVhJUyIsIk9QUE9TSVRFIiwiVl9BTElHTl9UT1AiLCJoYW5kbGVTdGFydEFuZ2xlIiwic3RhcnRBbmdsZSIsIlNUQVJUX0FOR0xFIiwiaXNTZW1pVHlwZSIsImVuZEFuZ2xlIiwiRU5EX0FOR0xFIiwiQ0VOVEVSIiwiaGFuZGxlR3JvdXBlZENvbHVtblR5cGUiLCJwb2ludFBhZGRpbmciLCJHUk9VUElORyIsIlBPSU5UX1BBRERJTkciLCJoYW5kbGVTdGFja2VkQ29sdW1uVHlwZSIsIlNUQUNLSU5HIiwiU1RBQ0tJTkdfTk9STUFMIiwiaGFuZGxlU3RhY2tlZFBlcmNlbnRDb2x1bW5UeXBlIiwiU1RBQ0tJTkdfUEVSQ0VOVCIsImhhbmRsZUJhclR5cGUiLCJyZXZlcnNlIiwiSEFYSVMiLCJDQVRFR09SSUVTIiwiaGFuZGxlR3JvdXBlZEJhclR5cGUiLCJoYW5kbGVTdGFja2VkQmFyVHlwZSIsImhhbmRsZVN0YWNrZWRQZXJjZW50QmFyVHlwZSIsImhhbmRsZUFyZWFUeXBlIiwieEF4aXNMZW4iLCJTVEFSVF9PTl9USUNLIiwiRU5EX09OX1RJQ0siLCJNSU4iLCJNQVgiLCJoYW5kbGVTdGFja2VkQXJlYVR5cGUiLCJoYW5kbGVTdGFja2VkUGVyY2VudEFyZWFUeXBlIiwiaGFuZGxlU3RlcExpbmVUeXBlIiwiU1RFUCIsIlNURVBfUklHSFQiLCJzZXREYXRhbGFiZWxTZXJpZXMiLCJjYXB0aW9uRm9udFNpemUiLCJET05VVF9UT1RBTF9EQVRBTEFCRUxTIiwiY2FwdGlvbkZvbnRDb2xvciIsImNhcHRpb25Gb250V2VpZ2h0IiwiY2FwdGlvbkZvbnRTdHlsZSIsImRhdGEiLCJ0b3RhbCIsInZhbHVlIiwieSIsIm5ld1NlcmllcyIsIklTX0RBVEFMQUJFTF9TRVJJRVMiLCJLRVlTIiwiVE9UQUxfREFUQUxBQkVMU19TVEFUVVMiLCJFTkFCTEVfTU9VU0VfVFJBQ0tJTkciLCJTSE9XX0lOX0xFR0VORCIsIlpfSU5ERVgiLCJTRU1JX0RPTlVUIiwieU9mZnNldCIsIlkiLCJTSVpFIiwiRElTVEFOQ0UiLCJET05VVCIsImhhbmRsZURvbnV0VHlwZSIsInNpemUiLCJpbm5lclNpemUiLCJJTk5FUl9TSVpFIiwiaGFuZGxlU2VtaURvbnV0VHlwZSIsImhhbmRsZVNjYXR0ZXJUeXBlIiwiU0NBVFRFUl9MSU5FIiwiTElORV9XSURUSCIsIlNDQVRURVJfTElORV9NQVJLRVJTIiwiaGFuZGxlRnVubmVsVHlwZSIsIk5FQ0tfV0lEVEgiLCJGVU5ORUxfTkVDS19XSURUSCIsIk5FQ0tfSEVJR0hUIiwiRlVOTkVMX05FQ0tfSEVJR0hUIiwic2VyaWVzRGF0YUxlbiIsIkZVTk5FTF9EQVRBTEFCRUxfRElTVEFOQ0UiLCJoYW5kbGVCdWxsZXRDb2x1bW5UeXBlIiwiekluZGV4IiwiUE9JTlRfUExBQ0VNRU5UIiwiaGFuZGxlSGlzdG9ncmFtVHlwZSIsIkdST1VQX1BBRERJTkciLCJrZXlUb0Z1bmN0aW9uIiwiREFUQUxBQkVMIiwiREFUQUxBQkVMX0VOQUJMRUQiLCJEQVRBTEFCRUxfU1RZTEUiLCJEQVRBTEFCRUxfRk9OVF9TVFlMRSIsIkRBVEFMQUJFTF9GT05UX1dFSUdIVCIsIkRBVEFMQUJFTF9GT05UX1NJWkUiLCJEQVRBTEFCRUxfRk9STUFUIiwiREFUQUxBQkVMX1BPU0lUSU9OIiwiVEhSRVNIT0xEX1ZBTFVFIiwiVEFSR0VUX0NPTE9SIiwiR1JPVVBFRF9DT0wiLCJTVEFDS0VEX0NPTCIsIlNUQUNLRURfUEVSQ0VOVF9DT0wiLCJCQVIiLCJHUk9VUEVEX0JBUiIsIlNUQUNLRURfQkFSIiwiU1RBQ0tFRF9QRVJDRU5UX0JBUiIsIkFSRUFfU1BMSU5FIiwiU1RBQ0tFRF9BUkVBIiwiU1RBQ0tFRF9QRVJDRU5UX0FSRUEiLCJTVEVQX0xJTkUiLCJTQ0FUVEVSIiwiQlVMTEVUX0NPTCIsIkJVTExFVF9CQVIiLCJISVNUT0dSQU0iLCJBUkVBX1RJTUVfU0VSSUVTIiwiaGFuZGxlIiwic2VyaWVzUHJvcGVydGllc0xlbiIsImlkeCIsImxvY2FsVHlwZSIsImtleXMiLCJjaGFydFR5cGVUb1Nlcmllc0tleXMiLCJ3aW5kb3ciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./js/Utils/HCSeriesPropertiesHandler.js\n");

/***/ }),

/***/ "./js/Utils/HCSkeletonConstructor.js":
/*!*******************************************!*\
  !*** ./js/Utils/HCSkeletonConstructor.js ***!
  \*******************************************/
/***/ (function() {

"use strict";
eval("/*$Id$*/\n //No I18N\n\n(function (ctx) {\n  var HCConstants = ctx.HCConstants;\n  var HCKeyList = ctx.HCKeyList;\n  var chartTypeToHCKeys = ctx.HCMaps.chartTypeToHCKeys;\n\n  var HCSkeletonConstructor = function () {\n    function setChart(json) {\n      json[HCConstants.CHART] || (json[HCConstants.CHART] = {});\n    }\n\n    function setAnimation(json) {\n      setChart(json);\n      json[HCConstants.CHART][HCConstants.ANIMATION] || (json[HCConstants.CHART][HCConstants.ANIMATION] = {});\n    }\n\n    function setChartStyle(json) {\n      setChart(json);\n      json[HCConstants.CHART][HCConstants.STYLE] || (json[HCConstants.CHART][HCConstants.STYLE] = {});\n    }\n\n    function setChartAnimation(json) {\n      setChart(json);\n      json[HCConstants.CHART][HCConstants.ANIMATION] || (json[HCConstants.CHART][HCConstants.ANIMATION] = {});\n    }\n\n    function setCaption(json) {\n      json[HCConstants.CAPTION] || (json[HCConstants.CAPTION] = {});\n    }\n\n    function setCaptionStyle(json) {\n      setCaption(json);\n      json[HCConstants.CAPTION][HCConstants.STYLE] || (json[HCConstants.CAPTION][HCConstants.STYLE] = {});\n    }\n\n    function setTitle(json) {\n      json[HCConstants.TITLE] || (json[HCConstants.TITLE] = {});\n    }\n\n    function setTitleStyle(json) {\n      setSubTitle(json);\n      json[HCConstants.TITLE][HCConstants.STYLE] || (json[HCConstants.TITLE][HCConstants.STYLE] = {});\n    }\n\n    function setSubTitle(json) {\n      json[HCConstants.SUBTITLE] || (json[HCConstants.SUBTITLE] = {});\n    }\n\n    function setSubtitleStyle(json) {\n      setSubTitle(json);\n      json[HCConstants.SUBTITLE][HCConstants.STYLE] || (json[HCConstants.SUBTITLE][HCConstants.STYLE] = {});\n    }\n\n    function setLegend(json) {\n      json[HCConstants.LEGEND] || (json[HCConstants.LEGEND] = {});\n    }\n\n    function setLegendStyle(json) {\n      setLegend(json);\n      json[HCConstants.LEGEND][HCConstants.LEGEND_STYLE] || (json[HCConstants.LEGEND][HCConstants.LEGEND_STYLE] = {});\n    }\n\n    function setPlotOptions(json) {\n      json[HCConstants.PLOT_OPTIONS] || (json[HCConstants.PLOT_OPTIONS] = {});\n    }\n\n    function setPlotType(json, type) {\n      setPlotOptions(json);\n      json[HCConstants.PLOT_OPTIONS][type] || (json[HCConstants.PLOT_OPTIONS][type] = {});\n    }\n\n    function setDatalabel(json, type) {\n      setPlotOptions(json);\n      setPlotType(json, type);\n    }\n\n    function setHAxis(json) {\n      json[HCConstants.HAXIS] || (json[HCConstants.HAXIS] = [{}]); // Atleast one xaxis object is needed\n    }\n\n    function setVAxis(json) {\n      json[HCConstants.VAXIS] || (json[HCConstants.VAXIS] = [{}]); // Atleast one yaxis object is needed\n    }\n\n    function setCredits(json) {\n      json[HCConstants.CREDITS] || (json[HCConstants.CREDITS] = {});\n    }\n\n    function setColors(json) {\n      json[HCConstants.COLORS] || (json[HCConstants.COLORS] = {});\n    }\n\n    function setTooltip(json) {\n      json[HCConstants.TOOLTIP] || (json[HCConstants.TOOLTIP] = {});\n    }\n\n    var keyToFunction = {};\n    keyToFunction[HCKeyList.CHART] = setChart;\n    keyToFunction[HCKeyList.ANIMATION] = setAnimation;\n    keyToFunction[HCKeyList.CHART_STYLE] = setChartStyle;\n    keyToFunction[HCKeyList.ANIMATION] = setChartAnimation;\n    keyToFunction[HCKeyList.CAPTION] = setCaption;\n    keyToFunction[HCKeyList.CAPTION_STYLE] = setCaptionStyle;\n    keyToFunction[HCKeyList.TITLE] = setTitle;\n    keyToFunction[HCKeyList.TITLE_STYLE] = setTitleStyle;\n    keyToFunction[HCKeyList.SUBTITLE] = setSubTitle;\n    keyToFunction[HCKeyList.SUBTITLE_STYLE] = setSubtitleStyle;\n    keyToFunction[HCKeyList.LEGEND] = setLegend;\n    keyToFunction[HCKeyList.LEGEND_STYLE] = setLegendStyle;\n    keyToFunction[HCKeyList.DATALABEL] = setDatalabel;\n    keyToFunction[HCKeyList.HAXIS] = setHAxis;\n    keyToFunction[HCKeyList.VAXIS] = setVAxis;\n    keyToFunction[HCKeyList.CREDITS] = setCredits;\n    keyToFunction[HCKeyList.COLORS] = setColors;\n    keyToFunction[HCKeyList.TOOLTIP] = setTooltip;\n\n    function getSkeleton(keyList, type) {\n      var skeleton = {};\n      var keysLen = keyList ? keyList.length : 0;\n\n      for (var i = 0; i < keysLen; i++) {\n        if (keyToFunction[keyList[i]]) {\n          keyToFunction[keyList[i]](skeleton, type);\n        }\n      }\n\n      return skeleton;\n    }\n\n    return {\n      construct: function construct(type, chartType) {\n        var keyList = chartTypeToHCKeys[chartType];\n        return getSkeleton(keyList, type);\n      }\n    };\n  }();\n\n  ctx.HCSkeletonConstructor = HCSkeletonConstructor;\n})(window || this);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/Utils/HCSkeletonConstructor.js\n");

/***/ }),

/***/ "./js/Utils/HCTooltipHandler.js":
/*!**************************************!*\
  !*** ./js/Utils/HCTooltipHandler.js ***!
  \**************************************/
/***/ (function() {

"use strict";
eval("/*$Id$*/\n //No I18N\n\n(function (ctx) {\n  var C = ctx.ChartConstants;\n  var HCC = ctx.HCConstants;\n\n  var HCTooltipHandler = function () {\n    return {\n      handleTooltip: function handleTooltip(hcJSON, chartType) {\n        var tooltip = hcJSON[HCC.TOOLTIP];\n        tooltip[HCC.FOLLOW_TOUCH_MOVE] = false; // Reason : Prevents tooltip moving when chart is panned after touch.\n\n        tooltip[HCC.USE_HTML] = false; // Reason : Issue - Tooltip text extended beyond the tooltip box. When useHTML = true, text becomes a separate html element overlayed above the box svg. \n\n        if (hcJSON[HCC.CHART][HCC.TYPE].indexOf(HCC.ITEM) == -1) {\n          tooltip[HCC.FOLLOW_POINTER] = false; // Reason : Issue - Tooltip positioning is affected during zoom(Highcharts issue). If false, tooltip appears at a single point for each item.\n        }\n\n        if (chartType.indexOf(C.LINE_TIME_SERIES) == -1 && chartType.indexOf(C.AREA_TIME_SERIES) == -1 && (chartType.indexOf(C.SCATTER) !== -1 || chartType.indexOf(C.ANIMATION_CHART) !== -1 || chartType.indexOf(C.PARETO) !== -1 || chartType.indexOf(C.COL) !== -1 || chartType.indexOf(C.BAR) !== -1 || chartType.indexOf(C.LINE) !== -1 || chartType.indexOf(C.AREA) !== -1 || chartType.indexOf(C.SPLINE) !== -1)) {\n          tooltip[HCC.BORDER_COLOR] = null; // For these chart types, tooltip border color should be same as point color. Setting null achieves it.\n\n          tooltip[HCC.USE_HTML] = true;\n          tooltip[HCC.CHART_TYPE] = chartType;\n          tooltip[HCC.DELAY_DISPLAY] = 200;\n          tooltip[HCC.HIDE_DELAY] = 50;\n          tooltip[HCC.HAS_REGRESSION] = hcJSON[HCC.SERIES] && hcJSON[HCC.SERIES][0] && hcJSON[HCC.SERIES][0].hasOwnProperty(\"regressionSettings\");\n\n          tooltip[HCC.FORMATTER] = function () {\n            var currency = this.series && this.series.userOptions ? this.series.userOptions.currencySymbol : \"\";\n\n            if (chartType.indexOf(C.WORD_CLOUD) != -1) {\n              return;\n            }\n\n            var txt = '';\n            var suffix;\n            var value;\n            var currencySymbol = currency;\n            var floats = this.point.decimals;\n            var xfloats = this.point.xdecimals;\n            var type = this.series.tooltipOptions.chartType;\n            ;\n            var color = this.color || this.series.color;\n\n            if (this.series.tooltipOptions.hasRegression) {\n              value = parseFloat(this.y);\n              value = Highcharts.numberFormat(Math.abs(value), floats);\n\n              if (type.indexOf(C.SCATTER) !== -1) {\n                txt += '<b>' + ' ' + this.series.name + '</b>';\n                txt += '<b>' + \"<br> x : \" + '</b>'; //No I18N\n\n                if (this.x < 0) {\n                  txt += '-';\n                }\n\n                txt += Highcharts.numberFormat(Math.abs(parseFloat(this.x)), xfloats);\n                txt += '<b>' + \"<br> y : \" + '</b>'; //No I18N\n              } else {\n                txt += '<b>' + ' ' + this.key + '</b>' + '<br>';\n                txt += '<b>' + ' ' + this.series.name + '</b>';\n                txt += '<b>' + \": \" + '</b>';\n              }\n\n              if (this.y < 0) {\n                txt += '-';\n              }\n\n              if (currencySymbol && currencySymbol !== \"%\") {\n                txt += currencySymbol;\n              }\n\n              txt += value + '<br>';\n            } else {\n              suffix = this.series.tooltipOptions.valueSuffix || '';\n              value = parseFloat(this.y);\n              value = Highcharts.numberFormat(Math.abs(value), floats);\n\n              if (type.indexOf(C.SCATTER) !== -1) {\n                txt += '<span style=\"color:' + color + \"\\\">\\u25CF</span> \" + '<b>' + ' ' + this.series.name + '</b>';\n                txt += \"<br><b> x : </b>\"; //No I18N\n\n                if (this.x < 0) {\n                  txt += '-';\n                }\n\n                txt += Highcharts.numberFormat(Math.abs(parseFloat(this.x)), xfloats);\n                txt += \"<br> y : \"; //No I18N\n              } else {\n                txt += '<b>' + ' ' + this.key + '</b>' + '<br>';\n                txt += '<span style=\"color:' + color + \"\\\">\\u25CF</span> \" + '<b>' + ' ' + this.series.name + '</b>';\n                txt += '<b>' + \": \" + '</b>';\n              }\n\n              if (this.y < 0) {\n                txt += '-';\n              }\n\n              if (currencySymbol && currencySymbol !== \"%\") {\n                txt += currencySymbol;\n              }\n\n              txt += value;\n              txt += suffix + '<br>';\n            }\n\n            return txt;\n          };\n        } else if (chartType.indexOf(C.WEIGHTED_FUNNEL) != -1) {\n          // var currency = this.series.userOptions.currencySymbol || \"\";\n          tooltip[HCC.HAS_REGRESSION] = hcJSON[HCC.SERIES] && hcJSON[HCC.SERIES][0] && hcJSON[HCC.SERIES][0].hasOwnProperty(\"regressionSettings\");\n          tooltip[HCC.CHART_TYPE] = chartType;\n          tooltip[HCC.BORDER_COLOR] = null; // For these chart types, tooltip border color should be same as point color. Setting null achieves it.\n\n          tooltip[HCC.USE_HTML] = true;\n          tooltip[HCC.DELAY_DISPLAY] = 200;\n          tooltip[HCC.HIDE_DELAY] = 50;\n\n          tooltip[HCC.FORMATTER] = function () {\n            var currency = this.series.userOptions.currencySymbol || \"\";\n            var txt = '';\n            var value;\n            var suffix;\n            var currencySymbol = currency;\n            var floats = this.point.decimals;\n            var type = this.series.tooltipOptions.chartType;\n            var color = this.color || this.series.color;\n\n            if (this.series.tooltipOptions.hasRegression) {\n              txt += '<b>' + ' ' + this.series.name + '</b>';\n              value = parseFloat(this.point.options.y);\n              value = Highcharts.numberFormat(Math.abs(value), floats);\n\n              if (type.indexOf(chartType.SCATTER) !== -1) {\n                txt += '<b>' + \"<br> x : \" + '</b>'; //No I18N\n\n                if (this.x < 0) {\n                  txt += '-';\n                }\n\n                txt += Highcharts.numberFormat(Math.abs(parseFloat(this.x)), floats);\n                txt += '<b>' + \"<br> y : \" + '</b>'; //No I18N\n              } else {\n                txt += '<b>' + \": \" + '</b>';\n              }\n\n              if (this.point.options.y < 0) {\n                txt += '-';\n              }\n\n              if (currencySymbol && currencySymbol !== \"%\") {\n                txt += currencySymbol;\n              }\n\n              txt += value + '<br>';\n            } else {\n              txt += '<span style=\"color:' + color + \"\\\">\\u25CF</span> \" + '<b>' + ' ' + this.series.name + '</b>';\n              suffix = this.series.tooltipOptions.valueSuffix || '';\n              value = parseFloat(this.point.options.y);\n              value = Highcharts.numberFormat(Math.abs(value), floats);\n\n              if (type.indexOf(chartType.SCATTER) !== -1) {\n                txt += \"<br><b> x : </b>\"; //No I18N\n\n                if (this.x < 0) {\n                  txt += '-';\n                }\n\n                txt += Highcharts.numberFormat(Math.abs(parseFloat(this.x)), floats);\n                txt += \"<br> y : \"; //No I18N\n              } else {\n                txt += '<b>' + \": \" + '</b>';\n              }\n\n              if (this.point.options.y < 0) {\n                txt += '-';\n              }\n\n              if (currencySymbol && currencySymbol !== \"%\") {\n                txt += currencySymbol;\n              }\n\n              txt += value;\n              txt += suffix + '<br>';\n            }\n\n            return txt;\n          };\n        } else if (chartType.indexOf(C.BULLET) !== -1 || chartType.indexOf(C.GROUPED) !== -1) {\n          // var currency = this.series.userOptions.currencySymbol || \"\";\n          tooltip[HCC.SHARED] = true;\n          tooltip[HCC.BORDER_COLOR] = null;\n          tooltip[HCC.USE_HTML] = true;\n          tooltip[HCC.DELAY_DISPLAY] = 200;\n          tooltip[HCC.HIDE_DELAY] = 50;\n\n          tooltip[HCC.POINT_FORMATTER] = function () {\n            var currency = this.series.userOptions.currencySymbol || \"\";\n            var currencySymbol = currency;\n            var txt = '';\n            var floats = this.decimals;\n            var color = this.color || this.series.color;\n            txt += '<span style=\"color:' + color + \"\\\">\\u25CF   </span> \" + '<b>' + ' ' + this.series.name;\n            suffix = this.series.tooltipOptions.valueSuffix || '';\n            var value = parseFloat(this.y);\n            value = Highcharts.numberFormat(Math.abs(value), floats); //txt+= value;\n\n            txt += \": \" + '</b>';\n\n            if (this.y < 0) {\n              txt += '-';\n            }\n\n            if (currencySymbol && currencySymbol !== \"%\") {\n              txt += '<b>' + currencySymbol + '</b>';\n            }\n\n            txt += '<b>' + value + '</b>';\n            txt += suffix + '<br>';\n            return txt;\n          };\n        } else if (chartType.indexOf(C.PIE) !== -1 || chartType.indexOf(C.ITEM) !== -1 || chartType.indexOf(C.FUNNEL) !== -1) {\n          // var currency = this.series.userOptions.currencySymbol || \"\";\n          tooltip[HCC.BACKGROUND_COLOR] = \"#FFFFFF\";\n          tooltip[HCC.SHAPE] = \"square\";\n          tooltip[HCC.USE_HTML] = true;\n          tooltip[HCC.DELAY_DISPLAY] = 200;\n          tooltip[HCC.HIDE_DELAY] = 50;\n\n          tooltip[HCC.FORMATTER] = function () {\n            var currency = this.series.userOptions.currencySymbol || \"\";\n            var cSymbol = currency;\n            var floats = this.point.decimals;\n            var txt = '';\n            var value;\n            txt += '<b>' + this.point.name + '</b>';\n            txt += \"<br />\";\n            txt += '<span style=\"color:' + this.point.color + \"\\\">\\u25CF   </span>\" + '<b>' + ' ' + this.series.name + '</b>';\n            value = parseFloat(this.y);\n            value = Highcharts.numberFormat(Math.abs(value), floats);\n            txt += '<b>' + \": \" + '</b>';\n\n            if (this.y < 0) {\n              txt += '-';\n            }\n\n            var csSym = \"\";\n            csSym = cSymbol || \"\";\n            var prefix = csSym && csSym !== \"%\" ? csSym : \"\";\n            var suffix = csSym && csSym === \"%\" ? csSym : \"\";\n            txt += '<b>' + prefix + '</b>' + value + '<b>' + suffix + '</b>' + '<br />';\n            return txt;\n          };\n        }\n      }\n    };\n  }();\n\n  ctx.HCTooltipHandler = HCTooltipHandler;\n})(window || this);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/Utils/HCTooltipHandler.js\n");

/***/ }),

/***/ "./js/Utils/HCUtils.js":
/*!*****************************!*\
  !*** ./js/Utils/HCUtils.js ***!
  \*****************************/
/***/ (function() {

"use strict";
eval("/*$Id$*/\n //No I18N\n\n(function (ctx) {\n  var HCUtils = function () {\n    return {\n      getBGColor: function getBGColor(color) {\n        var bgColor = color;\n\n        if (color instanceof Object) {\n          bgColor = color.stops[1][1];\n        }\n\n        return bgColor;\n      }\n    };\n  }();\n\n  ctx.HCUtils = HCUtils;\n})(window || this);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9qcy9VdGlscy9IQ1V0aWxzLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0NBQ2E7O0FBQ2IsQ0FBQyxVQUFVQSxHQUFWLEVBQWU7QUFDWixNQUFJQyxPQUFPLEdBQUksWUFBVztBQUN0QixXQUFPO0FBQ0hDLE1BQUFBLFVBQVUsRUFBRyxvQkFBVUMsS0FBVixFQUFpQjtBQUMxQixZQUFJQyxPQUFPLEdBQUdELEtBQWQ7O0FBQ0EsWUFBR0EsS0FBSyxZQUFZRSxNQUFwQixFQUEyQjtBQUN2QkQsVUFBQUEsT0FBTyxHQUFHRCxLQUFLLENBQUNHLEtBQU4sQ0FBWSxDQUFaLEVBQWUsQ0FBZixDQUFWO0FBQ0g7O0FBQ0QsZUFBT0YsT0FBUDtBQUNIO0FBUEUsS0FBUDtBQVNILEdBVmEsRUFBZDs7QUFZQUosRUFBQUEsR0FBRyxDQUFDQyxPQUFKLEdBQWNBLE9BQWQ7QUFFSCxDQWZELEVBZUdNLE1BQU0sSUFBSSxJQWZiIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXVsdGktY2hhcnQtZnJhbWV3b3JrLy4vanMvVXRpbHMvSENVdGlscy5qcz9iMzFjIl0sInNvdXJjZXNDb250ZW50IjpbIi8qJElkJCovXG5cInVzZSBzdHJpY3RcIjsvL05vIEkxOE5cbihmdW5jdGlvbiAoY3R4KSB7XG4gICAgdmFyIEhDVXRpbHMgPSAoZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBnZXRCR0NvbG9yIDogZnVuY3Rpb24gKGNvbG9yKSB7XG4gICAgICAgICAgICAgICAgdmFyIGJnQ29sb3IgPSBjb2xvcjtcbiAgICAgICAgICAgICAgICBpZihjb2xvciBpbnN0YW5jZW9mIE9iamVjdCl7XG4gICAgICAgICAgICAgICAgICAgIGJnQ29sb3IgPSBjb2xvci5zdG9wc1sxXVsxXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGJnQ29sb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfSkoKTtcblxuICAgIGN0eC5IQ1V0aWxzID0gSENVdGlscztcblxufSkod2luZG93IHx8IHRoaXMpOyJdLCJuYW1lcyI6WyJjdHgiLCJIQ1V0aWxzIiwiZ2V0QkdDb2xvciIsImNvbG9yIiwiYmdDb2xvciIsIk9iamVjdCIsInN0b3BzIiwid2luZG93Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./js/Utils/HCUtils.js\n");

/***/ }),

/***/ "./js/Utils/HistogramUtil.js":
/*!***********************************!*\
  !*** ./js/Utils/HistogramUtil.js ***!
  \***********************************/
/***/ (function() {

"use strict";
eval("/*$Id$*/\n //No I18N\n\n(function (ctx) {\n  var HistogramUtil = function () {\n    function sort(a, b) {\n      return a - b;\n    }\n\n    return {\n      compute: function compute(data, binningInterval) {\n        var hData = {};\n        var size = data.length;\n        data.sort(sort);\n        var max = data[data.length - 1];\n        var min = data[0];\n        var range = max - min;\n        var bins;\n\n        if (binningInterval == undefined) {\n          bins = Math.round(Math.sqrt(size)); //determine how many bins we need\n\n          binningInterval = range / bins;\n        }\n\n        var bin_bottom = min;\n        var bin_top = bin_bottom + binningInterval;\n        var entryKey = bin_bottom + \" - \" + bin_top; //No I18N\n\n        hData[entryKey] = 0;\n\n        for (var i = 0; i < data.length; i++) {\n          if (data[i] < bin_top) {\n            hData[entryKey]++;\n          } else {\n            //Find next bin\n            do {\n              bin_bottom = bin_top;\n              bin_top = bin_bottom + binningInterval;\n            } while (data[i] >= bin_top);\n\n            var entryKey = bin_bottom + \" - \" + bin_top; //No I18N\n\n            hData[entryKey] = 0;\n            hData[entryKey]++;\n          }\n        }\n\n        return hData;\n      }\n    };\n  }();\n\n  ctx.HistogramUtil = HistogramUtil;\n})(window || this);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9qcy9VdGlscy9IaXN0b2dyYW1VdGlsLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0NBQ2E7O0FBQ2IsQ0FBQyxVQUFVQSxHQUFWLEVBQWU7QUFDWixNQUFJQyxhQUFhLEdBQUksWUFBVztBQUU1QixhQUFTQyxJQUFULENBQWNDLENBQWQsRUFBaUJDLENBQWpCLEVBQW9CO0FBQ2hCLGFBQU9ELENBQUMsR0FBR0MsQ0FBWDtBQUNIOztBQUNELFdBQU87QUFDSEMsTUFBQUEsT0FBTyxFQUFHLGlCQUFTQyxJQUFULEVBQWVDLGVBQWYsRUFBZ0M7QUFDdEMsWUFBSUMsS0FBSyxHQUFHLEVBQVo7QUFDQSxZQUFJQyxJQUFJLEdBQUdILElBQUksQ0FBQ0ksTUFBaEI7QUFDQUosUUFBQUEsSUFBSSxDQUFDSixJQUFMLENBQVVBLElBQVY7QUFDQSxZQUFJUyxHQUFHLEdBQUdMLElBQUksQ0FBQ0EsSUFBSSxDQUFDSSxNQUFMLEdBQWMsQ0FBZixDQUFkO0FBQ0EsWUFBSUUsR0FBRyxHQUFHTixJQUFJLENBQUMsQ0FBRCxDQUFkO0FBQ0EsWUFBSU8sS0FBSyxHQUFHRixHQUFHLEdBQUdDLEdBQWxCO0FBQ0EsWUFBSUUsSUFBSjs7QUFDQSxZQUFHUCxlQUFlLElBQUlRLFNBQXRCLEVBQWlDO0FBQzdCRCxVQUFBQSxJQUFJLEdBQUdFLElBQUksQ0FBQ0MsS0FBTCxDQUFXRCxJQUFJLENBQUNFLElBQUwsQ0FBVVQsSUFBVixDQUFYLENBQVAsQ0FENkIsQ0FDTzs7QUFDcENGLFVBQUFBLGVBQWUsR0FBR00sS0FBSyxHQUFHQyxJQUExQjtBQUNIOztBQUNELFlBQUlLLFVBQVUsR0FBR1AsR0FBakI7QUFDQSxZQUFJUSxPQUFPLEdBQUdELFVBQVUsR0FBR1osZUFBM0I7QUFDQSxZQUFJYyxRQUFRLEdBQUdGLFVBQVUsR0FBRyxLQUFiLEdBQW9CQyxPQUFuQyxDQWRzQyxDQWNNOztBQUM1Q1osUUFBQUEsS0FBSyxDQUFDYSxRQUFELENBQUwsR0FBa0IsQ0FBbEI7O0FBQ0EsYUFBSSxJQUFJQyxDQUFDLEdBQUMsQ0FBVixFQUFhQSxDQUFDLEdBQUdoQixJQUFJLENBQUNJLE1BQXRCLEVBQThCWSxDQUFDLEVBQS9CLEVBQW1DO0FBQy9CLGNBQUdoQixJQUFJLENBQUNnQixDQUFELENBQUosR0FBVUYsT0FBYixFQUFzQjtBQUNsQlosWUFBQUEsS0FBSyxDQUFDYSxRQUFELENBQUw7QUFDSCxXQUZELE1BRU87QUFDSDtBQUNBLGVBQUc7QUFDQ0YsY0FBQUEsVUFBVSxHQUFHQyxPQUFiO0FBQ0FBLGNBQUFBLE9BQU8sR0FBR0QsVUFBVSxHQUFHWixlQUF2QjtBQUNILGFBSEQsUUFHUUQsSUFBSSxDQUFDZ0IsQ0FBRCxDQUFKLElBQVdGLE9BSG5COztBQUtBLGdCQUFJQyxRQUFRLEdBQUdGLFVBQVUsR0FBRyxLQUFiLEdBQW9CQyxPQUFuQyxDQVBHLENBT3lDOztBQUM1Q1osWUFBQUEsS0FBSyxDQUFDYSxRQUFELENBQUwsR0FBa0IsQ0FBbEI7QUFDQWIsWUFBQUEsS0FBSyxDQUFDYSxRQUFELENBQUw7QUFDSDtBQUNKOztBQUNELGVBQU9iLEtBQVA7QUFDSDtBQWpDRSxLQUFQO0FBbUNILEdBeENtQixFQUFwQjs7QUEwQ0FSLEVBQUFBLEdBQUcsQ0FBQ0MsYUFBSixHQUFvQkEsYUFBcEI7QUFFSCxDQTdDRCxFQTZDR3NCLE1BQU0sSUFBSSxJQTdDYiIsInNvdXJjZXMiOlsid2VicGFjazovL211bHRpLWNoYXJ0LWZyYW1ld29yay8uL2pzL1V0aWxzL0hpc3RvZ3JhbVV0aWwuanM/NWIyZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiRJZCQqL1xuXCJ1c2Ugc3RyaWN0XCI7Ly9ObyBJMThOXG4oZnVuY3Rpb24gKGN0eCkge1xuICAgIHZhciBIaXN0b2dyYW1VdGlsID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIGZ1bmN0aW9uIHNvcnQoYSwgYikge1xuICAgICAgICAgICAgcmV0dXJuIGEgLSBiO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjb21wdXRlIDogZnVuY3Rpb24oZGF0YSwgYmlubmluZ0ludGVydmFsKSB7XG4gICAgICAgICAgICAgICAgdmFyIGhEYXRhID0ge307IFxuICAgICAgICAgICAgICAgIHZhciBzaXplID0gZGF0YS5sZW5ndGg7IFxuICAgICAgICAgICAgICAgIGRhdGEuc29ydChzb3J0KTtcbiAgICAgICAgICAgICAgICB2YXIgbWF4ID0gZGF0YVtkYXRhLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgICAgIHZhciBtaW4gPSBkYXRhWzBdO1xuICAgICAgICAgICAgICAgIHZhciByYW5nZSA9IG1heCAtIG1pbjtcbiAgICAgICAgICAgICAgICB2YXIgYmlucztcbiAgICAgICAgICAgICAgICBpZihiaW5uaW5nSW50ZXJ2YWwgPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGJpbnMgPSBNYXRoLnJvdW5kKE1hdGguc3FydChzaXplKSk7IC8vZGV0ZXJtaW5lIGhvdyBtYW55IGJpbnMgd2UgbmVlZFxuICAgICAgICAgICAgICAgICAgICBiaW5uaW5nSW50ZXJ2YWwgPSByYW5nZSAvIGJpbnM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBiaW5fYm90dG9tID0gbWluO1xuICAgICAgICAgICAgICAgIHZhciBiaW5fdG9wID0gYmluX2JvdHRvbSArIGJpbm5pbmdJbnRlcnZhbDtcbiAgICAgICAgICAgICAgICB2YXIgZW50cnlLZXkgPSBiaW5fYm90dG9tICsgXCIgLSBcIisgYmluX3RvcDsgLy9ObyBJMThOXG4gICAgICAgICAgICAgICAgaERhdGFbZW50cnlLZXldID0gMDtcbiAgICAgICAgICAgICAgICBmb3IodmFyIGk9MDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYoZGF0YVtpXSA8IGJpbl90b3ApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhEYXRhW2VudHJ5S2V5XSsrO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9GaW5kIG5leHQgYmluXG4gICAgICAgICAgICAgICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmluX2JvdHRvbSA9IGJpbl90b3A7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmluX3RvcCA9IGJpbl9ib3R0b20gKyBiaW5uaW5nSW50ZXJ2YWw7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IHdoaWxlKGRhdGFbaV0gPj0gYmluX3RvcClcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVudHJ5S2V5ID0gYmluX2JvdHRvbSArIFwiIC0gXCIrIGJpbl90b3A7IC8vTm8gSTE4TlxuICAgICAgICAgICAgICAgICAgICAgICAgaERhdGFbZW50cnlLZXldID0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhEYXRhW2VudHJ5S2V5XSsrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBoRGF0YTsgIFxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH0pKCk7XG5cbiAgICBjdHguSGlzdG9ncmFtVXRpbCA9IEhpc3RvZ3JhbVV0aWw7XG5cbn0pKHdpbmRvdyB8fCB0aGlzKTsiXSwibmFtZXMiOlsiY3R4IiwiSGlzdG9ncmFtVXRpbCIsInNvcnQiLCJhIiwiYiIsImNvbXB1dGUiLCJkYXRhIiwiYmlubmluZ0ludGVydmFsIiwiaERhdGEiLCJzaXplIiwibGVuZ3RoIiwibWF4IiwibWluIiwicmFuZ2UiLCJiaW5zIiwidW5kZWZpbmVkIiwiTWF0aCIsInJvdW5kIiwic3FydCIsImJpbl9ib3R0b20iLCJiaW5fdG9wIiwiZW50cnlLZXkiLCJpIiwid2luZG93Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./js/Utils/HistogramUtil.js\n");

/***/ }),

/***/ "./js/Utils/RaceBarSeriesConstructor.js":
/*!**********************************************!*\
  !*** ./js/Utils/RaceBarSeriesConstructor.js ***!
  \**********************************************/
/***/ (function() {

"use strict";
eval("/*$Id$*/\n //No I18N\n\n(function (ctx) {\n  var C = ctx.ChartConstants;\n  var HCC = ctx.HCConstants;\n  var HCKeyList = ctx.HCKeyList;\n  var HCArraySkeletonConstructor = ctx.HCArraySkeletonConstructor;\n  var GUtils = ctx.GeneralUtilities;\n\n  var RaceBarSeriesConstructor = function () {\n    var raceChartData = {};\n\n    function fillCumulatedArrayWithZero(chartId) {\n      var d = raceChartData[chartId];\n\n      for (var i = 0; i < d.totalSeries; i++) {\n        d.prevCumulatedArr[i] = 0;\n      }\n    }\n\n    function setRaceData(index, series_property, data, parse, constructedHeaderCols, constructedHeaderRows, highchartsJSON, chartType, totalSeries, seriesIndices) {\n      //Populate the map\n      var chartId = highchartsJSON[HCC.CHART][HCC.RENDER_TO];\n\n      if (raceChartData[chartId] != null) {\n        clearInterval(raceChartData[chartId].timer);\n      }\n\n      raceChartData[chartId] || (raceChartData[chartId] = {});\n      raceChartData[chartId].index = index;\n      raceChartData[chartId].currentIndex = 0;\n      raceChartData[chartId].series_property = series_property;\n      raceChartData[chartId].data = data;\n      raceChartData[chartId].parse = parse;\n      raceChartData[chartId].constructedHeaderCols = constructedHeaderCols;\n      raceChartData[chartId].constructedHeaderRows = constructedHeaderRows;\n      raceChartData[chartId].chartType = chartType;\n      raceChartData[chartId].isPlaying = false;\n      raceChartData[chartId].seriesIndices = seriesIndices;\n      raceChartData[chartId].totalSeries = totalSeries;\n      raceChartData[chartId].timer = undefined;\n      raceChartData[chartId].prevCumulatedArr = [];\n      fillCumulatedArrayWithZero(chartId); // for(var i=0; i < totalSeries; i++){\n      //     raceChartData[chartId].prevCumulatedArr[i] = 0;\n      // }\n    }\n\n    function update(i, chartId, highchartsJSON, highchartsInstance) {\n      var d = raceChartData[chartId];\n      constructSeries(d.index, d.seriesIndices[i], d.series_property, d.data, d.parse, d.constructedHeaderCols, d.constructedHeaderRows, highchartsJSON, d.chartType);\n      highchartsInstance[HCConstants.SERIES][0].setData(highchartsJSON[HCConstants.SERIES][0].data);\n      highchartsInstance[HCConstants.SERIES][0].setName(highchartsJSON[HCConstants.SERIES][0].name);\n      highchartsInstance.setCaption({\n        text: highchartsJSON[HCConstants.CAPTION][HCConstants.TEXT]\n      });\n    }\n\n    function constructSeries(index, dataIndex, series_property, data, parse, constructedHeaderCols, constructedHeaderRows, highchartsJSON, chartType, isNewChart) {\n      var easeIn = function easeIn(pos) {\n        return pos;\n      };\n\n      highchartsJSON.chart.animation.easing = easeIn;\n      highchartsJSON[HCC.SERIES][index] = {};\n      highchartsJSON[HCC.SERIES][index][HCC.TYPE] = HCMaps.chartTypeToHCType[chartType];\n      var headerColIndex = series_property[C.COL_HEADER_INDEX] != undefined ? series_property[C.COL_HEADER_INDEX] : -1;\n      var headerRowIndex = series_property[C.ROW_HEADER_INDEX] != undefined ? series_property[C.ROW_HEADER_INDEX] : -1;\n      var headerRows = GUtils.convertStringArrayToNumber(Object.keys(constructedHeaderRows));\n      var headerCols = GUtils.convertStringArrayToNumber(Object.keys(constructedHeaderCols));\n      var colCount = constructedHeaderRows[headerRows[0]].length; // The number of elements in header row actually gives the column count\n\n      var rowCount = constructedHeaderCols[headerCols[0]].length; // The number of elements in header column actually gives the row count\n\n      var chartId = highchartsJSON[HCC.CHART][HCC.RENDER_TO];\n      var enableCumulation = series_property[C.ENABLE_CUMULATION];\n      var idx = 0;\n\n      if (isNewChart) {\n        var seriesIndices = series_property[C.RACE_CHART_INDICES];\n        var totalSeries = seriesIndices.length;\n        setRaceData(index, series_property, data, parse, constructedHeaderCols, constructedHeaderRows, highchartsJSON, chartType, totalSeries, seriesIndices);\n      }\n\n      var d = raceChartData[chartId];\n\n      if (enableCumulation) {\n        if (parse.indexOf(C.PARSE_DIRECTION_VERTICAL) != -1) {\n          highchartsJSON[HCC.SERIES][index][HCC.DATA] = [];\n          highchartsJSON[HCC.SERIES][index][HCC.TYPE] = HCMaps.chartTypeToHCType[chartType];\n          highchartsJSON[HCC.SERIES][index][HCC.NAME] = constructedHeaderRows[headerRowIndex][dataIndex];\n          highchartsJSON[HCC.CAPTION][HCC.TEXT] = constructedHeaderRows[headerRowIndex][dataIndex];\n          highchartsJSON[HCC.CAPTION][HCC.ALIGN] = HCC.ALIGN_RIGHT;\n\n          for (var i = 0; i < rowCount; i++) {\n            if (headerRows.indexOf(i) == -1) {\n              d.prevCumulatedArr[idx] += Number(data[i][dataIndex]);\n              highchartsJSON[HCC.SERIES][index][HCC.DATA].push({\n                y: d.prevCumulatedArr[idx],\n                name: constructedHeaderCols[headerColIndex][i],\n                decimals: GUtils.getDecimalCount(d.prevCumulatedArr[idx])\n              });\n              idx++;\n            }\n          }\n        } else {\n          highchartsJSON[HCC.SERIES][index][HCC.DATA] = [];\n          highchartsJSON[HCC.SERIES][index][HCC.TYPE] = HCMaps.chartTypeToHCType[chartType];\n          highchartsJSON[HCC.SERIES][index][HCC.NAME] = constructedHeaderCols[headerColIndex][dataIndex];\n          highchartsJSON[HCC.CAPTION][HCC.TEXT] = constructedHeaderCols[headerColIndex][dataIndex];\n          highchartsJSON[HCC.CAPTION][HCC.ALIGN] = HCC.ALIGN_RIGHT;\n\n          for (var i = 0; i < colCount; i++) {\n            if (headerCols.indexOf(i) == -1) {\n              d.prevCumulatedArr[idx] += Number(data[dataIndex][i]);\n              highchartsJSON[HCC.SERIES][index][HCC.DATA].push({\n                y: d.prevCumulatedArr[idx],\n                name: constructedHeaderRows[headerRowIndex][i],\n                decimals: GUtils.getDecimalCount(d.prevCumulatedArr[idx])\n              });\n            }\n\n            idx++;\n          }\n        }\n      } else {\n        if (parse.indexOf(C.PARSE_DIRECTION_VERTICAL) != -1) {\n          highchartsJSON[HCC.SERIES][index][HCC.DATA] = [];\n          highchartsJSON[HCC.SERIES][index][HCC.TYPE] = HCMaps.chartTypeToHCType[chartType];\n          highchartsJSON[HCC.SERIES][index][HCC.NAME] = constructedHeaderRows[headerRowIndex][dataIndex];\n          highchartsJSON[HCC.CAPTION][HCC.TEXT] = constructedHeaderRows[headerRowIndex][dataIndex];\n          highchartsJSON[HCC.CAPTION][HCC.ALIGN] = HCC.ALIGN_RIGHT;\n\n          for (var i = 0; i < rowCount; i++) {\n            if (headerRows.indexOf(i) == -1) {\n              highchartsJSON[HCC.SERIES][index][HCC.DATA].push({\n                y: Number(data[i][dataIndex]),\n                name: constructedHeaderCols[headerColIndex][i],\n                decimals: GUtils.getDecimalCount(Number(data[i][dataIndex]))\n              });\n            }\n          }\n        } else {\n          highchartsJSON[HCC.SERIES][index][HCC.DATA] = [];\n          highchartsJSON[HCC.SERIES][index][HCC.TYPE] = HCMaps.chartTypeToHCType[chartType];\n          highchartsJSON[HCC.SERIES][index][HCC.NAME] = constructedHeaderCols[headerColIndex][dataIndex];\n          highchartsJSON[HCC.CAPTION][HCC.TEXT] = constructedHeaderCols[headerColIndex][dataIndex];\n          highchartsJSON[HCC.CAPTION][HCC.ALIGN] = HCC.ALIGN_RIGHT;\n\n          for (var i = 0; i < colCount; i++) {\n            if (headerCols.indexOf(i) == -1) {\n              highchartsJSON[HCC.SERIES][index][HCC.DATA].push({\n                y: Number(data[dataIndex][i]),\n                name: constructedHeaderRows[headerRowIndex][i],\n                decimals: GUtils.getDecimalCount(Number(data[dataIndex][i]))\n              });\n            }\n          }\n        }\n      }\n\n      highchartsJSON[HCC.HAXIS][0][HCC.TYPE] = HCC.CATEGORY;\n    }\n\n    return {\n      construct: constructSeries,\n      raceChartData: raceChartData,\n      update: update,\n      fillCumulatedArrayWithZero: fillCumulatedArrayWithZero\n    };\n  }();\n\n  ctx.RaceBarSeriesConstructor = RaceBarSeriesConstructor;\n})(window || this);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/Utils/RaceBarSeriesConstructor.js\n");

/***/ }),

/***/ "./js/Utils/ZCConstants.js":
/*!*********************************!*\
  !*** ./js/Utils/ZCConstants.js ***!
  \*********************************/
/***/ (function() {

"use strict";
eval("/*$Id$*/\n //No I18N\n\n(function (ctx) {\n  var ZCConstants = ctx.ZCConstants = {};\n  ZCConstants.META_DATA = \"metadata\"; //No I18N\n\n  ZCConstants.AXES = \"axes\"; //No I18N\n\n  ZCConstants.X = \"x\"; //No I18N\n\n  ZCConstants.Y = \"y\"; //No I18N\n\n  ZCConstants.CLR = \"clr\"; //No I18N\n\n  ZCConstants.TOOLTIP = \"tooltip\"; //No I18N\n\n  ZCConstants.COLUMNS = \"columns\"; //No I18N\n\n  ZCConstants.DATA_INDEX = \"dataindex\"; //No I18N\n\n  ZCConstants.COLUMN_NAME = \"columnname\"; //No I18N\n\n  ZCConstants.DATA_TYPE = \"datatype\"; //No I18N\n\n  ZCConstants.SERIES_DATA = \"seriesdata\"; //No I18N\n\n  ZCConstants.TYPE = \"type\"; //No I18N\n\n  ZCConstants.CHART_DATA = \"chartdata\"; //No I18N\n\n  ZCConstants.SERIES_NAME = \"seriesname\"; //No I18N\n\n  ZCConstants.DATA = \"data\"; //No I18N\n\n  ZCConstants.CHART = \"chart\"; //No I18N\n\n  ZCConstants.PLOT = \"plot\"; //No I18N\n\n  ZCConstants.PLOT_OPTIONS = \"plotoptions\"; //No I18N\n\n  ZCConstants.DATA_LABELS = \"datalabels\"; //No I18N\n\n  ZCConstants.FONT_WEIGHT = \"fontWeight\"; //No I18N\n\n  ZCConstants.FONT_COLOR = \"fontColor\"; //No I18N\n\n  ZCConstants.FONT_SIZE = \"fontSize\"; //No I18N\n\n  ZCConstants.FONT_STYLE = \"fontStyle\"; //No I18N\n\n  ZCConstants.LEGEND = \"legend\"; //No I18N\n\n  ZCConstants.LAYOUT = \"layout\"; //No I18N\n\n  ZCConstants.COLORS = \"colors\"; //No I18N\n\n  ZCConstants.COLOR = \"color\"; //No I18N\n\n  ZCConstants.OPACITY = \"opacity\"; //No I18N\n\n  ZCConstants.CANVAS = \"canvas\"; //No I18N\n\n  ZCConstants.SUBTITLE = \"subtitle\"; //No I18N\n\n  ZCConstants.SHOW = \"show\"; //No I18N\n\n  ZCConstants.TITLE = \"title\"; //No I18N\n\n  ZCConstants.TEXT = \"text\"; //No I18N\n\n  ZCConstants.VERTICAL = \"vertical\"; //No I18N\n\n  ZCConstants.BOLD = \"bold\"; //No I18N\n  //ZCChart types\n\n  ZCConstants.WORDCLOUD = \"wordcloud\"; //No I18N\n\n  ZCConstants.RACEBAR = \"bar\"; //No I18N\n})(window || this);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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OztBQUM1QzlCLEVBQUFBLFdBQVcsQ0FBQytCLElBQVosR0FBZ0MsTUFBaEMsQ0FqQ1UsQ0FpQzhCOztBQUN4Qy9CLEVBQUFBLFdBQVcsQ0FBQ2dDLEtBQVosR0FBZ0MsT0FBaEMsQ0FsQ1UsQ0FrQytCOztBQUN6Q2hDLEVBQUFBLFdBQVcsQ0FBQ2lDLElBQVosR0FBZ0MsTUFBaEMsQ0FuQ1UsQ0FtQzhCOztBQUl4Q2pDLEVBQUFBLFdBQVcsQ0FBQ2tDLFFBQVosR0FBZ0MsVUFBaEMsQ0F2Q1UsQ0F1Q2tDOztBQUM1Q2xDLEVBQUFBLFdBQVcsQ0FBQ21DLElBQVosR0FBZ0MsTUFBaEMsQ0F4Q1UsQ0F3QzhCO0FBRXhDOztBQUNBbkMsRUFBQUEsV0FBVyxDQUFDb0MsU0FBWixHQUFnQyxXQUFoQyxDQTNDVSxDQTJDa0M7O0FBQzVDcEMsRUFBQUEsV0FBVyxDQUFDcUMsT0FBWixHQUFnQyxLQUFoQyxDQTVDVSxDQTRDNEI7QUFFekMsQ0E5Q0QsRUE4Q0dDLE1BQU0sSUFBSSxJQTlDYiIsInNvdXJjZXMiOlsid2VicGFjazovL211bHRpLWNoYXJ0LWZyYW1ld29yay8uL2pzL1V0aWxzL1pDQ29uc3RhbnRzLmpzPzY2M2IiXSwic291cmNlc0NvbnRlbnQiOlsiLyokSWQkKi9cblwidXNlIHN0cmljdFwiOyAvL05vIEkxOE5cbihmdW5jdGlvbihjdHgpe1xuICAgIHZhciBaQ0NvbnN0YW50cyA9IGN0eC5aQ0NvbnN0YW50cyA9IHt9O1xuXG4gICAgWkNDb25zdGFudHMuTUVUQV9EQVRBICAgICAgID0gICBcIm1ldGFkYXRhXCI7IC8vTm8gSTE4TlxuICAgIFpDQ29uc3RhbnRzLkFYRVMgICAgICAgICAgICA9ICAgXCJheGVzXCI7IC8vTm8gSTE4TlxuICAgIFpDQ29uc3RhbnRzLlggICAgICAgICAgICAgICA9ICAgXCJ4XCI7IC8vTm8gSTE4TlxuICAgIFpDQ29uc3RhbnRzLlkgICAgICAgICAgICAgICA9ICAgXCJ5XCI7IC8vTm8gSTE4TlxuICAgIFpDQ29uc3RhbnRzLkNMUiAgICAgICAgICAgICA9ICAgXCJjbHJcIjsgLy9ObyBJMThOXG4gICAgWkNDb25zdGFudHMuVE9PTFRJUCAgICAgICAgID0gICBcInRvb2x0aXBcIjsgLy9ObyBJMThOXG4gICAgWkNDb25zdGFudHMuQ09MVU1OUyAgICAgICAgID0gICBcImNvbHVtbnNcIjsgLy9ObyBJMThOXG4gICAgWkNDb25zdGFudHMuREFUQV9JTkRFWCAgICAgID0gICBcImRhdGFpbmRleFwiOyAvL05vIEkxOE5cbiAgICBaQ0NvbnN0YW50cy5DT0xVTU5fTkFNRSAgICAgPSAgIFwiY29sdW1ubmFtZVwiOyAvL05vIEkxOE5cbiAgICBaQ0NvbnN0YW50cy5EQVRBX1RZUEUgICAgICAgPSAgIFwiZGF0YXR5cGVcIjsgLy9ObyBJMThOXG4gICAgWkNDb25zdGFudHMuU0VSSUVTX0RBVEEgICAgID0gICBcInNlcmllc2RhdGFcIjsgLy9ObyBJMThOXG4gICAgWkNDb25zdGFudHMuVFlQRSAgICAgICAgICAgID0gICBcInR5cGVcIjsgLy9ObyBJMThOXG4gICAgWkNDb25zdGFudHMuQ0hBUlRfREFUQSAgICAgID0gICBcImNoYXJ0ZGF0YVwiOyAvL05vIEkxOE5cbiAgICBaQ0NvbnN0YW50cy5TRVJJRVNfTkFNRSAgICAgPSAgIFwic2VyaWVzbmFtZVwiOyAvL05vIEkxOE5cbiAgICBaQ0NvbnN0YW50cy5EQVRBICAgICAgICAgICAgPSAgIFwiZGF0YVwiOyAvL05vIEkxOE5cbiAgICBaQ0NvbnN0YW50cy5DSEFSVCAgICAgICAgICAgPSAgIFwiY2hhcnRcIjsgLy9ObyBJMThOXG4gICAgWkNDb25zdGFudHMuUExPVCAgICAgICAgICAgID0gICBcInBsb3RcIjsgLy9ObyBJMThOXG4gICAgWkNDb25zdGFudHMuUExPVF9PUFRJT05TICAgID0gICBcInBsb3RvcHRpb25zXCI7IC8vTm8gSTE4TlxuICAgIFpDQ29uc3RhbnRzLkRBVEFfTEFCRUxTICAgICA9ICAgXCJkYXRhbGFiZWxzXCI7IC8vTm8gSTE4TlxuICAgIFpDQ29uc3RhbnRzLkZPTlRfV0VJR0hUICAgICA9ICAgXCJmb250V2VpZ2h0XCI7IC8vTm8gSTE4TlxuICAgIFpDQ29uc3RhbnRzLkZPTlRfQ09MT1IgICAgICA9ICAgXCJmb250Q29sb3JcIjsgLy9ObyBJMThOXG4gICAgWkNDb25zdGFudHMuRk9OVF9TSVpFICAgICAgID0gICBcImZvbnRTaXplXCI7IC8vTm8gSTE4TlxuICAgIFpDQ29uc3RhbnRzLkZPTlRfU1RZTEUgICAgICA9ICAgXCJmb250U3R5bGVcIjsgLy9ObyBJMThOXG4gICAgWkNDb25zdGFudHMuTEVHRU5EICAgICAgICAgID0gICBcImxlZ2VuZFwiOyAvL05vIEkxOE5cbiAgICBaQ0NvbnN0YW50cy5MQVlPVVQgICAgICAgICAgPSAgIFwibGF5b3V0XCI7IC8vTm8gSTE4TlxuICAgIFpDQ29uc3RhbnRzLkNPTE9SUyAgICAgICAgICA9ICAgXCJjb2xvcnNcIjsgLy9ObyBJMThOXG4gICAgWkNDb25zdGFudHMuQ09MT1IgICAgICAgICAgID0gICBcImNvbG9yXCI7IC8vTm8gSTE4TlxuICAgIFpDQ29uc3RhbnRzLk9QQUNJVFkgICAgICAgICA9ICAgXCJvcGFjaXR5XCI7IC8vTm8gSTE4TlxuICAgIFpDQ29uc3RhbnRzLkNBTlZBUyAgICAgICAgICA9ICAgXCJjYW52YXNcIjsgLy9ObyBJMThOXG4gICAgWkNDb25zdGFudHMuU1VCVElUTEUgICAgICAgID0gICBcInN1YnRpdGxlXCI7IC8vTm8gSTE4TlxuICAgIFpDQ29uc3RhbnRzLlNIT1cgICAgICAgICAgICA9ICAgXCJzaG93XCI7IC8vTm8gSTE4TlxuICAgIFpDQ29uc3RhbnRzLlRJVExFICAgICAgICAgICA9ICAgXCJ0aXRsZVwiOyAvL05vIEkxOE5cbiAgICBaQ0NvbnN0YW50cy5URVhUICAgICAgICAgICAgPSAgIFwidGV4dFwiOyAvL05vIEkxOE5cblxuXG5cbiAgICBaQ0NvbnN0YW50cy5WRVJUSUNBTCAgICAgICAgPSAgIFwidmVydGljYWxcIjsgLy9ObyBJMThOXG4gICAgWkNDb25zdGFudHMuQk9MRCAgICAgICAgICAgID0gICBcImJvbGRcIjsgLy9ObyBJMThOXG5cbiAgICAvL1pDQ2hhcnQgdHlwZXNcbiAgICBaQ0NvbnN0YW50cy5XT1JEQ0xPVUQgICAgICAgPSAgIFwid29yZGNsb3VkXCIgLy9ObyBJMThOXG4gICAgWkNDb25zdGFudHMuUkFDRUJBUiAgICAgICAgID0gICBcImJhclwiIC8vTm8gSTE4TlxuXG59KSh3aW5kb3cgfHwgdGhpcykiXSwibmFtZXMiOlsiY3R4IiwiWkNDb25zdGFudHMiLCJNRVRBX0RBVEEiLCJBWEVTIiwiWCIsIlkiLCJDTFIiLCJUT09MVElQIiwiQ09MVU1OUyIsIkRBVEFfSU5ERVgiLCJDT0xVTU5fTkFNRSIsIkRBVEFfVFlQRSIsIlNFUklFU19EQVRBIiwiVFlQRSIsIkNIQVJUX0RBVEEiLCJTRVJJRVNfTkFNRSIsIkRBVEEiLCJDSEFSVCIsIlBMT1QiLCJQTE9UX09QVElPTlMiLCJEQVRBX0xBQkVMUyIsIkZPTlRfV0VJR0hUIiwiRk9OVF9DT0xPUiIsIkZPTlRfU0laRSIsIkZPTlRfU1RZTEUiLCJMRUdFTkQiLCJMQVlPVVQiLCJDT0xPUlMiLCJDT0xPUiIsIk9QQUNJVFkiLCJDQU5WQVMiLCJTVUJUSVRMRSIsIlNIT1ciLCJUSVRMRSIsIlRFWFQiLCJWRVJUSUNBTCIsIkJPTEQiLCJXT1JEQ0xPVUQiLCJSQUNFQkFSIiwid2luZG93Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./js/Utils/ZCConstants.js\n");

/***/ }),

/***/ "./js/Utils/ZCJSONConvertor.js":
/*!*************************************!*\
  !*** ./js/Utils/ZCJSONConvertor.js ***!
  \*************************************/
/***/ (function() {

"use strict";
eval("/*$Id$*/\n //No I18N\n\n(function (ctx) {\n  var C = ctx.ChartConstants;\n  var KL = ctx.ChartKeyList;\n  var ZCKeyList = ctx.ZCKeyList;\n  var ZCC = ctx.ZCConstants;\n  var chartTypeToZCKeys = ctx.ZCMaps.chartTypeToZCKeys;\n\n  var ZCJSONConvertor = function () {\n    function setTitleText(cJSON, zcJSON) {\n      cJSON[C.TITLE][C.TEXT] && (zcJSON[ZCC.CANVAS][ZCC.TITLE][ZCC.TEXT] = cJSON[C.TITLE][C.TEXT]);\n    }\n\n    function setTitleFontSize(cJSON, zcJSON) {\n      cJSON[C.TITLE][C.FONT_SIZE] && (zcJSON[ZCC.CANVAS][ZCC.TITLE][ZCC.FONT_SIZE] = cJSON[C.TITLE][C.FONT_SIZE]);\n    }\n\n    function setTitleFontColor(cJSON, zcJSON) {\n      cJSON[C.SUBTITLE][C.FONT_COLOR] && (zcJSON[ZCC.CANVAS][ZCC.TITLE][ZCC.FONT_COLOR] = cJSON[C.TITLE][C.FONT_COLOR]);\n    }\n\n    function setTitleFontWeight(cJSON, zcJSON) {\n      cJSON[C.TITLE][C.FONT_WEIGHT] && (zcJSON[ZCC.CANVAS][ZCC.TITLE][ZCC.FONT_WEIGHT] = cJSON[C.TITLE][C.FONT_WEIGHT]);\n    }\n\n    function setTitleFontStyle(cJSON, zcJSON) {\n      cJSON[C.TITLE][C.FONT_STYLE] && (zcJSON[ZCC.CANVAS][ZCC.TITLE][ZCC.FONT_STYLE] = cJSON[C.TITLE][C.FONT_STYLE]);\n    }\n\n    function setSubtitleText(cJSON, zcJSON) {\n      cJSON[C.SUBTITLE][C.TEXT] && (zcJSON[ZCC.CANVAS][ZCC.SUBTITLE][ZCC.TEXT] = cJSON[C.SUBTITLE][C.TEXT]);\n    }\n\n    function setSubtitleFontSize(cJSON, zcJSON) {\n      cJSON[C.SUBTITLE][C.FONT_SIZE] && (zcJSON[ZCC.CANVAS][ZCC.SUBTITLE][ZCC.FONT_SIZE] = cJSON[C.SUBTITLE][C.FONT_SIZE]);\n    }\n\n    function setSubtitleFontColor(cJSON, zcJSON) {\n      cJSON[C.SUBTITLE][C.FONT_COLOR] && (zcJSON[ZCC.CANVAS][ZCC.SUBTITLE][ZCC.FONT_COLOR] = cJSON[C.SUBTITLE][C.FONT_COLOR]);\n    }\n\n    function setSubtitleFontWeight(cJSON, zcJSON) {\n      cJSON[C.SUBTITLE][C.FONT_WEIGHT] && (zcJSON[ZCC.CANVAS][ZCC.SUBTITLE][ZCC.FONT_WEIGHT] = cJSON[C.SUBTITLE][C.FONT_WEIGHT]);\n    }\n\n    function setSubtitleFontStyle(cJSON, zcJSON) {\n      cJSON[C.SUBTITLE][C.FONT_STYLE] && (zcJSON[ZCC.CANVAS][ZCC.SUBTITLE][ZCC.FONT_STYLE] = cJSON[C.SUBTITLE][C.FONT_STYLE]);\n    }\n\n    var keyToFunction = {};\n    keyToFunction[ZCKeyList.TITLE_TEXT] = setTitleText;\n    keyToFunction[ZCKeyList.TITLE_FONT_COLOR] = setTitleFontColor;\n    keyToFunction[ZCKeyList.TITLE_FONT_SIZE] = setTitleFontSize;\n    keyToFunction[ZCKeyList.TITLE_FONT_STYLE] = setTitleFontStyle;\n    keyToFunction[ZCKeyList.TITLE_FONT_WEIGHT] = setTitleFontWeight;\n    keyToFunction[ZCKeyList.SUBTITLE_TEXT] = setSubtitleText;\n    keyToFunction[ZCKeyList.SUBTITLE_FONT_COLOR] = setSubtitleFontColor;\n    keyToFunction[ZCKeyList.SUBTITLE_FONT_SIZE] = setSubtitleFontSize;\n    keyToFunction[ZCKeyList.SUBTITLE_FONT_STYLE] = setSubtitleFontStyle;\n    keyToFunction[ZCKeyList.SUBTITLE_FONT_WEIGHT] = setSubtitleFontWeight;\n\n    function getJSON(keyList, chartJSON, hcJSON, type) {\n      var keysLen = keyList ? keyList.length : 0;\n\n      for (var i = 0; i < keysLen; i++) {\n        if (keyToFunction[keyList[i]]) {\n          keyToFunction[keyList[i]](chartJSON, hcJSON, type);\n        }\n      }\n    }\n\n    return {\n      convert: function convert(type, chartType, chartJSON, hcJSON) {\n        var keyList = chartTypeToZCKeys[chartType];\n        return getJSON(keyList, chartJSON, hcJSON, type);\n      }\n    };\n  }();\n\n  ctx.ZCJSONConvertor = ZCJSONConvertor;\n})(window || this);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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SUFqRmIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tdWx0aS1jaGFydC1mcmFtZXdvcmsvLi9qcy9VdGlscy9aQ0pTT05Db252ZXJ0b3IuanM/NWViZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiRJZCQqL1xuXCJ1c2Ugc3RyaWN0XCI7IC8vTm8gSTE4TlxuKGZ1bmN0aW9uIChjdHgpIHtcbiAgICBjb25zdCBDID0gY3R4LkNoYXJ0Q29uc3RhbnRzO1xuICAgIGNvbnN0IEtMID0gY3R4LkNoYXJ0S2V5TGlzdDtcbiAgICBjb25zdCBaQ0tleUxpc3QgPSBjdHguWkNLZXlMaXN0O1xuICAgIGNvbnN0IFpDQyA9IGN0eC5aQ0NvbnN0YW50cztcbiAgICBjb25zdCBjaGFydFR5cGVUb1pDS2V5cyA9IGN0eC5aQ01hcHMuY2hhcnRUeXBlVG9aQ0tleXM7XG5cbiAgICB2YXIgWkNKU09OQ29udmVydG9yID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIGZ1bmN0aW9uIHNldFRpdGxlVGV4dCAoY0pTT04sIHpjSlNPTikge1xuICAgICAgICAgICAgY0pTT05bQy5USVRMRV1bQy5URVhUXSAmJiAoemNKU09OW1pDQy5DQU5WQVNdW1pDQy5USVRMRV1bWkNDLlRFWFRdID0gY0pTT05bQy5USVRMRV1bQy5URVhUXSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBzZXRUaXRsZUZvbnRTaXplIChjSlNPTiwgemNKU09OKSB7XG4gICAgICAgICAgICBjSlNPTltDLlRJVExFXVtDLkZPTlRfU0laRV0gJiYgKHpjSlNPTltaQ0MuQ0FOVkFTXVtaQ0MuVElUTEVdW1pDQy5GT05UX1NJWkVdID0gY0pTT05bQy5USVRMRV1bQy5GT05UX1NJWkVdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHNldFRpdGxlRm9udENvbG9yIChjSlNPTiwgemNKU09OKSB7XG4gICAgICAgICAgICBjSlNPTltDLlNVQlRJVExFXVtDLkZPTlRfQ09MT1JdICYmICh6Y0pTT05bWkNDLkNBTlZBU11bWkNDLlRJVExFXVtaQ0MuRk9OVF9DT0xPUl0gPSBjSlNPTltDLlRJVExFXVtDLkZPTlRfQ09MT1JdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHNldFRpdGxlRm9udFdlaWdodCAoY0pTT04sIHpjSlNPTikge1xuICAgICAgICAgICAgY0pTT05bQy5USVRMRV1bQy5GT05UX1dFSUdIVF0gJiYgKHpjSlNPTltaQ0MuQ0FOVkFTXVtaQ0MuVElUTEVdW1pDQy5GT05UX1dFSUdIVF0gPSBjSlNPTltDLlRJVExFXVtDLkZPTlRfV0VJR0hUXSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBzZXRUaXRsZUZvbnRTdHlsZSAoY0pTT04sIHpjSlNPTikge1xuICAgICAgICAgICAgY0pTT05bQy5USVRMRV1bQy5GT05UX1NUWUxFXSAmJiAoemNKU09OW1pDQy5DQU5WQVNdW1pDQy5USVRMRV1bWkNDLkZPTlRfU1RZTEVdID0gY0pTT05bQy5USVRMRV1bQy5GT05UX1NUWUxFXSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBzZXRTdWJ0aXRsZVRleHQgKGNKU09OLCB6Y0pTT04pIHtcbiAgICAgICAgICAgIGNKU09OW0MuU1VCVElUTEVdW0MuVEVYVF0gJiYgKHpjSlNPTltaQ0MuQ0FOVkFTXVtaQ0MuU1VCVElUTEVdW1pDQy5URVhUXSA9IGNKU09OW0MuU1VCVElUTEVdW0MuVEVYVF0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gc2V0U3VidGl0bGVGb250U2l6ZSAoY0pTT04sIHpjSlNPTikge1xuICAgICAgICAgICAgY0pTT05bQy5TVUJUSVRMRV1bQy5GT05UX1NJWkVdICYmICh6Y0pTT05bWkNDLkNBTlZBU11bWkNDLlNVQlRJVExFXVtaQ0MuRk9OVF9TSVpFXSA9IGNKU09OW0MuU1VCVElUTEVdW0MuRk9OVF9TSVpFXSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBzZXRTdWJ0aXRsZUZvbnRDb2xvciAoY0pTT04sIHpjSlNPTikge1xuICAgICAgICAgICAgY0pTT05bQy5TVUJUSVRMRV1bQy5GT05UX0NPTE9SXSAmJiAoemNKU09OW1pDQy5DQU5WQVNdW1pDQy5TVUJUSVRMRV1bWkNDLkZPTlRfQ09MT1JdID0gY0pTT05bQy5TVUJUSVRMRV1bQy5GT05UX0NPTE9SXSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBzZXRTdWJ0aXRsZUZvbnRXZWlnaHQgKGNKU09OLCB6Y0pTT04pIHtcbiAgICAgICAgICAgIGNKU09OW0MuU1VCVElUTEVdW0MuRk9OVF9XRUlHSFRdICYmICh6Y0pTT05bWkNDLkNBTlZBU11bWkNDLlNVQlRJVExFXVtaQ0MuRk9OVF9XRUlHSFRdID0gY0pTT05bQy5TVUJUSVRMRV1bQy5GT05UX1dFSUdIVF0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gc2V0U3VidGl0bGVGb250U3R5bGUgKGNKU09OLCB6Y0pTT04pIHtcbiAgICAgICAgICAgIGNKU09OW0MuU1VCVElUTEVdW0MuRk9OVF9TVFlMRV0gJiYgKHpjSlNPTltaQ0MuQ0FOVkFTXVtaQ0MuU1VCVElUTEVdW1pDQy5GT05UX1NUWUxFXSA9IGNKU09OW0MuU1VCVElUTEVdW0MuRk9OVF9TVFlMRV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGtleVRvRnVuY3Rpb24gPSB7fTtcbiAgICAgICAga2V5VG9GdW5jdGlvbltaQ0tleUxpc3QuVElUTEVfVEVYVF0gICAgICAgICAgICAgPSAgc2V0VGl0bGVUZXh0O1xuICAgICAgICBrZXlUb0Z1bmN0aW9uW1pDS2V5TGlzdC5USVRMRV9GT05UX0NPTE9SXSAgICAgICA9ICBzZXRUaXRsZUZvbnRDb2xvcjtcbiAgICAgICAga2V5VG9GdW5jdGlvbltaQ0tleUxpc3QuVElUTEVfRk9OVF9TSVpFXSAgICAgICAgPSAgc2V0VGl0bGVGb250U2l6ZTtcbiAgICAgICAga2V5VG9GdW5jdGlvbltaQ0tleUxpc3QuVElUTEVfRk9OVF9TVFlMRV0gICAgICAgPSAgc2V0VGl0bGVGb250U3R5bGU7XG4gICAgICAgIGtleVRvRnVuY3Rpb25bWkNLZXlMaXN0LlRJVExFX0ZPTlRfV0VJR0hUXSAgICAgID0gIHNldFRpdGxlRm9udFdlaWdodDtcblxuICAgICAgICBrZXlUb0Z1bmN0aW9uW1pDS2V5TGlzdC5TVUJUSVRMRV9URVhUXSAgICAgICAgICA9ICBzZXRTdWJ0aXRsZVRleHQ7XG4gICAgICAgIGtleVRvRnVuY3Rpb25bWkNLZXlMaXN0LlNVQlRJVExFX0ZPTlRfQ09MT1JdICAgID0gIHNldFN1YnRpdGxlRm9udENvbG9yO1xuICAgICAgICBrZXlUb0Z1bmN0aW9uW1pDS2V5TGlzdC5TVUJUSVRMRV9GT05UX1NJWkVdICAgICA9ICBzZXRTdWJ0aXRsZUZvbnRTaXplO1xuICAgICAgICBrZXlUb0Z1bmN0aW9uW1pDS2V5TGlzdC5TVUJUSVRMRV9GT05UX1NUWUxFXSAgICA9ICBzZXRTdWJ0aXRsZUZvbnRTdHlsZTtcbiAgICAgICAga2V5VG9GdW5jdGlvbltaQ0tleUxpc3QuU1VCVElUTEVfRk9OVF9XRUlHSFRdICAgPSAgc2V0U3VidGl0bGVGb250V2VpZ2h0O1xuXG4gICAgICAgIGZ1bmN0aW9uIGdldEpTT04gKGtleUxpc3QsIGNoYXJ0SlNPTiwgaGNKU09OLCB0eXBlKSB7XG4gICAgICAgICAgICB2YXIga2V5c0xlbiA9IGtleUxpc3QgPyBrZXlMaXN0Lmxlbmd0aCA6IDA7XG4gICAgICAgICAgICBmb3IodmFyIGk9MDsgaSA8IGtleXNMZW47IGkrKykge1xuICAgICAgICAgICAgICAgIGlmKGtleVRvRnVuY3Rpb25ba2V5TGlzdFtpXV0pIHtcbiAgICAgICAgICAgICAgICAgICAga2V5VG9GdW5jdGlvbltrZXlMaXN0W2ldXShjaGFydEpTT04sIGhjSlNPTiwgdHlwZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNvbnZlcnQgOiBmdW5jdGlvbiAodHlwZSwgY2hhcnRUeXBlLCBjaGFydEpTT04sIGhjSlNPTikge1xuICAgICAgICAgICAgICAgIHZhciBrZXlMaXN0ID0gY2hhcnRUeXBlVG9aQ0tleXNbY2hhcnRUeXBlXTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0SlNPTihrZXlMaXN0LCBjaGFydEpTT04sIGhjSlNPTiwgdHlwZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfSkoKTtcblxuICAgIGN0eC5aQ0pTT05Db252ZXJ0b3IgPSBaQ0pTT05Db252ZXJ0b3I7XG5cbn0pKHdpbmRvdyB8fCB0aGlzKTsiXSwibmFtZXMiOlsiY3R4IiwiQyIsIkNoYXJ0Q29uc3RhbnRzIiwiS0wiLCJDaGFydEtleUxpc3QiLCJaQ0tleUxpc3QiLCJaQ0MiLCJaQ0NvbnN0YW50cyIsImNoYXJ0VHlwZVRvWkNLZXlzIiwiWkNNYXBzIiwiWkNKU09OQ29udmVydG9yIiwic2V0VGl0bGVUZXh0IiwiY0pTT04iLCJ6Y0pTT04iLCJUSVRMRSIsIlRFWFQiLCJDQU5WQVMiLCJzZXRUaXRsZUZvbnRTaXplIiwiRk9OVF9TSVpFIiwic2V0VGl0bGVGb250Q29sb3IiLCJTVUJUSVRMRSIsIkZPTlRfQ09MT1IiLCJzZXRUaXRsZUZvbnRXZWlnaHQiLCJGT05UX1dFSUdIVCIsInNldFRpdGxlRm9udFN0eWxlIiwiRk9OVF9TVFlMRSIsInNldFN1YnRpdGxlVGV4dCIsInNldFN1YnRpdGxlRm9udFNpemUiLCJzZXRTdWJ0aXRsZUZvbnRDb2xvciIsInNldFN1YnRpdGxlRm9udFdlaWdodCIsInNldFN1YnRpdGxlRm9udFN0eWxlIiwia2V5VG9GdW5jdGlvbiIsIlRJVExFX1RFWFQiLCJUSVRMRV9GT05UX0NPTE9SIiwiVElUTEVfRk9OVF9TSVpFIiwiVElUTEVfRk9OVF9TVFlMRSIsIlRJVExFX0ZPTlRfV0VJR0hUIiwiU1VCVElUTEVfVEVYVCIsIlNVQlRJVExFX0ZPTlRfQ09MT1IiLCJTVUJUSVRMRV9GT05UX1NJWkUiLCJTVUJUSVRMRV9GT05UX1NUWUxFIiwiU1VCVElUTEVfRk9OVF9XRUlHSFQiLCJnZXRKU09OIiwia2V5TGlzdCIsImNoYXJ0SlNPTiIsImhjSlNPTiIsInR5cGUiLCJrZXlzTGVuIiwibGVuZ3RoIiwiaSIsImNvbnZlcnQiLCJjaGFydFR5cGUiLCJ3aW5kb3ciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./js/Utils/ZCJSONConvertor.js\n");

/***/ }),

/***/ "./js/Utils/ZCKeyList.js":
/*!*******************************!*\
  !*** ./js/Utils/ZCKeyList.js ***!
  \*******************************/
/***/ (function() {

"use strict";
eval("/*$Id$*/\n //No I18N\n\n(function (ctx) {\n  var ZCKeyList = ctx.ZCKeyList = {};\n  ZCKeyList.CANVAS = \"CANVAS\"; //No I18N\n\n  ZCKeyList.TITLE = \"TITLE\"; //No I18N\n\n  ZCKeyList.TITLE_TEXT = \"TITLE_TEXT\"; //No I18N\n\n  ZCKeyList.TITLE_FONT_COLOR = \"TITLE_FONT_COLOR\"; //No I18N\n\n  ZCKeyList.TITLE_FONT_SIZE = \"TITLE_FONT_SIZE\"; //No I18N\n\n  ZCKeyList.TITLE_FONT_STYLE = \"TITLE_FONT_STYLE\"; //No I18N\n\n  ZCKeyList.TITLE_FONT_WEIGHT = \"TITLE_FONT_WEIGHT\"; //No I18N\n\n  ZCKeyList.SUBTITLE = \"SUBTITLE\"; //No I18N\n\n  ZCKeyList.SUBTITLE_TEXT = \"SUBTITLE_TEXT\"; //No I18N\n\n  ZCKeyList.SUBTITLE_FONT_COLOR = \"SUBTITLE_FONT_COLOR\"; //No I18N\n\n  ZCKeyList.SUBTITLE_FONT_SIZE = \"SUBTITLE_FONT_SIZE\"; //No I18N\n\n  ZCKeyList.SUBTITLE_FONT_STYLE = \"SUBTITLE_FONT_STYLE\"; //No I18N\n\n  ZCKeyList.SUBTITLE_FONT_WEIGHT = \"SUBTITLE_FONT_WEIGHT\"; //No I18N\n})(window || this);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9qcy9VdGlscy9aQ0tleUxpc3QuanMuanMiLCJtYXBwaW5ncyI6IkFBQUE7Q0FDYTs7QUFDYixDQUFDLFVBQVNBLEdBQVQsRUFBYTtBQUNWLE1BQUlDLFNBQVMsR0FBR0QsR0FBRyxDQUFDQyxTQUFKLEdBQWdCLEVBQWhDO0FBRUFBLEVBQUFBLFNBQVMsQ0FBQ0MsTUFBVixHQUFvQyxRQUFwQyxDQUhVLENBR29DOztBQUM5Q0QsRUFBQUEsU0FBUyxDQUFDRSxLQUFWLEdBQW9DLE9BQXBDLENBSlUsQ0FJbUM7O0FBQzdDRixFQUFBQSxTQUFTLENBQUNHLFVBQVYsR0FBb0MsWUFBcEMsQ0FMVSxDQUt3Qzs7QUFDbERILEVBQUFBLFNBQVMsQ0FBQ0ksZ0JBQVYsR0FBb0Msa0JBQXBDLENBTlUsQ0FNOEM7O0FBQ3hESixFQUFBQSxTQUFTLENBQUNLLGVBQVYsR0FBb0MsaUJBQXBDLENBUFUsQ0FPNkM7O0FBQ3ZETCxFQUFBQSxTQUFTLENBQUNNLGdCQUFWLEdBQW9DLGtCQUFwQyxDQVJVLENBUThDOztBQUN4RE4sRUFBQUEsU0FBUyxDQUFDTyxpQkFBVixHQUFvQyxtQkFBcEMsQ0FUVSxDQVMrQzs7QUFDekRQLEVBQUFBLFNBQVMsQ0FBQ1EsUUFBVixHQUFvQyxVQUFwQyxDQVZVLENBVXNDOztBQUNoRFIsRUFBQUEsU0FBUyxDQUFDUyxhQUFWLEdBQW9DLGVBQXBDLENBWFUsQ0FXMkM7O0FBQ3JEVCxFQUFBQSxTQUFTLENBQUNVLG1CQUFWLEdBQW9DLHFCQUFwQyxDQVpVLENBWWlEOztBQUMzRFYsRUFBQUEsU0FBUyxDQUFDVyxrQkFBVixHQUFvQyxvQkFBcEMsQ0FiVSxDQWFnRDs7QUFDMURYLEVBQUFBLFNBQVMsQ0FBQ1ksbUJBQVYsR0FBb0MscUJBQXBDLENBZFUsQ0FjaUQ7O0FBQzNEWixFQUFBQSxTQUFTLENBQUNhLG9CQUFWLEdBQW9DLHNCQUFwQyxDQWZVLENBZWtEO0FBRS9ELENBakJELEVBaUJHQyxNQUFNLElBQUksSUFqQmIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tdWx0aS1jaGFydC1mcmFtZXdvcmsvLi9qcy9VdGlscy9aQ0tleUxpc3QuanM/ZDZmMyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiRJZCQqL1xuXCJ1c2Ugc3RyaWN0XCI7Ly9ObyBJMThOXG4oZnVuY3Rpb24oY3R4KXtcbiAgICB2YXIgWkNLZXlMaXN0ID0gY3R4LlpDS2V5TGlzdCA9IHt9O1xuXG4gICAgWkNLZXlMaXN0LkNBTlZBUyAgICAgICAgICAgICAgICA9ICAgXCJDQU5WQVNcIjsgLy9ObyBJMThOXG4gICAgWkNLZXlMaXN0LlRJVExFICAgICAgICAgICAgICAgICA9ICAgXCJUSVRMRVwiOyAvL05vIEkxOE5cbiAgICBaQ0tleUxpc3QuVElUTEVfVEVYVCAgICAgICAgICAgID0gICBcIlRJVExFX1RFWFRcIjsgLy9ObyBJMThOXG4gICAgWkNLZXlMaXN0LlRJVExFX0ZPTlRfQ09MT1IgICAgICA9ICAgXCJUSVRMRV9GT05UX0NPTE9SXCI7IC8vTm8gSTE4TlxuICAgIFpDS2V5TGlzdC5USVRMRV9GT05UX1NJWkUgICAgICAgPSAgIFwiVElUTEVfRk9OVF9TSVpFXCI7IC8vTm8gSTE4TlxuICAgIFpDS2V5TGlzdC5USVRMRV9GT05UX1NUWUxFICAgICAgPSAgIFwiVElUTEVfRk9OVF9TVFlMRVwiOyAvL05vIEkxOE5cbiAgICBaQ0tleUxpc3QuVElUTEVfRk9OVF9XRUlHSFQgICAgID0gICBcIlRJVExFX0ZPTlRfV0VJR0hUXCI7IC8vTm8gSTE4TlxuICAgIFpDS2V5TGlzdC5TVUJUSVRMRSAgICAgICAgICAgICAgPSAgIFwiU1VCVElUTEVcIjsgLy9ObyBJMThOXG4gICAgWkNLZXlMaXN0LlNVQlRJVExFX1RFWFQgICAgICAgICA9ICAgXCJTVUJUSVRMRV9URVhUXCI7IC8vTm8gSTE4TlxuICAgIFpDS2V5TGlzdC5TVUJUSVRMRV9GT05UX0NPTE9SICAgPSAgIFwiU1VCVElUTEVfRk9OVF9DT0xPUlwiOyAvL05vIEkxOE5cbiAgICBaQ0tleUxpc3QuU1VCVElUTEVfRk9OVF9TSVpFICAgID0gICBcIlNVQlRJVExFX0ZPTlRfU0laRVwiOyAvL05vIEkxOE5cbiAgICBaQ0tleUxpc3QuU1VCVElUTEVfRk9OVF9TVFlMRSAgID0gICBcIlNVQlRJVExFX0ZPTlRfU1RZTEVcIjsgLy9ObyBJMThOXG4gICAgWkNLZXlMaXN0LlNVQlRJVExFX0ZPTlRfV0VJR0hUICA9ICAgXCJTVUJUSVRMRV9GT05UX1dFSUdIVFwiOyAvL05vIEkxOE5cblxufSkod2luZG93IHx8IHRoaXMpOyJdLCJuYW1lcyI6WyJjdHgiLCJaQ0tleUxpc3QiLCJDQU5WQVMiLCJUSVRMRSIsIlRJVExFX1RFWFQiLCJUSVRMRV9GT05UX0NPTE9SIiwiVElUTEVfRk9OVF9TSVpFIiwiVElUTEVfRk9OVF9TVFlMRSIsIlRJVExFX0ZPTlRfV0VJR0hUIiwiU1VCVElUTEUiLCJTVUJUSVRMRV9URVhUIiwiU1VCVElUTEVfRk9OVF9DT0xPUiIsIlNVQlRJVExFX0ZPTlRfU0laRSIsIlNVQlRJVExFX0ZPTlRfU1RZTEUiLCJTVUJUSVRMRV9GT05UX1dFSUdIVCIsIndpbmRvdyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./js/Utils/ZCKeyList.js\n");

/***/ }),

/***/ "./js/Utils/ZCMaps.js":
/*!****************************!*\
  !*** ./js/Utils/ZCMaps.js ***!
  \****************************/
/***/ (function() {

"use strict";
eval("/*$Id$*/\n //No I18N\n\n(function (ctx) {\n  var ChartConstants = ctx.ChartConstants;\n  var ZCConstants = ctx.ZCConstants;\n  var ZCKL = ctx.ZCKeyList;\n  var ZCMaps = ctx.ZCMaps = {};\n  /* Chart Type to Applicable Highcharts JSON Keys Map */\n\n  var chartTypeToZCKeys = ZCMaps.chartTypeToZCKeys = {};\n  chartTypeToZCKeys[ChartConstants.WORDCLOUD] = [ZCKL.CANVAS, ZCKL.TITLE, ZCKL.TITLE_TEXT, ZCKL.TITLE_FONT_COLOR, ZCKL.TITLE_FONT_SIZE, ZCKL.TITLE_FONT_STYLE, ZCKL.TITLE_FONT_WEIGHT, ZCKL.SUBTITLE, ZCKL.SUBTITLE_TEXT, ZCKL.SUBTITLE_FONT_COLOR, ZCKL.SUBTITLE_FONT_SIZE, ZCKL.SUBTITLE_FONT_STYLE, ZCKL.SUBTITLE_FONT_WEIGHT];\n  chartTypeToZCKeys[ChartConstants.RACEBAR] = [ZCKL.CANVAS, ZCKL.TITLE, ZCKL.TITLE_TEXT, ZCKL.TITLE_FONT_COLOR, ZCKL.TITLE_FONT_SIZE, ZCKL.TITLE_FONT_STYLE, ZCKL.TITLE_FONT_WEIGHT, ZCKL.SUBTITLE, ZCKL.SUBTITLE_TEXT, ZCKL.SUBTITLE_FONT_COLOR, ZCKL.SUBTITLE_FONT_SIZE, ZCKL.SUBTITLE_FONT_STYLE, ZCKL.SUBTITLE_FONT_WEIGHT];\n  /* Map Chart type to Highcharts chart type */\n\n  var chartTypeToZCType = ZCMaps.chartTypeToZCType = {};\n  chartTypeToZCType[ChartConstants.WORDCLOUD] = ZCConstants.WORDCLOUD;\n  chartTypeToZCType[ChartConstants.RACEBAR] = ZCConstants.RACEBAR;\n})(window || this);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9qcy9VdGlscy9aQ01hcHMuanMuanMiLCJtYXBwaW5ncyI6IkFBQUE7Q0FDYzs7QUFDZCxDQUFDLFVBQVNBLEdBQVQsRUFBYTtBQUNWLE1BQUlDLGNBQWMsR0FBR0QsR0FBRyxDQUFDQyxjQUF6QjtBQUNBLE1BQUlDLFdBQVcsR0FBR0YsR0FBRyxDQUFDRSxXQUF0QjtBQUNBLE1BQUlDLElBQUksR0FBR0gsR0FBRyxDQUFDSSxTQUFmO0FBQ0EsTUFBSUMsTUFBTSxHQUFHTCxHQUFHLENBQUNLLE1BQUosR0FBYSxFQUExQjtBQUVBOztBQUNBLE1BQUlDLGlCQUFpQixHQUFHRCxNQUFNLENBQUNDLGlCQUFQLEdBQTJCLEVBQW5EO0FBQ0FBLEVBQUFBLGlCQUFpQixDQUFDTCxjQUFjLENBQUNNLFNBQWhCLENBQWpCLEdBQW9ELENBQUNKLElBQUksQ0FBQ0ssTUFBTixFQUFjTCxJQUFJLENBQUNNLEtBQW5CLEVBQTBCTixJQUFJLENBQUNPLFVBQS9CLEVBQTJDUCxJQUFJLENBQUNRLGdCQUFoRCxFQUFrRVIsSUFBSSxDQUFDUyxlQUF2RSxFQUF3RlQsSUFBSSxDQUFDVSxnQkFBN0YsRUFBK0dWLElBQUksQ0FBQ1csaUJBQXBILEVBQXVJWCxJQUFJLENBQUNZLFFBQTVJLEVBQXNKWixJQUFJLENBQUNhLGFBQTNKLEVBQTBLYixJQUFJLENBQUNjLG1CQUEvSyxFQUFvTWQsSUFBSSxDQUFDZSxrQkFBek0sRUFBNk5mLElBQUksQ0FBQ2dCLG1CQUFsTyxFQUF1UGhCLElBQUksQ0FBQ2lCLG9CQUE1UCxDQUFwRDtBQUNBZCxFQUFBQSxpQkFBaUIsQ0FBQ0wsY0FBYyxDQUFDb0IsT0FBaEIsQ0FBakIsR0FBb0QsQ0FBQ2xCLElBQUksQ0FBQ0ssTUFBTixFQUFjTCxJQUFJLENBQUNNLEtBQW5CLEVBQTBCTixJQUFJLENBQUNPLFVBQS9CLEVBQTJDUCxJQUFJLENBQUNRLGdCQUFoRCxFQUFrRVIsSUFBSSxDQUFDUyxlQUF2RSxFQUF3RlQsSUFBSSxDQUFDVSxnQkFBN0YsRUFBK0dWLElBQUksQ0FBQ1csaUJBQXBILEVBQXVJWCxJQUFJLENBQUNZLFFBQTVJLEVBQXNKWixJQUFJLENBQUNhLGFBQTNKLEVBQTBLYixJQUFJLENBQUNjLG1CQUEvSyxFQUFvTWQsSUFBSSxDQUFDZSxrQkFBek0sRUFBNk5mLElBQUksQ0FBQ2dCLG1CQUFsTyxFQUF1UGhCLElBQUksQ0FBQ2lCLG9CQUE1UCxDQUFwRDtBQUVBOztBQUNBLE1BQUlFLGlCQUFpQixHQUFHakIsTUFBTSxDQUFDaUIsaUJBQVAsR0FBMkIsRUFBbkQ7QUFDQUEsRUFBQUEsaUJBQWlCLENBQUNyQixjQUFjLENBQUNNLFNBQWhCLENBQWpCLEdBQWdETCxXQUFXLENBQUNLLFNBQTVEO0FBQ0FlLEVBQUFBLGlCQUFpQixDQUFDckIsY0FBYyxDQUFDb0IsT0FBaEIsQ0FBakIsR0FBZ0RuQixXQUFXLENBQUNtQixPQUE1RDtBQUVILENBaEJELEVBZ0JHRSxNQUFNLElBQUksSUFoQmIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tdWx0aS1jaGFydC1mcmFtZXdvcmsvLi9qcy9VdGlscy9aQ01hcHMuanM/YmVlMCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiRJZCQqL1xuXCJ1c2Ugc3RyaWN0XCI7IC8vTm8gSTE4TlxuKGZ1bmN0aW9uKGN0eCl7XG4gICAgdmFyIENoYXJ0Q29uc3RhbnRzID0gY3R4LkNoYXJ0Q29uc3RhbnRzO1xuICAgIHZhciBaQ0NvbnN0YW50cyA9IGN0eC5aQ0NvbnN0YW50cztcbiAgICB2YXIgWkNLTCA9IGN0eC5aQ0tleUxpc3Q7XG4gICAgdmFyIFpDTWFwcyA9IGN0eC5aQ01hcHMgPSB7fTtcblxuICAgIC8qIENoYXJ0IFR5cGUgdG8gQXBwbGljYWJsZSBIaWdoY2hhcnRzIEpTT04gS2V5cyBNYXAgKi9cbiAgICB2YXIgY2hhcnRUeXBlVG9aQ0tleXMgPSBaQ01hcHMuY2hhcnRUeXBlVG9aQ0tleXMgPSB7fTtcbiAgICBjaGFydFR5cGVUb1pDS2V5c1tDaGFydENvbnN0YW50cy5XT1JEQ0xPVURdICAgICA9ICAgW1pDS0wuQ0FOVkFTLCBaQ0tMLlRJVExFLCBaQ0tMLlRJVExFX1RFWFQsIFpDS0wuVElUTEVfRk9OVF9DT0xPUiwgWkNLTC5USVRMRV9GT05UX1NJWkUsIFpDS0wuVElUTEVfRk9OVF9TVFlMRSwgWkNLTC5USVRMRV9GT05UX1dFSUdIVCwgWkNLTC5TVUJUSVRMRSwgWkNLTC5TVUJUSVRMRV9URVhULCBaQ0tMLlNVQlRJVExFX0ZPTlRfQ09MT1IsIFpDS0wuU1VCVElUTEVfRk9OVF9TSVpFLCBaQ0tMLlNVQlRJVExFX0ZPTlRfU1RZTEUsIFpDS0wuU1VCVElUTEVfRk9OVF9XRUlHSFRdO1xuICAgIGNoYXJ0VHlwZVRvWkNLZXlzW0NoYXJ0Q29uc3RhbnRzLlJBQ0VCQVJdICAgICAgID0gICBbWkNLTC5DQU5WQVMsIFpDS0wuVElUTEUsIFpDS0wuVElUTEVfVEVYVCwgWkNLTC5USVRMRV9GT05UX0NPTE9SLCBaQ0tMLlRJVExFX0ZPTlRfU0laRSwgWkNLTC5USVRMRV9GT05UX1NUWUxFLCBaQ0tMLlRJVExFX0ZPTlRfV0VJR0hULCBaQ0tMLlNVQlRJVExFLCBaQ0tMLlNVQlRJVExFX1RFWFQsIFpDS0wuU1VCVElUTEVfRk9OVF9DT0xPUiwgWkNLTC5TVUJUSVRMRV9GT05UX1NJWkUsIFpDS0wuU1VCVElUTEVfRk9OVF9TVFlMRSwgWkNLTC5TVUJUSVRMRV9GT05UX1dFSUdIVF07XG5cbiAgICAvKiBNYXAgQ2hhcnQgdHlwZSB0byBIaWdoY2hhcnRzIGNoYXJ0IHR5cGUgKi9cbiAgICB2YXIgY2hhcnRUeXBlVG9aQ1R5cGUgPSBaQ01hcHMuY2hhcnRUeXBlVG9aQ1R5cGUgPSB7fTtcbiAgICBjaGFydFR5cGVUb1pDVHlwZVtDaGFydENvbnN0YW50cy5XT1JEQ0xPVURdICAgPSBaQ0NvbnN0YW50cy5XT1JEQ0xPVUQ7XG4gICAgY2hhcnRUeXBlVG9aQ1R5cGVbQ2hhcnRDb25zdGFudHMuUkFDRUJBUl0gICAgID0gWkNDb25zdGFudHMuUkFDRUJBUjtcbiAgICBcbn0pKHdpbmRvdyB8fCB0aGlzKSJdLCJuYW1lcyI6WyJjdHgiLCJDaGFydENvbnN0YW50cyIsIlpDQ29uc3RhbnRzIiwiWkNLTCIsIlpDS2V5TGlzdCIsIlpDTWFwcyIsImNoYXJ0VHlwZVRvWkNLZXlzIiwiV09SRENMT1VEIiwiQ0FOVkFTIiwiVElUTEUiLCJUSVRMRV9URVhUIiwiVElUTEVfRk9OVF9DT0xPUiIsIlRJVExFX0ZPTlRfU0laRSIsIlRJVExFX0ZPTlRfU1RZTEUiLCJUSVRMRV9GT05UX1dFSUdIVCIsIlNVQlRJVExFIiwiU1VCVElUTEVfVEVYVCIsIlNVQlRJVExFX0ZPTlRfQ09MT1IiLCJTVUJUSVRMRV9GT05UX1NJWkUiLCJTVUJUSVRMRV9GT05UX1NUWUxFIiwiU1VCVElUTEVfRk9OVF9XRUlHSFQiLCJSQUNFQkFSIiwiY2hhcnRUeXBlVG9aQ1R5cGUiLCJ3aW5kb3ciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./js/Utils/ZCMaps.js\n");

/***/ }),

/***/ "./js/Utils/ZCRaceBarSeriesConstructor.js":
/*!************************************************!*\
  !*** ./js/Utils/ZCRaceBarSeriesConstructor.js ***!
  \************************************************/
/***/ (function() {

"use strict";
eval("/*$Id$*/\n //No I18N\n\n(function (ctx) {\n  var ZCConstants = ctx.ZCConstants;\n  var ZCKeyList = ctx.ZCKeyList;\n  var ZCArraySkeletonConstructor = ctx.ZCArraySkeletonConstructor;\n\n  var ZCRaceBarSeriesConstructor = function () {\n    var raceChartData = {};\n\n    function updateSeries(rcData, zohochartsJSON, zohochartsInstance, type) {\n      zohochartsJSON = zohochartsInstance.userdata;\n      var dataMeta = rcData.dataMeta;\n      var indexToDraw = rcData.currentIndex; // console.log(indexToDraw);\n\n      var maxIndex = rcData.totalSeriesIndicesToBePlotted - 1;\n\n      if (indexToDraw >= maxIndex) {\n        rcData.currentIndex = 0;\n      } else {\n        rcData.currentIndex++;\n      }\n\n      var isConstructed = dataMeta[ChartConstants.IS_CONSTRUCTED];\n\n      if (!isConstructed) {\n        var data = dataMeta[ChartConstants.DATA];\n        var parseDirection = dataMeta[ChartConstants.PARSE_DIRECTION];\n        var hasHeaderCol = dataMeta[ChartConstants.HAS_HEADER_COL];\n        var hasHeaderRow = dataMeta[ChartConstants.HAS_HEADER_ROW];\n        var headerColumnValues = [];\n        var headerRowValues = [];\n        var headerColIndex = hasHeaderCol ? dataMeta[ChartConstants.COL_HEADER_INDEX] || 0 : -1;\n        var headerRowIndex = hasHeaderRow ? dataMeta[ChartConstants.ROW_HEADER_INDEX] || 0 : -1; //Construction\n\n        if (hasHeaderCol) {\n          if (dataMeta[ChartConstants.HEADER_COL_TYPE] == ChartConstants.STRING || dataMeta[ChartConstants.HEADER_COL_TYPE] == ChartConstants.DATE) {\n            for (var i = 0; i < data.length; i++) {\n              headerColumnValues.push(data[i][headerColIndex]);\n            }\n          } else if (dataMeta[ChartConstants.HEADER_COL_TYPE] == ChartConstants.INTEGER) {\n            for (var i = 0; i < data.length; i++) {\n              headerColumnValues.push(data[i][headerColIndex].toString());\n            }\n          }\n        } else {\n          for (var i = 0; i < data.length; i++) {\n            headerColumnValues.push(null);\n          }\n        }\n\n        if (hasHeaderRow) {\n          if (dataMeta[ChartConstants.HEADER_ROW_TYPE] == ChartConstants.STRING || dataMeta[ChartConstants.HEADER_ROW_TYPE] == ChartConstants.DATE) {\n            for (var i = 0; i < data[headerRowIndex].length; i++) {\n              headerRowValues.push(data[headerRowIndex][i]);\n            }\n          } else if (dataMeta[ChartConstants.HEADER_ROW_TYPE] == ChartConstants.INTEGER) {\n            for (var i = 0; i < data[headerRowIndex].length; i++) {\n              headerRowValues.push(data[headerRowIndex][i].toString());\n            }\n          }\n        } else {\n          for (var i = 0; i < data[0].length; i++) {\n            headerRowValues.push(null);\n          }\n        }\n\n        var colCount = headerRowValues.length; // The number of elements in header row actually gives the column count\n\n        var rowCount = headerColumnValues.length; // The number of elements in header column actually gives the row count\n        //Render only last series\n\n        if (parseDirection.indexOf(ChartConstants.PARSE_DIRECTION_VERTICAL) != -1) {\n          var seriesIndices = dataMeta[ChartConstants.SERIES_INFO][ChartConstants.SERIES_INDICES];\n          zohochartsJSON.seriesdata = {};\n          zohochartsJSON.seriesdata.chartdata = [];\n\n          if (dataMeta[ChartConstants.SERIES_INFO] != null && seriesIndices != null) {\n            var seriesIndicesLen = seriesIndices.length;\n            var idx = indexToDraw;\n            var colIndex = seriesIndices[indexToDraw]; //var idx = seriesIndicesLen-1;\n            //const colIndex = seriesIndices[seriesIndicesLen-1];  \n\n            if (seriesIndices[0] != headerColIndex) {\n              zohochartsJSON.seriesdata.chartdata[0] = {};\n              zohochartsJSON.seriesdata.chartdata[0].type = type;\n              zohochartsJSON.seriesdata.chartdata[0].data = [];\n              zohochartsJSON.seriesdata.chartdata[0].data[0] = [];\n              zohochartsJSON.seriesdata.chartdata[0].seriesname = headerRowValues[colIndex];\n\n              for (var j = 0, jIndex = 0; j < rowCount; j++) {\n                if (j != headerRowIndex) {\n                  zohochartsJSON.seriesdata.chartdata[0].data[0][jIndex] = [];\n                  zohochartsJSON.seriesdata.chartdata[0].data[0][jIndex][0] = headerColumnValues[j];\n                  zohochartsJSON.seriesdata.chartdata[0].data[0][jIndex][1] = Number(data[j][idx]);\n                  jIndex++;\n                }\n              }\n            } //sort\n\n\n            zohochartsJSON.seriesdata.chartdata[0].data[0] = zohochartsJSON.seriesdata.chartdata[0].data[0].sort(function (a, b) {\n              return a[1] - b[1];\n            }); //Set Axes Types\n\n            zohochartsJSON.metadata = {};\n            zohochartsJSON.metadata.axes = {};\n            zohochartsJSON.metadata.axes.x = [0];\n            zohochartsJSON.metadata.axes.y = [[1]];\n            zohochartsJSON.metadata.axes.tooltip = [0, 1]; //Columns Types\n\n            zohochartsJSON.metadata.columns = [];\n            zohochartsJSON.metadata.columns[0] = {};\n            zohochartsJSON.metadata.columns[0].dataindex = 0;\n            zohochartsJSON.metadata.columns[0].datatype = \"ordinal\";\n\n            if (zohochartsJSON.horizontal_axis && zohochartsJSON.horizontal_axis.title && zohochartsJSON.horizontal_axis.title.text) {\n              zohochartsJSON.metadata.columns[0].columnname = zohochartsJSON.horizontal_axis.title.text;\n            }\n\n            zohochartsJSON.metadata.columns[1] = {};\n            zohochartsJSON.metadata.columns[1].dataindex = 1;\n            zohochartsJSON.metadata.columns[1].datatype = \"numeric\";\n\n            if (zohochartsJSON.vertical_axis && zohochartsJSON.vertical_axis.title && zohochartsJSON.vertical_axis.title.text) {\n              zohochartsJSON.metadata.columns[1].columnname = zohochartsJSON.vertical_axis.title.text;\n            } //Reverse for bar\n\n\n            zohochartsJSON.chart || (zohochartsJSON.chart = {});\n            zohochartsJSON.chart.axes || (zohochartsJSON.chart.axes = {});\n            zohochartsJSON.chart.axes.rotated = true;\n            zohochartsInstance.redraw();\n          }\n        } else {\n          zohochartsJSON.series = [];\n          var _seriesIndices = dataMeta[ChartConstants.SERIES_INFO][ChartConstants.SERIES_INDICES];\n\n          if (dataMeta[ChartConstants.SERIES_INFO] != null && _seriesIndices != null) {\n            var _seriesIndicesLen = _seriesIndices.length;\n\n            for (var idx = 0; idx < _seriesIndicesLen; idx++) {\n              var rowIndex = _seriesIndices[idx];\n\n              if (rowIndex != headerRowIndex) {\n                zohochartsJSON.series[idx] = {};\n                zohochartsJSON.series[idx].data = [];\n                zohochartsJSON.series[idx].name = headerColumnValues[rowIndex];\n\n                for (var j = 0; j < colCount; j++) {\n                  if (j != headerColIndex) {\n                    zohochartsJSON.series[idx].data.push({\n                      y: Number(data[rowIndex][j])\n                    });\n                  }\n                }\n              }\n            } //Set Categories\n\n\n            if (zohochartsJSON.xAxis[0] == null) {\n              zohochartsJSON.xAxis[0] = HCArraySkeletonConstructor.get(HCKeyList.HAXIS);\n            } //Remove the header row value\n\n\n            zohochartsJSON.xAxis[0].categories = headerRowValues;\n\n            if (headerColIndex != -1) {\n              zohochartsJSON.xAxis[0].categories.splice(headerColIndex, 1);\n            }\n          }\n        }\n      } else {\n        zohochartsJSON.series = dataMeta[ChartConstants.SERIES_DATA];\n\n        if (zohochartsJSON.xAxis[0] == null) {\n          zohochartsJSON.xAxis[0] = HCArraySkeletonConstructor.get(HCKeyList.HAXIS);\n        }\n\n        zohochartsJSON.xAxis[0].categories = dataMeta[ChartConstants.CATEGORIES];\n      }\n    }\n\n    function constructSeries(dataMeta, chartMeta, zohochartsJSON, type) {\n      zohochartsJSON.chart || (zohochartsJSON.chart = {});\n      zohochartsJSON.chart.plot || (zohochartsJSON.chart.plot = {});\n      zohochartsJSON.chart.plot.plotoptions || (zohochartsJSON.chart.plot.plotoptions = {});\n      zohochartsJSON.chart.plot.plotoptions.bar || (zohochartsJSON.chart.plot.plotoptions.bar = {});\n      zohochartsJSON.chart.plot.plotoptions.bar.multiColoring = true;\n      zohochartsJSON.chart.plot.plotoptions.bar.animation || (zohochartsJSON.chart.plot.plotoptions.bar.animation = {});\n      zohochartsJSON.chart.plot.plotoptions.bar.animation.duration = 250;\n      zohochartsJSON.chart.plot.plotoptions.bar.datalabels || (zohochartsJSON.chart.plot.plotoptions.bar.datalabels = {});\n      zohochartsJSON.chart.plot.plotoptions.bar.datalabels.animation = true;\n      zohochartsJSON.chart.plot.plotoptions.bar.datalabels.show = true;\n      zohochartsJSON.chart.plot.plotoptions.bar.datalabels.showAs = [// \"<tspan style='font-weight:bold;'>{{val(0)}}</tspan>\",\n      \"{{val(1)}}\" //No I18N\n      ];\n      zohochartsJSON.chart.plot.datalabels || (zohochartsJSON.chart.plot.datalabels = {});\n      zohochartsJSON.chart.plot.datalabels.animation = true;\n      zohochartsJSON.chart.plot.datalabels.show = true;\n      zohochartsJSON.axes || (zohochartsJSON.axes = {});\n      zohochartsJSON.axes.animation || (zohochartsJSON.axes.animation = {});\n      zohochartsJSON.axes.animation.duration = 250;\n      zohochartsJSON.axes.rotated = true;\n      zohochartsJSON.axes.yaxis || (zohochartsJSON.axes.yaxis = {});\n      zohochartsJSON.axes.yaxis.orient = \"top\"; //No I18N\n      //     \"axes\": {\n      //         \"animation\": {\n      //             \"duration\": 250\n      //         },\n      //         \"rotated\": true,\n      //         \"yaxis\": [\n      //             {\n      //                 \"orient\": \"top\",\n      //                 \"maxRanges\": 40000,\n      //                 \"label\": {\n      //                     \"show\": false,\n      //                     \"text\": \"Total cases\"\n      //                 },\n      //                 \"ticklabel\": {\n      //                     \"events\": {\n      //                         \"cursor\": \"default\"\n      //                     }\n      //                 },\n      //                 \"reversed\": false,\n      //                 \"grid\": {}\n      //             }\n      //         ]\n      //     }\n      // },\n\n      var isConstructed = dataMeta[ChartConstants.IS_CONSTRUCTED];\n\n      if (!isConstructed) {\n        var data = dataMeta[ChartConstants.DATA];\n        var parseDirection = dataMeta[ChartConstants.PARSE_DIRECTION];\n        var hasHeaderCol = dataMeta[ChartConstants.HAS_HEADER_COL];\n        var hasHeaderRow = dataMeta[ChartConstants.HAS_HEADER_ROW];\n        var headerColumnValues = [];\n        var headerRowValues = [];\n        var headerColIndex = hasHeaderCol ? dataMeta[ChartConstants.COL_HEADER_INDEX] || 0 : -1;\n        var headerRowIndex = hasHeaderRow ? dataMeta[ChartConstants.ROW_HEADER_INDEX] || 0 : -1; //Construction\n\n        if (hasHeaderCol) {\n          if (dataMeta[ChartConstants.HEADER_COL_TYPE] == ChartConstants.STRING || dataMeta[ChartConstants.HEADER_COL_TYPE] == ChartConstants.DATE) {\n            for (var i = 0; i < data.length; i++) {\n              headerColumnValues.push(data[i][headerColIndex]);\n            }\n          } else if (dataMeta[ChartConstants.HEADER_COL_TYPE] == ChartConstants.INTEGER) {\n            for (var i = 0; i < data.length; i++) {\n              headerColumnValues.push(data[i][headerColIndex].toString());\n            }\n          }\n        } else {\n          for (var i = 0; i < data.length; i++) {\n            headerColumnValues.push(null);\n          }\n        }\n\n        if (hasHeaderRow) {\n          if (dataMeta[ChartConstants.HEADER_ROW_TYPE] == ChartConstants.STRING || dataMeta[ChartConstants.HEADER_ROW_TYPE] == ChartConstants.DATE) {\n            for (var i = 0; i < data[headerRowIndex].length; i++) {\n              headerRowValues.push(data[headerRowIndex][i]);\n            }\n          } else if (dataMeta[ChartConstants.HEADER_ROW_TYPE] == ChartConstants.INTEGER) {\n            for (var i = 0; i < data[headerRowIndex].length; i++) {\n              headerRowValues.push(data[headerRowIndex][i].toString());\n            }\n          }\n        } else {\n          for (var i = 0; i < data[0].length; i++) {\n            headerRowValues.push(null);\n          }\n        }\n\n        var colCount = headerRowValues.length; // The number of elements in header row actually gives the column count\n\n        var rowCount = headerColumnValues.length; // The number of elements in header column actually gives the row count\n        //Render only last series\n\n        if (parseDirection.indexOf(ChartConstants.PARSE_DIRECTION_VERTICAL) != -1) {\n          var seriesIndices = dataMeta[ChartConstants.SERIES_INFO][ChartConstants.SERIES_INDICES];\n          zohochartsJSON.seriesdata = {};\n          zohochartsJSON.seriesdata.chartdata = []; //Populate the map\n\n          var chartId = chartMeta.chart.renderId;\n          raceChartData[chartId] = {};\n          raceChartData[chartId].dataMeta = dataMeta;\n          raceChartData[chartId].currentIndex = 0;\n          raceChartData[chartId].animating = false;\n          raceChartData[chartId].totalSeriesIndicesToBePlotted = seriesIndices.length;\n          raceChartData[chartId].timer = undefined;\n\n          if (dataMeta[ChartConstants.SERIES_INFO] != null && seriesIndices != null) {\n            var seriesIndicesLen = seriesIndices.length;\n            var idx = seriesIndicesLen - 1;\n            var colIndex = seriesIndices[seriesIndicesLen - 1];\n\n            if (seriesIndices[0] != headerColIndex) {\n              zohochartsJSON.seriesdata.chartdata[0] = {};\n              zohochartsJSON.seriesdata.chartdata[0].type = type;\n              zohochartsJSON.seriesdata.chartdata[0].data = [];\n              zohochartsJSON.seriesdata.chartdata[0].data[0] = [];\n              zohochartsJSON.seriesdata.chartdata[0].seriesname = headerRowValues[colIndex];\n\n              for (var j = 0, jIndex = 0; j < rowCount; j++) {\n                if (j != headerRowIndex) {\n                  zohochartsJSON.seriesdata.chartdata[0].data[0][jIndex] = [];\n                  zohochartsJSON.seriesdata.chartdata[0].data[0][jIndex][0] = headerColumnValues[j];\n                  zohochartsJSON.seriesdata.chartdata[0].data[0][jIndex][1] = Number(data[j][idx]);\n                  jIndex++;\n                }\n              }\n            } //sort\n\n\n            zohochartsJSON.seriesdata.chartdata[0].data[0] = zohochartsJSON.seriesdata.chartdata[0].data[0].sort(function (a, b) {\n              return a[1] - b[1];\n            }); //Set Axes Types\n\n            zohochartsJSON.metadata = {};\n            zohochartsJSON.metadata.axes = {};\n            zohochartsJSON.metadata.axes.x = [0];\n            zohochartsJSON.metadata.axes.y = [[1]];\n            zohochartsJSON.metadata.axes.tooltip = [0, 1]; //Columns Types\n\n            zohochartsJSON.metadata.columns = [];\n            zohochartsJSON.metadata.columns[0] = {};\n            zohochartsJSON.metadata.columns[0].dataindex = 0;\n            zohochartsJSON.metadata.columns[0].datatype = \"ordinal\";\n\n            if (zohochartsJSON.horizontal_axis && zohochartsJSON.horizontal_axis.title && zohochartsJSON.horizontal_axis.title.text) {\n              zohochartsJSON.metadata.columns[0].columnname = zohochartsJSON.horizontal_axis.title.text;\n            }\n\n            zohochartsJSON.metadata.columns[1] = {};\n            zohochartsJSON.metadata.columns[1].dataindex = 1;\n            zohochartsJSON.metadata.columns[1].datatype = \"numeric\";\n\n            if (zohochartsJSON.vertical_axis && zohochartsJSON.vertical_axis.title && zohochartsJSON.vertical_axis.title.text) {\n              zohochartsJSON.metadata.columns[1].columnname = zohochartsJSON.vertical_axis.title.text;\n            } //Reverse for bar\n\n\n            zohochartsJSON.chart || (zohochartsJSON.chart = {});\n            zohochartsJSON.chart.axes || (zohochartsJSON.chart.axes = {});\n            zohochartsJSON.chart.axes.rotated = true;\n          }\n        } else {\n          zohochartsJSON.series = [];\n          var _seriesIndices2 = dataMeta[ChartConstants.SERIES_INFO][ChartConstants.SERIES_INDICES];\n\n          if (dataMeta[ChartConstants.SERIES_INFO] != null && _seriesIndices2 != null) {\n            var _seriesIndicesLen2 = _seriesIndices2.length;\n\n            for (var idx = 0; idx < _seriesIndicesLen2; idx++) {\n              var rowIndex = _seriesIndices2[idx];\n\n              if (rowIndex != headerRowIndex) {\n                zohochartsJSON.series[idx] = {};\n                zohochartsJSON.series[idx].data = [];\n                zohochartsJSON.series[idx].name = headerColumnValues[rowIndex];\n\n                for (var j = 0; j < colCount; j++) {\n                  if (j != headerColIndex) {\n                    zohochartsJSON.series[idx].data.push({\n                      y: Number(data[rowIndex][j])\n                    });\n                  }\n                }\n              }\n            } //Set Categories\n\n\n            if (zohochartsJSON.xAxis[0] == null) {\n              zohochartsJSON.xAxis[0] = HCArraySkeletonConstructor.get(HCKeyList.HAXIS);\n            } //Remove the header row value\n\n\n            zohochartsJSON.xAxis[0].categories = headerRowValues;\n\n            if (headerColIndex != -1) {\n              zohochartsJSON.xAxis[0].categories.splice(headerColIndex, 1);\n            }\n          }\n        }\n      } else {\n        zohochartsJSON.series = dataMeta[ChartConstants.SERIES_DATA];\n\n        if (zohochartsJSON.xAxis[0] == null) {\n          zohochartsJSON.xAxis[0] = HCArraySkeletonConstructor.get(HCKeyList.HAXIS);\n        }\n\n        zohochartsJSON.xAxis[0].categories = dataMeta[ChartConstants.CATEGORIES];\n      }\n    }\n\n    return {\n      construct: function construct(dataMeta, chartMeta, zohochartsJSON, type) {\n        return constructSeries(dataMeta, chartMeta, zohochartsJSON, type);\n      },\n      raceChartData: raceChartData,\n      updateSeries: updateSeries\n    };\n  }();\n\n  ctx.ZCRaceBarSeriesConstructor = ZCRaceBarSeriesConstructor;\n})(window || this);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/Utils/ZCRaceBarSeriesConstructor.js\n");

/***/ }),

/***/ "./js/Utils/ZCSeriesConstructor.js":
/*!*****************************************!*\
  !*** ./js/Utils/ZCSeriesConstructor.js ***!
  \*****************************************/
/***/ (function() {

"use strict";
eval("/*$Id$*/\n //No I18N\n\n(function (ctx) {\n  var C = ctx.ChartConstants;\n  var ZCConstants = ctx.ZCConstants;\n  var ZCKeyList = ctx.ZCKeyList;\n  var ZCArraySkeletonConstructor = ctx.ZCArraySkeletonConstructor;\n  var ZCRaceBarSeriesConstructor = ctx.ZCRaceBarSeriesConstructor;\n  var chartTypeToZCType = ctx.ZCMaps.chartTypeToZCType;\n\n  var ZCSeriesConstructor = function () {\n    function getSeriesColor(chartMeta, index) {\n      return chartMeta[C.CHART][C.COLORS][index % chartMeta[C.CHART][C.COLORS].length];\n    }\n\n    function constructWordCloudSeries(dataMeta, chartMeta, zohochartsJSON) {\n      var isConstructed = dataMeta[ChartConstants.IS_CONSTRUCTED];\n\n      if (!isConstructed) {\n        var data = dataMeta[ChartConstants.DATA]; //Just Count the words\n\n        var uniqueWordsCount = {};\n        var colCount = data ? data.length : 0;\n        var rowCount = data[0] ? data[0].length : 0;\n\n        for (var i = 0; i < rowCount; i++) {\n          for (var j = 0; j < colCount; j++) {\n            if (uniqueWordsCount[data[i][j]] == undefined) {\n              uniqueWordsCount[data[i][j]] = 0;\n            }\n\n            uniqueWordsCount[data[i][j]]++;\n          }\n        } //Constuct Series Data\n\n\n        zohochartsJSON[ZCConstants.SERIES_DATA] = {};\n        zohochartsJSON[ZCConstants.SERIES_DATA][ZCConstants.TYPE] = chartTypeToZCType[chartMeta[C.CHART][C.TYPE]];\n        zohochartsJSON[ZCConstants.SERIES_DATA][ZCConstants.CHART_DATA] = [];\n        var wordsList = Object.keys(uniqueWordsCount);\n        var wordsListLength = wordsList ? wordsList.length : 0;\n\n        for (var i = 0; i < wordsListLength; i++) {\n          var entry = {};\n          entry[ZCConstants.DATA] = [[[wordsList[i], uniqueWordsCount[wordsList[i]]]]];\n          entry[ZCConstants.COLOR] = getSeriesColor(chartMeta, i);\n          zohochartsJSON[ZCConstants.SERIES_DATA][ZCConstants.CHART_DATA].push(entry);\n        } //Construct Meta Data\n\n\n        zohochartsJSON[ZCConstants.META_DATA] = {};\n        zohochartsJSON[ZCConstants.META_DATA][ZCConstants.AXES] = {};\n        zohochartsJSON[ZCConstants.META_DATA][ZCConstants.AXES][ZCConstants.X] = [0];\n        zohochartsJSON[ZCConstants.META_DATA][ZCConstants.AXES][ZCConstants.Y] = [[1]];\n        zohochartsJSON[ZCConstants.META_DATA][ZCConstants.COLUMNS] = [];\n        var itemEntry = {};\n        itemEntry[ZCConstants.DATA_INDEX] = 0;\n        itemEntry[ZCConstants.COLUMN_NAME] = \"Item\";\n        itemEntry[ZCConstants.DATA_TYPE] = \"ordinal\";\n        zohochartsJSON[ZCConstants.META_DATA][ZCConstants.COLUMNS].push(itemEntry);\n        var itemCountEntry = {};\n        itemCountEntry[ZCConstants.DATA_INDEX] = 1;\n        itemCountEntry[ZCConstants.COLUMN_NAME] = \"Count(Item)\";\n        itemCountEntry[ZCConstants.DATA_TYPE] = \"numeric\";\n        zohochartsJSON[ZCConstants.META_DATA][ZCConstants.COLUMNS].push(itemCountEntry);\n      } else {\n        zohochartsJSON.series = dataMeta[ChartConstants.SERIES_DATA];\n\n        if (zohochartsJSON.xAxis[0] == null) {\n          zohochartsJSON.xAxis[0] = ZCArraySkeletonConstructor.get(ZCKeyList.HAXIS);\n        }\n\n        zohochartsJSON.xAxis[0].categories = dataMeta[ChartConstants.CATEGORIES];\n      }\n    }\n\n    function constructRaceBarSeries(dataMeta, chartMeta, zohochartsJSON, type) {\n      ZCRaceBarSeriesConstructor.construct(dataMeta, chartMeta, zohochartsJSON, type);\n    }\n\n    var keyToFunction = {};\n    keyToFunction[C.WORDCLOUD] = constructWordCloudSeries;\n    keyToFunction[C.RACEBAR] = constructRaceBarSeries;\n    return {\n      construct: function construct(type, chartType, dataMeta, chartMeta, zohochartsJSON) {\n        keyToFunction[chartType](dataMeta, chartMeta, zohochartsJSON, type);\n      }\n    };\n  }();\n\n  ctx.ZCSeriesConstructor = ZCSeriesConstructor;\n})(window || this);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./js/Utils/ZCSeriesConstructor.js\n");

/***/ }),

/***/ "./js/Utils/ZCSkeletonConstructor.js":
/*!*******************************************!*\
  !*** ./js/Utils/ZCSkeletonConstructor.js ***!
  \*******************************************/
/***/ (function() {

"use strict";
eval("/*$Id$*/\n //No I18N\n\n(function (ctx) {\n  var ZCConstants = ctx.ZCConstants;\n  var ZCKeyList = ctx.ZCKeyList;\n  var chartTypeToZCKeys = ctx.ZCMaps.chartTypeToZCKeys;\n\n  var ZCSkeletonConstructor = function () {\n    function setCanvas(json) {\n      json[ZCConstants.CANVAS] || (json[ZCConstants.CANVAS] = {});\n    }\n\n    function setTitle(json) {\n      setCanvas(json);\n      json[ZCConstants.CANVAS][ZCConstants.TITLE] || (json[ZCConstants.CANVAS][ZCConstants.TITLE] = {});\n    }\n\n    function setSubTitle(json) {\n      setCanvas(json);\n      json[ZCConstants.CANVAS][ZCConstants.SUBTITLE] || (json[ZCConstants.CANVAS][ZCConstants.SUBTITLE] = {});\n    }\n\n    var keyToFunction = {};\n    keyToFunction[ZCKeyList.CANVAS] = setCanvas;\n    keyToFunction[ZCKeyList.TITLE] = setTitle;\n    keyToFunction[ZCKeyList.SUBTITLE] = setSubTitle;\n\n    function getSkeleton(keyList, type) {\n      var skeleton = {};\n      var keysLen = keyList ? keyList.length : 0;\n\n      for (var i = 0; i < keysLen; i++) {\n        if (keyToFunction[keyList[i]]) {\n          keyToFunction[keyList[i]](skeleton, type);\n        }\n      }\n\n      return skeleton;\n    }\n\n    return {\n      construct: function construct(type, chartType) {\n        var keyList = chartTypeToZCKeys[chartType];\n        return getSkeleton(keyList, type);\n      }\n    };\n  }();\n\n  ctx.ZCSkeletonConstructor = ZCSkeletonConstructor;\n})(window || this);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9qcy9VdGlscy9aQ1NrZWxldG9uQ29uc3RydWN0b3IuanMuanMiLCJtYXBwaW5ncyI6IkFBQUE7Q0FDYTs7QUFDYixDQUFDLFVBQVVBLEdBQVYsRUFBZTtBQUNaLE1BQU1DLFdBQVcsR0FBR0QsR0FBRyxDQUFDQyxXQUF4QjtBQUNBLE1BQU1DLFNBQVMsR0FBR0YsR0FBRyxDQUFDRSxTQUF0QjtBQUNBLE1BQU1DLGlCQUFpQixHQUFHSCxHQUFHLENBQUNJLE1BQUosQ0FBV0QsaUJBQXJDOztBQUVBLE1BQUlFLHFCQUFxQixHQUFJLFlBQVc7QUFFcEMsYUFBU0MsU0FBVCxDQUFvQkMsSUFBcEIsRUFBMEI7QUFDdEJBLE1BQUFBLElBQUksQ0FBQ04sV0FBVyxDQUFDTyxNQUFiLENBQUosS0FBNkJELElBQUksQ0FBQ04sV0FBVyxDQUFDTyxNQUFiLENBQUosR0FBMkIsRUFBeEQ7QUFDSDs7QUFFRCxhQUFTQyxRQUFULENBQW1CRixJQUFuQixFQUF5QjtBQUNyQkQsTUFBQUEsU0FBUyxDQUFDQyxJQUFELENBQVQ7QUFDQUEsTUFBQUEsSUFBSSxDQUFDTixXQUFXLENBQUNPLE1BQWIsQ0FBSixDQUF5QlAsV0FBVyxDQUFDUyxLQUFyQyxNQUFnREgsSUFBSSxDQUFDTixXQUFXLENBQUNPLE1BQWIsQ0FBSixDQUF5QlAsV0FBVyxDQUFDUyxLQUFyQyxJQUE4QyxFQUE5RjtBQUNIOztBQUVELGFBQVNDLFdBQVQsQ0FBc0JKLElBQXRCLEVBQTRCO0FBQ3hCRCxNQUFBQSxTQUFTLENBQUNDLElBQUQsQ0FBVDtBQUNBQSxNQUFBQSxJQUFJLENBQUNOLFdBQVcsQ0FBQ08sTUFBYixDQUFKLENBQXlCUCxXQUFXLENBQUNXLFFBQXJDLE1BQW1ETCxJQUFJLENBQUNOLFdBQVcsQ0FBQ08sTUFBYixDQUFKLENBQXlCUCxXQUFXLENBQUNXLFFBQXJDLElBQWlELEVBQXBHO0FBQ0g7O0FBRUQsUUFBSUMsYUFBYSxHQUFHLEVBQXBCO0FBQ0FBLElBQUFBLGFBQWEsQ0FBQ1gsU0FBUyxDQUFDTSxNQUFYLENBQWIsR0FBd0RGLFNBQXhEO0FBQ0FPLElBQUFBLGFBQWEsQ0FBQ1gsU0FBUyxDQUFDUSxLQUFYLENBQWIsR0FBd0RELFFBQXhEO0FBQ0FJLElBQUFBLGFBQWEsQ0FBQ1gsU0FBUyxDQUFDVSxRQUFYLENBQWIsR0FBd0RELFdBQXhEOztBQUVBLGFBQVNHLFdBQVQsQ0FBc0JDLE9BQXRCLEVBQStCQyxJQUEvQixFQUFxQztBQUNqQyxVQUFJQyxRQUFRLEdBQUcsRUFBZjtBQUNBLFVBQUlDLE9BQU8sR0FBR0gsT0FBTyxHQUFHQSxPQUFPLENBQUNJLE1BQVgsR0FBb0IsQ0FBekM7O0FBQ0EsV0FBSSxJQUFJQyxDQUFDLEdBQUMsQ0FBVixFQUFhQSxDQUFDLEdBQUdGLE9BQWpCLEVBQTBCRSxDQUFDLEVBQTNCLEVBQStCO0FBQzNCLFlBQUdQLGFBQWEsQ0FBQ0UsT0FBTyxDQUFDSyxDQUFELENBQVIsQ0FBaEIsRUFBOEI7QUFDMUJQLFVBQUFBLGFBQWEsQ0FBQ0UsT0FBTyxDQUFDSyxDQUFELENBQVIsQ0FBYixDQUEwQkgsUUFBMUIsRUFBb0NELElBQXBDO0FBQ0g7QUFDSjs7QUFDRCxhQUFPQyxRQUFQO0FBQ0g7O0FBRUQsV0FBTztBQUNISSxNQUFBQSxTQUFTLEVBQUcsbUJBQVVMLElBQVYsRUFBZ0JNLFNBQWhCLEVBQTJCO0FBQ25DLFlBQUlQLE9BQU8sR0FBR1osaUJBQWlCLENBQUNtQixTQUFELENBQS9CO0FBQ0EsZUFBT1IsV0FBVyxDQUFDQyxPQUFELEVBQVVDLElBQVYsQ0FBbEI7QUFDSDtBQUpFLEtBQVA7QUFNSCxHQXRDMkIsRUFBNUI7O0FBd0NBaEIsRUFBQUEsR0FBRyxDQUFDSyxxQkFBSixHQUE0QkEscUJBQTVCO0FBRUgsQ0EvQ0QsRUErQ0drQixNQUFNLElBQUksSUEvQ2IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tdWx0aS1jaGFydC1mcmFtZXdvcmsvLi9qcy9VdGlscy9aQ1NrZWxldG9uQ29uc3RydWN0b3IuanM/NTA5MiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiRJZCQqL1xuXCJ1c2Ugc3RyaWN0XCI7Ly9ObyBJMThOXG4oZnVuY3Rpb24gKGN0eCkge1xuICAgIGNvbnN0IFpDQ29uc3RhbnRzID0gY3R4LlpDQ29uc3RhbnRzO1xuICAgIGNvbnN0IFpDS2V5TGlzdCA9IGN0eC5aQ0tleUxpc3Q7XG4gICAgY29uc3QgY2hhcnRUeXBlVG9aQ0tleXMgPSBjdHguWkNNYXBzLmNoYXJ0VHlwZVRvWkNLZXlzO1xuICAgIFxuICAgIHZhciBaQ1NrZWxldG9uQ29uc3RydWN0b3IgPSAoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgZnVuY3Rpb24gc2V0Q2FudmFzIChqc29uKSB7XG4gICAgICAgICAgICBqc29uW1pDQ29uc3RhbnRzLkNBTlZBU10gfHwgKGpzb25bWkNDb25zdGFudHMuQ0FOVkFTXSA9IHt9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHNldFRpdGxlIChqc29uKSB7XG4gICAgICAgICAgICBzZXRDYW52YXMoanNvbik7XG4gICAgICAgICAgICBqc29uW1pDQ29uc3RhbnRzLkNBTlZBU11bWkNDb25zdGFudHMuVElUTEVdIHx8IChqc29uW1pDQ29uc3RhbnRzLkNBTlZBU11bWkNDb25zdGFudHMuVElUTEVdID0ge30pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gc2V0U3ViVGl0bGUgKGpzb24pIHtcbiAgICAgICAgICAgIHNldENhbnZhcyhqc29uKTtcbiAgICAgICAgICAgIGpzb25bWkNDb25zdGFudHMuQ0FOVkFTXVtaQ0NvbnN0YW50cy5TVUJUSVRMRV0gfHwgKGpzb25bWkNDb25zdGFudHMuQ0FOVkFTXVtaQ0NvbnN0YW50cy5TVUJUSVRMRV0gPSB7fSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIga2V5VG9GdW5jdGlvbiA9IHt9O1xuICAgICAgICBrZXlUb0Z1bmN0aW9uW1pDS2V5TGlzdC5DQU5WQVNdICAgICAgICAgICAgICAgICAgID0gICAgIHNldENhbnZhcztcbiAgICAgICAga2V5VG9GdW5jdGlvbltaQ0tleUxpc3QuVElUTEVdICAgICAgICAgICAgICAgICAgICA9ICAgICBzZXRUaXRsZTtcbiAgICAgICAga2V5VG9GdW5jdGlvbltaQ0tleUxpc3QuU1VCVElUTEVdICAgICAgICAgICAgICAgICA9ICAgICBzZXRTdWJUaXRsZTtcblxuICAgICAgICBmdW5jdGlvbiBnZXRTa2VsZXRvbiAoa2V5TGlzdCwgdHlwZSkge1xuICAgICAgICAgICAgdmFyIHNrZWxldG9uID0ge307XG4gICAgICAgICAgICB2YXIga2V5c0xlbiA9IGtleUxpc3QgPyBrZXlMaXN0Lmxlbmd0aCA6IDA7XG4gICAgICAgICAgICBmb3IodmFyIGk9MDsgaSA8IGtleXNMZW47IGkrKykge1xuICAgICAgICAgICAgICAgIGlmKGtleVRvRnVuY3Rpb25ba2V5TGlzdFtpXV0pIHtcbiAgICAgICAgICAgICAgICAgICAga2V5VG9GdW5jdGlvbltrZXlMaXN0W2ldXShza2VsZXRvbiwgdHlwZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHNrZWxldG9uO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNvbnN0cnVjdCA6IGZ1bmN0aW9uICh0eXBlLCBjaGFydFR5cGUpIHtcbiAgICAgICAgICAgICAgICB2YXIga2V5TGlzdCA9IGNoYXJ0VHlwZVRvWkNLZXlzW2NoYXJ0VHlwZV07XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldFNrZWxldG9uKGtleUxpc3QsIHR5cGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH0pKCk7XG5cbiAgICBjdHguWkNTa2VsZXRvbkNvbnN0cnVjdG9yID0gWkNTa2VsZXRvbkNvbnN0cnVjdG9yO1xuXG59KSh3aW5kb3cgfHwgdGhpcyk7Il0sIm5hbWVzIjpbImN0eCIsIlpDQ29uc3RhbnRzIiwiWkNLZXlMaXN0IiwiY2hhcnRUeXBlVG9aQ0tleXMiLCJaQ01hcHMiLCJaQ1NrZWxldG9uQ29uc3RydWN0b3IiLCJzZXRDYW52YXMiLCJqc29uIiwiQ0FOVkFTIiwic2V0VGl0bGUiLCJUSVRMRSIsInNldFN1YlRpdGxlIiwiU1VCVElUTEUiLCJrZXlUb0Z1bmN0aW9uIiwiZ2V0U2tlbGV0b24iLCJrZXlMaXN0IiwidHlwZSIsInNrZWxldG9uIiwia2V5c0xlbiIsImxlbmd0aCIsImkiLCJjb25zdHJ1Y3QiLCJjaGFydFR5cGUiLCJ3aW5kb3ciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./js/Utils/ZCSkeletonConstructor.js\n");

/***/ }),

/***/ "./js/chart_all.js":
/*!*************************!*\
  !*** ./js/chart_all.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

eval("// require('./ThirdParty/highstock.src.js');//No I18N\n// require('./ThirdParty/highcharts-more.src.js');//No I18N\n// require('./ThirdParty/funnel.src.js');//No I18N\n// require('./ThirdParty/wordcloud.src.js');//No I18N\n// require('./ThirdParty/bullet.js');//No I18N\n// require('./ThirdParty/moment.js');//No I18N\n__webpack_require__(/*! ./Utils/ChartConstants.js */ \"./js/Utils/ChartConstants.js\"); //No I18N\n\n\n__webpack_require__(/*! ./Utils/ChartKeyList.js */ \"./js/Utils/ChartKeyList.js\"); //No I18N\n\n\n__webpack_require__(/*! ./Utils/ChartDefaults.js */ \"./js/Utils/ChartDefaults.js\"); //No I18N\n\n\n__webpack_require__(/*! ./Utils/ChartMaps.js */ \"./js/Utils/ChartMaps.js\"); //No I18N\n\n\n__webpack_require__(/*! ./Utils/ChartsPlugin.js */ \"./js/Utils/ChartsPlugin.js\"); //No I18N\n\n\n__webpack_require__(/*! ./Utils/GeneralUtilities.js */ \"./js/Utils/GeneralUtilities.js\"); //No I18N\n\n\n__webpack_require__(/*! ./Utils/ArraySkeletonConstructor.js */ \"./js/Utils/ArraySkeletonConstructor.js\"); //No I18N\n\n\n__webpack_require__(/*! ./Utils/ChartSkeletonConstructor.js */ \"./js/Utils/ChartSkeletonConstructor.js\"); //No I18N\n\n\n__webpack_require__(/*! ./Utils/ChartJSONConvertor.js */ \"./js/Utils/ChartJSONConvertor.js\"); //No I18N\n\n\n__webpack_require__(/*! ./Utils/HistogramUtil.js */ \"./js/Utils/HistogramUtil.js\"); //No I18N\n\n\n__webpack_require__(/*! ./Utils/HCConstants.js */ \"./js/Utils/HCConstants.js\"); //No I18N\n\n\n__webpack_require__(/*! ./Utils/HCKeyList.js */ \"./js/Utils/HCKeyList.js\"); //No I18N\n\n\n__webpack_require__(/*! ./Utils/HCMaps.js */ \"./js/Utils/HCMaps.js\"); //No I18N\n\n\n__webpack_require__(/*! ./Utils/HCDefaults.js */ \"./js/Utils/HCDefaults.js\"); //No I18N\n\n\n__webpack_require__(/*! ./Utils/HCUtils.js */ \"./js/Utils/HCUtils.js\"); //No I18N\n\n\n__webpack_require__(/*! ./Utils/HCCustomHandler.js */ \"./js/Utils/HCCustomHandler.js\"); //No I18N\n\n\n__webpack_require__(/*! ./Utils/HCArraySkeletonConstructor.js */ \"./js/Utils/HCArraySkeletonConstructor.js\"); //No I18N\n\n\n__webpack_require__(/*! ./Utils/RaceBarSeriesConstructor.js */ \"./js/Utils/RaceBarSeriesConstructor.js\"); //No I18N\n\n\n__webpack_require__(/*! ./Utils/HCTooltipHandler.js */ \"./js/Utils/HCTooltipHandler.js\"); //No I18N\n\n\n__webpack_require__(/*! ./Utils/HCDatalabelHandler.js */ \"./js/Utils/HCDatalabelHandler.js\"); //No I18N\n\n\n__webpack_require__(/*! ./Utils/HCPropHandler.js */ \"./js/Utils/HCPropHandler.js\"); //No I18N\n\n\n__webpack_require__(/*! ./Utils/HCSkeletonConstructor.js */ \"./js/Utils/HCSkeletonConstructor.js\"); //No I18N\n\n\n__webpack_require__(/*! ./Utils/HCSeriesPropertiesHandler.js */ \"./js/Utils/HCSeriesPropertiesHandler.js\"); //No I18N\n\n\n__webpack_require__(/*! ./Utils/HCSeriesConstructor.js */ \"./js/Utils/HCSeriesConstructor.js\"); //No I18N\n\n\n__webpack_require__(/*! ./Utils/HCJSONConvertor.js */ \"./js/Utils/HCJSONConvertor.js\"); //No I18N\n\n\n__webpack_require__(/*! ./Utils/ZCConstants.js */ \"./js/Utils/ZCConstants.js\"); //No I18N\n\n\n__webpack_require__(/*! ./Utils/ZCKeyList.js */ \"./js/Utils/ZCKeyList.js\"); //No I18N\n\n\n__webpack_require__(/*! ./Utils/ZCMaps.js */ \"./js/Utils/ZCMaps.js\"); //No I18N\n\n\n__webpack_require__(/*! ./Utils/ZCSkeletonConstructor.js */ \"./js/Utils/ZCSkeletonConstructor.js\"); //No I18N\n\n\n__webpack_require__(/*! ./Utils/ZCRaceBarSeriesConstructor.js */ \"./js/Utils/ZCRaceBarSeriesConstructor.js\"); //No I18N\n\n\n__webpack_require__(/*! ./Utils/ZCSeriesConstructor.js */ \"./js/Utils/ZCSeriesConstructor.js\"); //No I18N\n\n\n__webpack_require__(/*! ./Utils/ZCJSONConvertor.js */ \"./js/Utils/ZCJSONConvertor.js\"); //No I18N\n\n\n__webpack_require__(/*! ./MultiFramework/FileLoader.js */ \"./js/MultiFramework/FileLoader.js\"); //No I18N\n\n\n__webpack_require__(/*! ./MultiFramework/HighChartsFramework.js */ \"./js/MultiFramework/HighChartsFramework.js\"); //No I18N\n\n\n__webpack_require__(/*! ./MultiFramework/ZohoFramework.js */ \"./js/MultiFramework/ZohoFramework.js\"); //No I18N\n\n\n__webpack_require__(/*! ./MultiFramework/ChartFramework.js */ \"./js/MultiFramework/ChartFramework.js\"); //No I18N\n\n\n__webpack_require__(/*! ./DataHandler/DataMetaParser.js */ \"./js/DataHandler/DataMetaParser.js\"); //No I18N\n\n\n__webpack_require__(/*! ./DataHandler/ChartFrameworkChart.js */ \"./js/DataHandler/ChartFrameworkChart.js\"); //No I18N\n\n\n__webpack_require__(/*! ./ChartController/ChartController.js */ \"./js/ChartController/ChartController.js\"); //No I18N\n// require('./Testing/ChartFrameworkData.js');//No I18N//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9qcy9jaGFydF9hbGwuanMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FBLG1CQUFPLENBQUMsK0RBQUQsQ0FBUCxDLENBQXFDOzs7QUFDckNBLG1CQUFPLENBQUMsMkRBQUQsQ0FBUCxDLENBQW1DOzs7QUFDbkNBLG1CQUFPLENBQUMsNkRBQUQsQ0FBUCxDLENBQW9DOzs7QUFDcENBLG1CQUFPLENBQUMscURBQUQsQ0FBUCxDLENBQWdDOzs7QUFDaENBLG1CQUFPLENBQUMsMkRBQUQsQ0FBUCxDLENBQW1DOzs7QUFDbkNBLG1CQUFPLENBQUMsbUVBQUQsQ0FBUCxDLENBQXVDOzs7QUFDdkNBLG1CQUFPLENBQUMsbUZBQUQsQ0FBUCxDLENBQStDOzs7QUFDL0NBLG1CQUFPLENBQUMsbUZBQUQsQ0FBUCxDLENBQStDOzs7QUFDL0NBLG1CQUFPLENBQUMsdUVBQUQsQ0FBUCxDLENBQXlDOzs7QUFDekNBLG1CQUFPLENBQUMsNkRBQUQsQ0FBUCxDLENBQW9DOzs7QUFDcENBLG1CQUFPLENBQUMseURBQUQsQ0FBUCxDLENBQWtDOzs7QUFDbENBLG1CQUFPLENBQUMscURBQUQsQ0FBUCxDLENBQWdDOzs7QUFDaENBLG1CQUFPLENBQUMsK0NBQUQsQ0FBUCxDLENBQTZCOzs7QUFDN0JBLG1CQUFPLENBQUMsdURBQUQsQ0FBUCxDLENBQWlDOzs7QUFDakNBLG1CQUFPLENBQUMsaURBQUQsQ0FBUCxDLENBQThCOzs7QUFDOUJBLG1CQUFPLENBQUMsaUVBQUQsQ0FBUCxDLENBQXNDOzs7QUFDdENBLG1CQUFPLENBQUMsdUZBQUQsQ0FBUCxDLENBQWlEOzs7QUFDakRBLG1CQUFPLENBQUMsbUZBQUQsQ0FBUCxDLENBQStDOzs7QUFDL0NBLG1CQUFPLENBQUMsbUVBQUQsQ0FBUCxDLENBQXVDOzs7QUFDdkNBLG1CQUFPLENBQUMsdUVBQUQsQ0FBUCxDLENBQXlDOzs7QUFDekNBLG1CQUFPLENBQUMsNkRBQUQsQ0FBUCxDLENBQW9DOzs7QUFDcENBLG1CQUFPLENBQUMsNkVBQUQsQ0FBUCxDLENBQTRDOzs7QUFDNUNBLG1CQUFPLENBQUMscUZBQUQsQ0FBUCxDLENBQWdEOzs7QUFDaERBLG1CQUFPLENBQUMseUVBQUQsQ0FBUCxDLENBQTBDOzs7QUFDMUNBLG1CQUFPLENBQUMsaUVBQUQsQ0FBUCxDLENBQXNDOzs7QUFDdENBLG1CQUFPLENBQUMseURBQUQsQ0FBUCxDLENBQWtDOzs7QUFDbENBLG1CQUFPLENBQUMscURBQUQsQ0FBUCxDLENBQWdDOzs7QUFDaENBLG1CQUFPLENBQUMsK0NBQUQsQ0FBUCxDLENBQTZCOzs7QUFDN0JBLG1CQUFPLENBQUMsNkVBQUQsQ0FBUCxDLENBQTRDOzs7QUFDNUNBLG1CQUFPLENBQUMsdUZBQUQsQ0FBUCxDLENBQWlEOzs7QUFDakRBLG1CQUFPLENBQUMseUVBQUQsQ0FBUCxDLENBQTBDOzs7QUFDMUNBLG1CQUFPLENBQUMsaUVBQUQsQ0FBUCxDLENBQXNDOzs7QUFDdENBLG1CQUFPLENBQUMseUVBQUQsQ0FBUCxDLENBQTBDOzs7QUFDMUNBLG1CQUFPLENBQUMsMkZBQUQsQ0FBUCxDLENBQW1EOzs7QUFDbkRBLG1CQUFPLENBQUMsK0VBQUQsQ0FBUCxDLENBQTZDOzs7QUFDN0NBLG1CQUFPLENBQUMsaUZBQUQsQ0FBUCxDLENBQThDOzs7QUFDOUNBLG1CQUFPLENBQUMsMkVBQUQsQ0FBUCxDLENBQTJDOzs7QUFDM0NBLG1CQUFPLENBQUMscUZBQUQsQ0FBUCxDLENBQWdEOzs7QUFDaERBLG1CQUFPLENBQUMscUZBQUQsQ0FBUCxDLENBQWdEO0FBQ2hEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbXVsdGktY2hhcnQtZnJhbWV3b3JrLy4vanMvY2hhcnRfYWxsLmpzPzUyOGEiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gcmVxdWlyZSgnLi9UaGlyZFBhcnR5L2hpZ2hzdG9jay5zcmMuanMnKTsvL05vIEkxOE5cbi8vIHJlcXVpcmUoJy4vVGhpcmRQYXJ0eS9oaWdoY2hhcnRzLW1vcmUuc3JjLmpzJyk7Ly9ObyBJMThOXG4vLyByZXF1aXJlKCcuL1RoaXJkUGFydHkvZnVubmVsLnNyYy5qcycpOy8vTm8gSTE4TlxuLy8gcmVxdWlyZSgnLi9UaGlyZFBhcnR5L3dvcmRjbG91ZC5zcmMuanMnKTsvL05vIEkxOE5cbi8vIHJlcXVpcmUoJy4vVGhpcmRQYXJ0eS9idWxsZXQuanMnKTsvL05vIEkxOE5cbi8vIHJlcXVpcmUoJy4vVGhpcmRQYXJ0eS9tb21lbnQuanMnKTsvL05vIEkxOE5cbnJlcXVpcmUoJy4vVXRpbHMvQ2hhcnRDb25zdGFudHMuanMnKTsvL05vIEkxOE5cbnJlcXVpcmUoJy4vVXRpbHMvQ2hhcnRLZXlMaXN0LmpzJyk7Ly9ObyBJMThOXG5yZXF1aXJlKCcuL1V0aWxzL0NoYXJ0RGVmYXVsdHMuanMnKTsvL05vIEkxOE5cbnJlcXVpcmUoJy4vVXRpbHMvQ2hhcnRNYXBzLmpzJyk7Ly9ObyBJMThOXG5yZXF1aXJlKCcuL1V0aWxzL0NoYXJ0c1BsdWdpbi5qcycpOy8vTm8gSTE4TlxucmVxdWlyZSgnLi9VdGlscy9HZW5lcmFsVXRpbGl0aWVzLmpzJyk7Ly9ObyBJMThOXG5yZXF1aXJlKCcuL1V0aWxzL0FycmF5U2tlbGV0b25Db25zdHJ1Y3Rvci5qcycpOy8vTm8gSTE4TlxucmVxdWlyZSgnLi9VdGlscy9DaGFydFNrZWxldG9uQ29uc3RydWN0b3IuanMnKTsvL05vIEkxOE5cbnJlcXVpcmUoJy4vVXRpbHMvQ2hhcnRKU09OQ29udmVydG9yLmpzJyk7Ly9ObyBJMThOXG5yZXF1aXJlKCcuL1V0aWxzL0hpc3RvZ3JhbVV0aWwuanMnKTsvL05vIEkxOE5cbnJlcXVpcmUoJy4vVXRpbHMvSENDb25zdGFudHMuanMnKTsvL05vIEkxOE5cbnJlcXVpcmUoJy4vVXRpbHMvSENLZXlMaXN0LmpzJyk7Ly9ObyBJMThOXG5yZXF1aXJlKCcuL1V0aWxzL0hDTWFwcy5qcycpOy8vTm8gSTE4TlxucmVxdWlyZSgnLi9VdGlscy9IQ0RlZmF1bHRzLmpzJyk7Ly9ObyBJMThOXG5yZXF1aXJlKCcuL1V0aWxzL0hDVXRpbHMuanMnKTsvL05vIEkxOE5cbnJlcXVpcmUoJy4vVXRpbHMvSENDdXN0b21IYW5kbGVyLmpzJyk7Ly9ObyBJMThOXG5yZXF1aXJlKCcuL1V0aWxzL0hDQXJyYXlTa2VsZXRvbkNvbnN0cnVjdG9yLmpzJyk7Ly9ObyBJMThOXG5yZXF1aXJlKCcuL1V0aWxzL1JhY2VCYXJTZXJpZXNDb25zdHJ1Y3Rvci5qcycpOy8vTm8gSTE4TlxucmVxdWlyZSgnLi9VdGlscy9IQ1Rvb2x0aXBIYW5kbGVyLmpzJyk7Ly9ObyBJMThOXG5yZXF1aXJlKCcuL1V0aWxzL0hDRGF0YWxhYmVsSGFuZGxlci5qcycpOy8vTm8gSTE4TlxucmVxdWlyZSgnLi9VdGlscy9IQ1Byb3BIYW5kbGVyLmpzJyk7Ly9ObyBJMThOXG5yZXF1aXJlKCcuL1V0aWxzL0hDU2tlbGV0b25Db25zdHJ1Y3Rvci5qcycpOy8vTm8gSTE4TlxucmVxdWlyZSgnLi9VdGlscy9IQ1Nlcmllc1Byb3BlcnRpZXNIYW5kbGVyLmpzJyk7Ly9ObyBJMThOXG5yZXF1aXJlKCcuL1V0aWxzL0hDU2VyaWVzQ29uc3RydWN0b3IuanMnKTsvL05vIEkxOE5cbnJlcXVpcmUoJy4vVXRpbHMvSENKU09OQ29udmVydG9yLmpzJyk7Ly9ObyBJMThOXG5yZXF1aXJlKCcuL1V0aWxzL1pDQ29uc3RhbnRzLmpzJyk7Ly9ObyBJMThOXG5yZXF1aXJlKCcuL1V0aWxzL1pDS2V5TGlzdC5qcycpOy8vTm8gSTE4TlxucmVxdWlyZSgnLi9VdGlscy9aQ01hcHMuanMnKTsvL05vIEkxOE5cbnJlcXVpcmUoJy4vVXRpbHMvWkNTa2VsZXRvbkNvbnN0cnVjdG9yLmpzJyk7Ly9ObyBJMThOXG5yZXF1aXJlKCcuL1V0aWxzL1pDUmFjZUJhclNlcmllc0NvbnN0cnVjdG9yLmpzJyk7Ly9ObyBJMThOXG5yZXF1aXJlKCcuL1V0aWxzL1pDU2VyaWVzQ29uc3RydWN0b3IuanMnKTsvL05vIEkxOE5cbnJlcXVpcmUoJy4vVXRpbHMvWkNKU09OQ29udmVydG9yLmpzJyk7Ly9ObyBJMThOXG5yZXF1aXJlKCcuL011bHRpRnJhbWV3b3JrL0ZpbGVMb2FkZXIuanMnKTsvL05vIEkxOE5cbnJlcXVpcmUoJy4vTXVsdGlGcmFtZXdvcmsvSGlnaENoYXJ0c0ZyYW1ld29yay5qcycpOy8vTm8gSTE4TlxucmVxdWlyZSgnLi9NdWx0aUZyYW1ld29yay9ab2hvRnJhbWV3b3JrLmpzJyk7Ly9ObyBJMThOXG5yZXF1aXJlKCcuL011bHRpRnJhbWV3b3JrL0NoYXJ0RnJhbWV3b3JrLmpzJyk7Ly9ObyBJMThOXG5yZXF1aXJlKCcuL0RhdGFIYW5kbGVyL0RhdGFNZXRhUGFyc2VyLmpzJyk7Ly9ObyBJMThOXG5yZXF1aXJlKCcuL0RhdGFIYW5kbGVyL0NoYXJ0RnJhbWV3b3JrQ2hhcnQuanMnKTsvL05vIEkxOE5cbnJlcXVpcmUoJy4vQ2hhcnRDb250cm9sbGVyL0NoYXJ0Q29udHJvbGxlci5qcycpOy8vTm8gSTE4TlxuLy8gcmVxdWlyZSgnLi9UZXN0aW5nL0NoYXJ0RnJhbWV3b3JrRGF0YS5qcycpOy8vTm8gSTE4TiJdLCJuYW1lcyI6WyJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./js/chart_all.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./js/chart_all.js");
/******/ 	
/******/ })()
;